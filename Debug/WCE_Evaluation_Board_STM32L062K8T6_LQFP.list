
WCE_Evaluation_Board_STM32L062K8T6_LQFP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca8  08003ca8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  08003cc0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003cc0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000977b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fd  00000000  00000000  000297b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000130b7  00000000  00000000  0002c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f8f  00000000  00000000  0003f31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007748e  00000000  00000000  000472ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be73c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000be7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bec 	.word	0x08003bec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003bec 	.word	0x08003bec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84e 	bl	80002f0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__aeabi_d2uiz>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2200      	movs	r2, #0
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <__aeabi_d2uiz+0x38>)
 80002ba:	0004      	movs	r4, r0
 80002bc:	000d      	movs	r5, r1
 80002be:	f001 f9ff 	bl	80016c0 <__aeabi_dcmpge>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d104      	bne.n	80002d0 <__aeabi_d2uiz+0x1c>
 80002c6:	0020      	movs	r0, r4
 80002c8:	0029      	movs	r1, r5
 80002ca:	f001 f98f 	bl	80015ec <__aeabi_d2iz>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <__aeabi_d2uiz+0x38>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	0020      	movs	r0, r4
 80002d6:	0029      	movs	r1, r5
 80002d8:	f000 fe40 	bl	8000f5c <__aeabi_dsub>
 80002dc:	f001 f986 	bl	80015ec <__aeabi_d2iz>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	061b      	lsls	r3, r3, #24
 80002e4:	469c      	mov	ip, r3
 80002e6:	4460      	add	r0, ip
 80002e8:	e7f1      	b.n	80002ce <__aeabi_d2uiz+0x1a>
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	41e00000 	.word	0x41e00000

080002f0 <__udivmoddi4>:
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	464f      	mov	r7, r9
 80002f4:	4646      	mov	r6, r8
 80002f6:	46d6      	mov	lr, sl
 80002f8:	b5c0      	push	{r6, r7, lr}
 80002fa:	0004      	movs	r4, r0
 80002fc:	b082      	sub	sp, #8
 80002fe:	000d      	movs	r5, r1
 8000300:	4691      	mov	r9, r2
 8000302:	4698      	mov	r8, r3
 8000304:	428b      	cmp	r3, r1
 8000306:	d82f      	bhi.n	8000368 <__udivmoddi4+0x78>
 8000308:	d02c      	beq.n	8000364 <__udivmoddi4+0x74>
 800030a:	4641      	mov	r1, r8
 800030c:	4648      	mov	r0, r9
 800030e:	f001 f9ff 	bl	8001710 <__clzdi2>
 8000312:	0029      	movs	r1, r5
 8000314:	0006      	movs	r6, r0
 8000316:	0020      	movs	r0, r4
 8000318:	f001 f9fa 	bl	8001710 <__clzdi2>
 800031c:	1a33      	subs	r3, r6, r0
 800031e:	469c      	mov	ip, r3
 8000320:	3b20      	subs	r3, #32
 8000322:	469a      	mov	sl, r3
 8000324:	d500      	bpl.n	8000328 <__udivmoddi4+0x38>
 8000326:	e076      	b.n	8000416 <__udivmoddi4+0x126>
 8000328:	464b      	mov	r3, r9
 800032a:	4652      	mov	r2, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001f      	movs	r7, r3
 8000330:	464b      	mov	r3, r9
 8000332:	4662      	mov	r2, ip
 8000334:	4093      	lsls	r3, r2
 8000336:	001e      	movs	r6, r3
 8000338:	42af      	cmp	r7, r5
 800033a:	d828      	bhi.n	800038e <__udivmoddi4+0x9e>
 800033c:	d025      	beq.n	800038a <__udivmoddi4+0x9a>
 800033e:	4653      	mov	r3, sl
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5a>
 8000348:	e07b      	b.n	8000442 <__udivmoddi4+0x152>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4652      	mov	r2, sl
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4662      	mov	r2, ip
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e018      	b.n	8000396 <__udivmoddi4+0xa6>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9d0      	bls.n	800030a <__udivmoddi4+0x1a>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8a>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b002      	add	sp, #8
 8000380:	bc1c      	pop	{r2, r3, r4}
 8000382:	4690      	mov	r8, r2
 8000384:	4699      	mov	r9, r3
 8000386:	46a2      	mov	sl, r4
 8000388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038a:	42a3      	cmp	r3, r4
 800038c:	d9d7      	bls.n	800033e <__udivmoddi4+0x4e>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4663      	mov	r3, ip
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0e9      	beq.n	8000370 <__udivmoddi4+0x80>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	4698      	mov	r8, r3
 80003a0:	4641      	mov	r1, r8
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	430a      	orrs	r2, r1
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	4666      	mov	r6, ip
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xda>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xc4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xde>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0xe8>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xbc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xda>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	4653      	mov	r3, sl
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db23      	blt.n	800042e <__udivmoddi4+0x13e>
 80003e6:	002b      	movs	r3, r5
 80003e8:	4652      	mov	r2, sl
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4664      	mov	r4, ip
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	4653      	mov	r3, sl
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2d      	blt.n	8000458 <__udivmoddi4+0x168>
 80003fc:	0026      	movs	r6, r4
 80003fe:	4657      	mov	r7, sl
 8000400:	40be      	lsls	r6, r7
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4667      	mov	r7, ip
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e7ac      	b.n	8000370 <__udivmoddi4+0x80>
 8000416:	4662      	mov	r2, ip
 8000418:	2320      	movs	r3, #32
 800041a:	1a9b      	subs	r3, r3, r2
 800041c:	464a      	mov	r2, r9
 800041e:	40da      	lsrs	r2, r3
 8000420:	4661      	mov	r1, ip
 8000422:	0013      	movs	r3, r2
 8000424:	4642      	mov	r2, r8
 8000426:	408a      	lsls	r2, r1
 8000428:	0017      	movs	r7, r2
 800042a:	431f      	orrs	r7, r3
 800042c:	e780      	b.n	8000330 <__udivmoddi4+0x40>
 800042e:	4662      	mov	r2, ip
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4666      	mov	r6, ip
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4313      	orrs	r3, r2
 8000440:	e7d4      	b.n	80003ec <__udivmoddi4+0xfc>
 8000442:	4662      	mov	r2, ip
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e780      	b.n	800035a <__udivmoddi4+0x6a>
 8000458:	2320      	movs	r3, #32
 800045a:	4662      	mov	r2, ip
 800045c:	0026      	movs	r6, r4
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	002f      	movs	r7, r5
 8000464:	46b0      	mov	r8, r6
 8000466:	4666      	mov	r6, ip
 8000468:	40b7      	lsls	r7, r6
 800046a:	4646      	mov	r6, r8
 800046c:	003b      	movs	r3, r7
 800046e:	4333      	orrs	r3, r6
 8000470:	e7c8      	b.n	8000404 <__udivmoddi4+0x114>
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_ddiv>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	46de      	mov	lr, fp
 800047a:	464e      	mov	r6, r9
 800047c:	4645      	mov	r5, r8
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	4683      	mov	fp, r0
 8000482:	0007      	movs	r7, r0
 8000484:	030e      	lsls	r6, r1, #12
 8000486:	0048      	lsls	r0, r1, #1
 8000488:	b085      	sub	sp, #20
 800048a:	4692      	mov	sl, r2
 800048c:	001c      	movs	r4, r3
 800048e:	0b36      	lsrs	r6, r6, #12
 8000490:	0d40      	lsrs	r0, r0, #21
 8000492:	0fcd      	lsrs	r5, r1, #31
 8000494:	2800      	cmp	r0, #0
 8000496:	d100      	bne.n	800049a <__aeabi_ddiv+0x26>
 8000498:	e09d      	b.n	80005d6 <__aeabi_ddiv+0x162>
 800049a:	4b95      	ldr	r3, [pc, #596]	; (80006f0 <__aeabi_ddiv+0x27c>)
 800049c:	4298      	cmp	r0, r3
 800049e:	d039      	beq.n	8000514 <__aeabi_ddiv+0xa0>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	00f6      	lsls	r6, r6, #3
 80004a4:	041b      	lsls	r3, r3, #16
 80004a6:	431e      	orrs	r6, r3
 80004a8:	4a92      	ldr	r2, [pc, #584]	; (80006f4 <__aeabi_ddiv+0x280>)
 80004aa:	0f7b      	lsrs	r3, r7, #29
 80004ac:	4333      	orrs	r3, r6
 80004ae:	4699      	mov	r9, r3
 80004b0:	4694      	mov	ip, r2
 80004b2:	0003      	movs	r3, r0
 80004b4:	4463      	add	r3, ip
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	2600      	movs	r6, #0
 80004bc:	00ff      	lsls	r7, r7, #3
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	0323      	lsls	r3, r4, #12
 80004c2:	0b1b      	lsrs	r3, r3, #12
 80004c4:	4698      	mov	r8, r3
 80004c6:	0063      	lsls	r3, r4, #1
 80004c8:	0fe4      	lsrs	r4, r4, #31
 80004ca:	4652      	mov	r2, sl
 80004cc:	0d5b      	lsrs	r3, r3, #21
 80004ce:	9401      	str	r4, [sp, #4]
 80004d0:	d100      	bne.n	80004d4 <__aeabi_ddiv+0x60>
 80004d2:	e0b3      	b.n	800063c <__aeabi_ddiv+0x1c8>
 80004d4:	4986      	ldr	r1, [pc, #536]	; (80006f0 <__aeabi_ddiv+0x27c>)
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d100      	bne.n	80004dc <__aeabi_ddiv+0x68>
 80004da:	e09e      	b.n	800061a <__aeabi_ddiv+0x1a6>
 80004dc:	4642      	mov	r2, r8
 80004de:	00d1      	lsls	r1, r2, #3
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0412      	lsls	r2, r2, #16
 80004e4:	430a      	orrs	r2, r1
 80004e6:	4651      	mov	r1, sl
 80004e8:	0f49      	lsrs	r1, r1, #29
 80004ea:	4311      	orrs	r1, r2
 80004ec:	468b      	mov	fp, r1
 80004ee:	4981      	ldr	r1, [pc, #516]	; (80006f4 <__aeabi_ddiv+0x280>)
 80004f0:	4652      	mov	r2, sl
 80004f2:	468c      	mov	ip, r1
 80004f4:	9900      	ldr	r1, [sp, #0]
 80004f6:	4463      	add	r3, ip
 80004f8:	1acb      	subs	r3, r1, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	00d2      	lsls	r2, r2, #3
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	002b      	movs	r3, r5
 8000502:	4063      	eors	r3, r4
 8000504:	469a      	mov	sl, r3
 8000506:	2e0f      	cmp	r6, #15
 8000508:	d900      	bls.n	800050c <__aeabi_ddiv+0x98>
 800050a:	e105      	b.n	8000718 <__aeabi_ddiv+0x2a4>
 800050c:	4b7a      	ldr	r3, [pc, #488]	; (80006f8 <__aeabi_ddiv+0x284>)
 800050e:	00b6      	lsls	r6, r6, #2
 8000510:	599b      	ldr	r3, [r3, r6]
 8000512:	469f      	mov	pc, r3
 8000514:	465b      	mov	r3, fp
 8000516:	4333      	orrs	r3, r6
 8000518:	4699      	mov	r9, r3
 800051a:	d000      	beq.n	800051e <__aeabi_ddiv+0xaa>
 800051c:	e0b8      	b.n	8000690 <__aeabi_ddiv+0x21c>
 800051e:	2302      	movs	r3, #2
 8000520:	2608      	movs	r6, #8
 8000522:	2700      	movs	r7, #0
 8000524:	9000      	str	r0, [sp, #0]
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	e7ca      	b.n	80004c0 <__aeabi_ddiv+0x4c>
 800052a:	46cb      	mov	fp, r9
 800052c:	003a      	movs	r2, r7
 800052e:	9902      	ldr	r1, [sp, #8]
 8000530:	9501      	str	r5, [sp, #4]
 8000532:	9b01      	ldr	r3, [sp, #4]
 8000534:	469a      	mov	sl, r3
 8000536:	2902      	cmp	r1, #2
 8000538:	d027      	beq.n	800058a <__aeabi_ddiv+0x116>
 800053a:	2903      	cmp	r1, #3
 800053c:	d100      	bne.n	8000540 <__aeabi_ddiv+0xcc>
 800053e:	e280      	b.n	8000a42 <__aeabi_ddiv+0x5ce>
 8000540:	2901      	cmp	r1, #1
 8000542:	d044      	beq.n	80005ce <__aeabi_ddiv+0x15a>
 8000544:	496d      	ldr	r1, [pc, #436]	; (80006fc <__aeabi_ddiv+0x288>)
 8000546:	9b00      	ldr	r3, [sp, #0]
 8000548:	468c      	mov	ip, r1
 800054a:	4463      	add	r3, ip
 800054c:	001c      	movs	r4, r3
 800054e:	2c00      	cmp	r4, #0
 8000550:	dd38      	ble.n	80005c4 <__aeabi_ddiv+0x150>
 8000552:	0753      	lsls	r3, r2, #29
 8000554:	d000      	beq.n	8000558 <__aeabi_ddiv+0xe4>
 8000556:	e213      	b.n	8000980 <__aeabi_ddiv+0x50c>
 8000558:	08d2      	lsrs	r2, r2, #3
 800055a:	465b      	mov	r3, fp
 800055c:	01db      	lsls	r3, r3, #7
 800055e:	d509      	bpl.n	8000574 <__aeabi_ddiv+0x100>
 8000560:	4659      	mov	r1, fp
 8000562:	4b67      	ldr	r3, [pc, #412]	; (8000700 <__aeabi_ddiv+0x28c>)
 8000564:	4019      	ands	r1, r3
 8000566:	468b      	mov	fp, r1
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	00c9      	lsls	r1, r1, #3
 800056c:	468c      	mov	ip, r1
 800056e:	9b00      	ldr	r3, [sp, #0]
 8000570:	4463      	add	r3, ip
 8000572:	001c      	movs	r4, r3
 8000574:	4b63      	ldr	r3, [pc, #396]	; (8000704 <__aeabi_ddiv+0x290>)
 8000576:	429c      	cmp	r4, r3
 8000578:	dc07      	bgt.n	800058a <__aeabi_ddiv+0x116>
 800057a:	465b      	mov	r3, fp
 800057c:	0564      	lsls	r4, r4, #21
 800057e:	075f      	lsls	r7, r3, #29
 8000580:	025b      	lsls	r3, r3, #9
 8000582:	4317      	orrs	r7, r2
 8000584:	0b1b      	lsrs	r3, r3, #12
 8000586:	0d62      	lsrs	r2, r4, #21
 8000588:	e002      	b.n	8000590 <__aeabi_ddiv+0x11c>
 800058a:	2300      	movs	r3, #0
 800058c:	2700      	movs	r7, #0
 800058e:	4a58      	ldr	r2, [pc, #352]	; (80006f0 <__aeabi_ddiv+0x27c>)
 8000590:	2100      	movs	r1, #0
 8000592:	031b      	lsls	r3, r3, #12
 8000594:	0b1c      	lsrs	r4, r3, #12
 8000596:	0d0b      	lsrs	r3, r1, #20
 8000598:	051b      	lsls	r3, r3, #20
 800059a:	4323      	orrs	r3, r4
 800059c:	0514      	lsls	r4, r2, #20
 800059e:	4a5a      	ldr	r2, [pc, #360]	; (8000708 <__aeabi_ddiv+0x294>)
 80005a0:	0038      	movs	r0, r7
 80005a2:	4013      	ands	r3, r2
 80005a4:	431c      	orrs	r4, r3
 80005a6:	4653      	mov	r3, sl
 80005a8:	0064      	lsls	r4, r4, #1
 80005aa:	07db      	lsls	r3, r3, #31
 80005ac:	0864      	lsrs	r4, r4, #1
 80005ae:	431c      	orrs	r4, r3
 80005b0:	0021      	movs	r1, r4
 80005b2:	b005      	add	sp, #20
 80005b4:	bc3c      	pop	{r2, r3, r4, r5}
 80005b6:	4690      	mov	r8, r2
 80005b8:	4699      	mov	r9, r3
 80005ba:	46a2      	mov	sl, r4
 80005bc:	46ab      	mov	fp, r5
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	2201      	movs	r2, #1
 80005c2:	4252      	negs	r2, r2
 80005c4:	2301      	movs	r3, #1
 80005c6:	1b1b      	subs	r3, r3, r4
 80005c8:	2b38      	cmp	r3, #56	; 0x38
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_ddiv+0x15a>
 80005cc:	e1ad      	b.n	800092a <__aeabi_ddiv+0x4b6>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2300      	movs	r3, #0
 80005d2:	2700      	movs	r7, #0
 80005d4:	e7dc      	b.n	8000590 <__aeabi_ddiv+0x11c>
 80005d6:	465b      	mov	r3, fp
 80005d8:	4333      	orrs	r3, r6
 80005da:	4699      	mov	r9, r3
 80005dc:	d05e      	beq.n	800069c <__aeabi_ddiv+0x228>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_ddiv+0x170>
 80005e2:	e18a      	b.n	80008fa <__aeabi_ddiv+0x486>
 80005e4:	0030      	movs	r0, r6
 80005e6:	f001 f875 	bl	80016d4 <__clzsi2>
 80005ea:	0003      	movs	r3, r0
 80005ec:	3b0b      	subs	r3, #11
 80005ee:	2b1c      	cmp	r3, #28
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_ddiv+0x180>
 80005f2:	e17b      	b.n	80008ec <__aeabi_ddiv+0x478>
 80005f4:	221d      	movs	r2, #29
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	465a      	mov	r2, fp
 80005fa:	0001      	movs	r1, r0
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	3908      	subs	r1, #8
 8000600:	408e      	lsls	r6, r1
 8000602:	0013      	movs	r3, r2
 8000604:	465f      	mov	r7, fp
 8000606:	4333      	orrs	r3, r6
 8000608:	4699      	mov	r9, r3
 800060a:	408f      	lsls	r7, r1
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <__aeabi_ddiv+0x298>)
 800060e:	2600      	movs	r6, #0
 8000610:	1a1b      	subs	r3, r3, r0
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	e752      	b.n	80004c0 <__aeabi_ddiv+0x4c>
 800061a:	4641      	mov	r1, r8
 800061c:	4653      	mov	r3, sl
 800061e:	430b      	orrs	r3, r1
 8000620:	493b      	ldr	r1, [pc, #236]	; (8000710 <__aeabi_ddiv+0x29c>)
 8000622:	469b      	mov	fp, r3
 8000624:	468c      	mov	ip, r1
 8000626:	9b00      	ldr	r3, [sp, #0]
 8000628:	4463      	add	r3, ip
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	465b      	mov	r3, fp
 800062e:	2b00      	cmp	r3, #0
 8000630:	d13b      	bne.n	80006aa <__aeabi_ddiv+0x236>
 8000632:	2302      	movs	r3, #2
 8000634:	2200      	movs	r2, #0
 8000636:	431e      	orrs	r6, r3
 8000638:	2102      	movs	r1, #2
 800063a:	e761      	b.n	8000500 <__aeabi_ddiv+0x8c>
 800063c:	4643      	mov	r3, r8
 800063e:	4313      	orrs	r3, r2
 8000640:	469b      	mov	fp, r3
 8000642:	d037      	beq.n	80006b4 <__aeabi_ddiv+0x240>
 8000644:	4643      	mov	r3, r8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d100      	bne.n	800064c <__aeabi_ddiv+0x1d8>
 800064a:	e162      	b.n	8000912 <__aeabi_ddiv+0x49e>
 800064c:	4640      	mov	r0, r8
 800064e:	f001 f841 	bl	80016d4 <__clzsi2>
 8000652:	0003      	movs	r3, r0
 8000654:	3b0b      	subs	r3, #11
 8000656:	2b1c      	cmp	r3, #28
 8000658:	dd00      	ble.n	800065c <__aeabi_ddiv+0x1e8>
 800065a:	e153      	b.n	8000904 <__aeabi_ddiv+0x490>
 800065c:	0002      	movs	r2, r0
 800065e:	4641      	mov	r1, r8
 8000660:	3a08      	subs	r2, #8
 8000662:	4091      	lsls	r1, r2
 8000664:	4688      	mov	r8, r1
 8000666:	211d      	movs	r1, #29
 8000668:	1acb      	subs	r3, r1, r3
 800066a:	4651      	mov	r1, sl
 800066c:	40d9      	lsrs	r1, r3
 800066e:	000b      	movs	r3, r1
 8000670:	4641      	mov	r1, r8
 8000672:	430b      	orrs	r3, r1
 8000674:	469b      	mov	fp, r3
 8000676:	4653      	mov	r3, sl
 8000678:	4093      	lsls	r3, r2
 800067a:	001a      	movs	r2, r3
 800067c:	9b00      	ldr	r3, [sp, #0]
 800067e:	4925      	ldr	r1, [pc, #148]	; (8000714 <__aeabi_ddiv+0x2a0>)
 8000680:	469c      	mov	ip, r3
 8000682:	4460      	add	r0, ip
 8000684:	0003      	movs	r3, r0
 8000686:	468c      	mov	ip, r1
 8000688:	4463      	add	r3, ip
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2100      	movs	r1, #0
 800068e:	e737      	b.n	8000500 <__aeabi_ddiv+0x8c>
 8000690:	2303      	movs	r3, #3
 8000692:	46b1      	mov	r9, r6
 8000694:	9000      	str	r0, [sp, #0]
 8000696:	260c      	movs	r6, #12
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	e711      	b.n	80004c0 <__aeabi_ddiv+0x4c>
 800069c:	2300      	movs	r3, #0
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	2604      	movs	r6, #4
 80006a4:	2700      	movs	r7, #0
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	e70a      	b.n	80004c0 <__aeabi_ddiv+0x4c>
 80006aa:	2303      	movs	r3, #3
 80006ac:	46c3      	mov	fp, r8
 80006ae:	431e      	orrs	r6, r3
 80006b0:	2103      	movs	r1, #3
 80006b2:	e725      	b.n	8000500 <__aeabi_ddiv+0x8c>
 80006b4:	3301      	adds	r3, #1
 80006b6:	431e      	orrs	r6, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	2101      	movs	r1, #1
 80006bc:	e720      	b.n	8000500 <__aeabi_ddiv+0x8c>
 80006be:	2300      	movs	r3, #0
 80006c0:	469a      	mov	sl, r3
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	2700      	movs	r7, #0
 80006c6:	031b      	lsls	r3, r3, #12
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <__aeabi_ddiv+0x27c>)
 80006ca:	e761      	b.n	8000590 <__aeabi_ddiv+0x11c>
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	4649      	mov	r1, r9
 80006d0:	031b      	lsls	r3, r3, #12
 80006d2:	4219      	tst	r1, r3
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x264>
 80006d6:	e0e2      	b.n	800089e <__aeabi_ddiv+0x42a>
 80006d8:	4659      	mov	r1, fp
 80006da:	4219      	tst	r1, r3
 80006dc:	d000      	beq.n	80006e0 <__aeabi_ddiv+0x26c>
 80006de:	e0de      	b.n	800089e <__aeabi_ddiv+0x42a>
 80006e0:	430b      	orrs	r3, r1
 80006e2:	031b      	lsls	r3, r3, #12
 80006e4:	0017      	movs	r7, r2
 80006e6:	0b1b      	lsrs	r3, r3, #12
 80006e8:	46a2      	mov	sl, r4
 80006ea:	4a01      	ldr	r2, [pc, #4]	; (80006f0 <__aeabi_ddiv+0x27c>)
 80006ec:	e750      	b.n	8000590 <__aeabi_ddiv+0x11c>
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	000007ff 	.word	0x000007ff
 80006f4:	fffffc01 	.word	0xfffffc01
 80006f8:	08003c04 	.word	0x08003c04
 80006fc:	000003ff 	.word	0x000003ff
 8000700:	feffffff 	.word	0xfeffffff
 8000704:	000007fe 	.word	0x000007fe
 8000708:	800fffff 	.word	0x800fffff
 800070c:	fffffc0d 	.word	0xfffffc0d
 8000710:	fffff801 	.word	0xfffff801
 8000714:	000003f3 	.word	0x000003f3
 8000718:	45d9      	cmp	r9, fp
 800071a:	d900      	bls.n	800071e <__aeabi_ddiv+0x2aa>
 800071c:	e0cb      	b.n	80008b6 <__aeabi_ddiv+0x442>
 800071e:	d100      	bne.n	8000722 <__aeabi_ddiv+0x2ae>
 8000720:	e0c6      	b.n	80008b0 <__aeabi_ddiv+0x43c>
 8000722:	003c      	movs	r4, r7
 8000724:	4648      	mov	r0, r9
 8000726:	2700      	movs	r7, #0
 8000728:	9b00      	ldr	r3, [sp, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	465b      	mov	r3, fp
 8000730:	0e16      	lsrs	r6, r2, #24
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	431e      	orrs	r6, r3
 8000736:	0213      	lsls	r3, r2, #8
 8000738:	4698      	mov	r8, r3
 800073a:	0433      	lsls	r3, r6, #16
 800073c:	0c1b      	lsrs	r3, r3, #16
 800073e:	4699      	mov	r9, r3
 8000740:	0c31      	lsrs	r1, r6, #16
 8000742:	9101      	str	r1, [sp, #4]
 8000744:	f7ff fd66 	bl	8000214 <__aeabi_uidivmod>
 8000748:	464a      	mov	r2, r9
 800074a:	4342      	muls	r2, r0
 800074c:	040b      	lsls	r3, r1, #16
 800074e:	0c21      	lsrs	r1, r4, #16
 8000750:	0005      	movs	r5, r0
 8000752:	4319      	orrs	r1, r3
 8000754:	428a      	cmp	r2, r1
 8000756:	d907      	bls.n	8000768 <__aeabi_ddiv+0x2f4>
 8000758:	1989      	adds	r1, r1, r6
 800075a:	3d01      	subs	r5, #1
 800075c:	428e      	cmp	r6, r1
 800075e:	d803      	bhi.n	8000768 <__aeabi_ddiv+0x2f4>
 8000760:	428a      	cmp	r2, r1
 8000762:	d901      	bls.n	8000768 <__aeabi_ddiv+0x2f4>
 8000764:	1e85      	subs	r5, r0, #2
 8000766:	1989      	adds	r1, r1, r6
 8000768:	1a88      	subs	r0, r1, r2
 800076a:	9901      	ldr	r1, [sp, #4]
 800076c:	f7ff fd52 	bl	8000214 <__aeabi_uidivmod>
 8000770:	0409      	lsls	r1, r1, #16
 8000772:	468c      	mov	ip, r1
 8000774:	464a      	mov	r2, r9
 8000776:	0421      	lsls	r1, r4, #16
 8000778:	4664      	mov	r4, ip
 800077a:	4342      	muls	r2, r0
 800077c:	0c09      	lsrs	r1, r1, #16
 800077e:	0003      	movs	r3, r0
 8000780:	4321      	orrs	r1, r4
 8000782:	428a      	cmp	r2, r1
 8000784:	d904      	bls.n	8000790 <__aeabi_ddiv+0x31c>
 8000786:	1989      	adds	r1, r1, r6
 8000788:	3b01      	subs	r3, #1
 800078a:	428e      	cmp	r6, r1
 800078c:	d800      	bhi.n	8000790 <__aeabi_ddiv+0x31c>
 800078e:	e0f1      	b.n	8000974 <__aeabi_ddiv+0x500>
 8000790:	042d      	lsls	r5, r5, #16
 8000792:	431d      	orrs	r5, r3
 8000794:	46ab      	mov	fp, r5
 8000796:	4643      	mov	r3, r8
 8000798:	1a89      	subs	r1, r1, r2
 800079a:	4642      	mov	r2, r8
 800079c:	0c28      	lsrs	r0, r5, #16
 800079e:	0412      	lsls	r2, r2, #16
 80007a0:	0c1d      	lsrs	r5, r3, #16
 80007a2:	465b      	mov	r3, fp
 80007a4:	0c14      	lsrs	r4, r2, #16
 80007a6:	0022      	movs	r2, r4
 80007a8:	041b      	lsls	r3, r3, #16
 80007aa:	0c1b      	lsrs	r3, r3, #16
 80007ac:	435a      	muls	r2, r3
 80007ae:	9403      	str	r4, [sp, #12]
 80007b0:	436b      	muls	r3, r5
 80007b2:	4344      	muls	r4, r0
 80007b4:	9502      	str	r5, [sp, #8]
 80007b6:	4368      	muls	r0, r5
 80007b8:	191b      	adds	r3, r3, r4
 80007ba:	0c15      	lsrs	r5, r2, #16
 80007bc:	18eb      	adds	r3, r5, r3
 80007be:	429c      	cmp	r4, r3
 80007c0:	d903      	bls.n	80007ca <__aeabi_ddiv+0x356>
 80007c2:	2480      	movs	r4, #128	; 0x80
 80007c4:	0264      	lsls	r4, r4, #9
 80007c6:	46a4      	mov	ip, r4
 80007c8:	4460      	add	r0, ip
 80007ca:	0c1c      	lsrs	r4, r3, #16
 80007cc:	0415      	lsls	r5, r2, #16
 80007ce:	041b      	lsls	r3, r3, #16
 80007d0:	0c2d      	lsrs	r5, r5, #16
 80007d2:	1820      	adds	r0, r4, r0
 80007d4:	195d      	adds	r5, r3, r5
 80007d6:	4281      	cmp	r1, r0
 80007d8:	d377      	bcc.n	80008ca <__aeabi_ddiv+0x456>
 80007da:	d073      	beq.n	80008c4 <__aeabi_ddiv+0x450>
 80007dc:	1a0c      	subs	r4, r1, r0
 80007de:	4aa2      	ldr	r2, [pc, #648]	; (8000a68 <__aeabi_ddiv+0x5f4>)
 80007e0:	1b7d      	subs	r5, r7, r5
 80007e2:	42af      	cmp	r7, r5
 80007e4:	41bf      	sbcs	r7, r7
 80007e6:	4694      	mov	ip, r2
 80007e8:	9b00      	ldr	r3, [sp, #0]
 80007ea:	427f      	negs	r7, r7
 80007ec:	4463      	add	r3, ip
 80007ee:	1be0      	subs	r0, r4, r7
 80007f0:	001c      	movs	r4, r3
 80007f2:	4286      	cmp	r6, r0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_ddiv+0x384>
 80007f6:	e0db      	b.n	80009b0 <__aeabi_ddiv+0x53c>
 80007f8:	9901      	ldr	r1, [sp, #4]
 80007fa:	f7ff fd0b 	bl	8000214 <__aeabi_uidivmod>
 80007fe:	464a      	mov	r2, r9
 8000800:	4342      	muls	r2, r0
 8000802:	040b      	lsls	r3, r1, #16
 8000804:	0c29      	lsrs	r1, r5, #16
 8000806:	0007      	movs	r7, r0
 8000808:	4319      	orrs	r1, r3
 800080a:	428a      	cmp	r2, r1
 800080c:	d907      	bls.n	800081e <__aeabi_ddiv+0x3aa>
 800080e:	1989      	adds	r1, r1, r6
 8000810:	3f01      	subs	r7, #1
 8000812:	428e      	cmp	r6, r1
 8000814:	d803      	bhi.n	800081e <__aeabi_ddiv+0x3aa>
 8000816:	428a      	cmp	r2, r1
 8000818:	d901      	bls.n	800081e <__aeabi_ddiv+0x3aa>
 800081a:	1e87      	subs	r7, r0, #2
 800081c:	1989      	adds	r1, r1, r6
 800081e:	1a88      	subs	r0, r1, r2
 8000820:	9901      	ldr	r1, [sp, #4]
 8000822:	f7ff fcf7 	bl	8000214 <__aeabi_uidivmod>
 8000826:	0409      	lsls	r1, r1, #16
 8000828:	464a      	mov	r2, r9
 800082a:	4689      	mov	r9, r1
 800082c:	0429      	lsls	r1, r5, #16
 800082e:	464d      	mov	r5, r9
 8000830:	4342      	muls	r2, r0
 8000832:	0c09      	lsrs	r1, r1, #16
 8000834:	0003      	movs	r3, r0
 8000836:	4329      	orrs	r1, r5
 8000838:	428a      	cmp	r2, r1
 800083a:	d907      	bls.n	800084c <__aeabi_ddiv+0x3d8>
 800083c:	1989      	adds	r1, r1, r6
 800083e:	3b01      	subs	r3, #1
 8000840:	428e      	cmp	r6, r1
 8000842:	d803      	bhi.n	800084c <__aeabi_ddiv+0x3d8>
 8000844:	428a      	cmp	r2, r1
 8000846:	d901      	bls.n	800084c <__aeabi_ddiv+0x3d8>
 8000848:	1e83      	subs	r3, r0, #2
 800084a:	1989      	adds	r1, r1, r6
 800084c:	043f      	lsls	r7, r7, #16
 800084e:	1a89      	subs	r1, r1, r2
 8000850:	003a      	movs	r2, r7
 8000852:	9f03      	ldr	r7, [sp, #12]
 8000854:	431a      	orrs	r2, r3
 8000856:	0038      	movs	r0, r7
 8000858:	0413      	lsls	r3, r2, #16
 800085a:	0c1b      	lsrs	r3, r3, #16
 800085c:	4358      	muls	r0, r3
 800085e:	4681      	mov	r9, r0
 8000860:	9802      	ldr	r0, [sp, #8]
 8000862:	0c15      	lsrs	r5, r2, #16
 8000864:	436f      	muls	r7, r5
 8000866:	4343      	muls	r3, r0
 8000868:	4345      	muls	r5, r0
 800086a:	4648      	mov	r0, r9
 800086c:	0c00      	lsrs	r0, r0, #16
 800086e:	4684      	mov	ip, r0
 8000870:	19db      	adds	r3, r3, r7
 8000872:	4463      	add	r3, ip
 8000874:	429f      	cmp	r7, r3
 8000876:	d903      	bls.n	8000880 <__aeabi_ddiv+0x40c>
 8000878:	2080      	movs	r0, #128	; 0x80
 800087a:	0240      	lsls	r0, r0, #9
 800087c:	4684      	mov	ip, r0
 800087e:	4465      	add	r5, ip
 8000880:	4648      	mov	r0, r9
 8000882:	0c1f      	lsrs	r7, r3, #16
 8000884:	0400      	lsls	r0, r0, #16
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	0c00      	lsrs	r0, r0, #16
 800088a:	197d      	adds	r5, r7, r5
 800088c:	1818      	adds	r0, r3, r0
 800088e:	42a9      	cmp	r1, r5
 8000890:	d200      	bcs.n	8000894 <__aeabi_ddiv+0x420>
 8000892:	e084      	b.n	800099e <__aeabi_ddiv+0x52a>
 8000894:	d100      	bne.n	8000898 <__aeabi_ddiv+0x424>
 8000896:	e07f      	b.n	8000998 <__aeabi_ddiv+0x524>
 8000898:	2301      	movs	r3, #1
 800089a:	431a      	orrs	r2, r3
 800089c:	e657      	b.n	800054e <__aeabi_ddiv+0xda>
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	464a      	mov	r2, r9
 80008a2:	031b      	lsls	r3, r3, #12
 80008a4:	4313      	orrs	r3, r2
 80008a6:	031b      	lsls	r3, r3, #12
 80008a8:	0b1b      	lsrs	r3, r3, #12
 80008aa:	46aa      	mov	sl, r5
 80008ac:	4a6f      	ldr	r2, [pc, #444]	; (8000a6c <__aeabi_ddiv+0x5f8>)
 80008ae:	e66f      	b.n	8000590 <__aeabi_ddiv+0x11c>
 80008b0:	42ba      	cmp	r2, r7
 80008b2:	d900      	bls.n	80008b6 <__aeabi_ddiv+0x442>
 80008b4:	e735      	b.n	8000722 <__aeabi_ddiv+0x2ae>
 80008b6:	464b      	mov	r3, r9
 80008b8:	07dc      	lsls	r4, r3, #31
 80008ba:	0858      	lsrs	r0, r3, #1
 80008bc:	087b      	lsrs	r3, r7, #1
 80008be:	431c      	orrs	r4, r3
 80008c0:	07ff      	lsls	r7, r7, #31
 80008c2:	e734      	b.n	800072e <__aeabi_ddiv+0x2ba>
 80008c4:	2400      	movs	r4, #0
 80008c6:	42af      	cmp	r7, r5
 80008c8:	d289      	bcs.n	80007de <__aeabi_ddiv+0x36a>
 80008ca:	4447      	add	r7, r8
 80008cc:	4547      	cmp	r7, r8
 80008ce:	41a4      	sbcs	r4, r4
 80008d0:	465b      	mov	r3, fp
 80008d2:	4264      	negs	r4, r4
 80008d4:	19a4      	adds	r4, r4, r6
 80008d6:	1864      	adds	r4, r4, r1
 80008d8:	3b01      	subs	r3, #1
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d21e      	bcs.n	800091c <__aeabi_ddiv+0x4a8>
 80008de:	42a0      	cmp	r0, r4
 80008e0:	d86d      	bhi.n	80009be <__aeabi_ddiv+0x54a>
 80008e2:	d100      	bne.n	80008e6 <__aeabi_ddiv+0x472>
 80008e4:	e0b6      	b.n	8000a54 <__aeabi_ddiv+0x5e0>
 80008e6:	1a24      	subs	r4, r4, r0
 80008e8:	469b      	mov	fp, r3
 80008ea:	e778      	b.n	80007de <__aeabi_ddiv+0x36a>
 80008ec:	0003      	movs	r3, r0
 80008ee:	465a      	mov	r2, fp
 80008f0:	3b28      	subs	r3, #40	; 0x28
 80008f2:	409a      	lsls	r2, r3
 80008f4:	2700      	movs	r7, #0
 80008f6:	4691      	mov	r9, r2
 80008f8:	e688      	b.n	800060c <__aeabi_ddiv+0x198>
 80008fa:	4658      	mov	r0, fp
 80008fc:	f000 feea 	bl	80016d4 <__clzsi2>
 8000900:	3020      	adds	r0, #32
 8000902:	e672      	b.n	80005ea <__aeabi_ddiv+0x176>
 8000904:	0003      	movs	r3, r0
 8000906:	4652      	mov	r2, sl
 8000908:	3b28      	subs	r3, #40	; 0x28
 800090a:	409a      	lsls	r2, r3
 800090c:	4693      	mov	fp, r2
 800090e:	2200      	movs	r2, #0
 8000910:	e6b4      	b.n	800067c <__aeabi_ddiv+0x208>
 8000912:	4650      	mov	r0, sl
 8000914:	f000 fede 	bl	80016d4 <__clzsi2>
 8000918:	3020      	adds	r0, #32
 800091a:	e69a      	b.n	8000652 <__aeabi_ddiv+0x1de>
 800091c:	42a6      	cmp	r6, r4
 800091e:	d1e2      	bne.n	80008e6 <__aeabi_ddiv+0x472>
 8000920:	45b8      	cmp	r8, r7
 8000922:	d9dc      	bls.n	80008de <__aeabi_ddiv+0x46a>
 8000924:	1a34      	subs	r4, r6, r0
 8000926:	469b      	mov	fp, r3
 8000928:	e759      	b.n	80007de <__aeabi_ddiv+0x36a>
 800092a:	2b1f      	cmp	r3, #31
 800092c:	dc65      	bgt.n	80009fa <__aeabi_ddiv+0x586>
 800092e:	4c50      	ldr	r4, [pc, #320]	; (8000a70 <__aeabi_ddiv+0x5fc>)
 8000930:	9900      	ldr	r1, [sp, #0]
 8000932:	46a4      	mov	ip, r4
 8000934:	465c      	mov	r4, fp
 8000936:	4461      	add	r1, ip
 8000938:	0008      	movs	r0, r1
 800093a:	408c      	lsls	r4, r1
 800093c:	0011      	movs	r1, r2
 800093e:	4082      	lsls	r2, r0
 8000940:	40d9      	lsrs	r1, r3
 8000942:	1e50      	subs	r0, r2, #1
 8000944:	4182      	sbcs	r2, r0
 8000946:	430c      	orrs	r4, r1
 8000948:	4314      	orrs	r4, r2
 800094a:	465a      	mov	r2, fp
 800094c:	40da      	lsrs	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	0762      	lsls	r2, r4, #29
 8000952:	d009      	beq.n	8000968 <__aeabi_ddiv+0x4f4>
 8000954:	220f      	movs	r2, #15
 8000956:	4022      	ands	r2, r4
 8000958:	2a04      	cmp	r2, #4
 800095a:	d005      	beq.n	8000968 <__aeabi_ddiv+0x4f4>
 800095c:	0022      	movs	r2, r4
 800095e:	1d14      	adds	r4, r2, #4
 8000960:	4294      	cmp	r4, r2
 8000962:	4189      	sbcs	r1, r1
 8000964:	4249      	negs	r1, r1
 8000966:	185b      	adds	r3, r3, r1
 8000968:	021a      	lsls	r2, r3, #8
 800096a:	d562      	bpl.n	8000a32 <__aeabi_ddiv+0x5be>
 800096c:	2201      	movs	r2, #1
 800096e:	2300      	movs	r3, #0
 8000970:	2700      	movs	r7, #0
 8000972:	e60d      	b.n	8000590 <__aeabi_ddiv+0x11c>
 8000974:	428a      	cmp	r2, r1
 8000976:	d800      	bhi.n	800097a <__aeabi_ddiv+0x506>
 8000978:	e70a      	b.n	8000790 <__aeabi_ddiv+0x31c>
 800097a:	1e83      	subs	r3, r0, #2
 800097c:	1989      	adds	r1, r1, r6
 800097e:	e707      	b.n	8000790 <__aeabi_ddiv+0x31c>
 8000980:	230f      	movs	r3, #15
 8000982:	4013      	ands	r3, r2
 8000984:	2b04      	cmp	r3, #4
 8000986:	d100      	bne.n	800098a <__aeabi_ddiv+0x516>
 8000988:	e5e6      	b.n	8000558 <__aeabi_ddiv+0xe4>
 800098a:	1d17      	adds	r7, r2, #4
 800098c:	4297      	cmp	r7, r2
 800098e:	4192      	sbcs	r2, r2
 8000990:	4253      	negs	r3, r2
 8000992:	449b      	add	fp, r3
 8000994:	08fa      	lsrs	r2, r7, #3
 8000996:	e5e0      	b.n	800055a <__aeabi_ddiv+0xe6>
 8000998:	2800      	cmp	r0, #0
 800099a:	d100      	bne.n	800099e <__aeabi_ddiv+0x52a>
 800099c:	e5d7      	b.n	800054e <__aeabi_ddiv+0xda>
 800099e:	1871      	adds	r1, r6, r1
 80009a0:	1e53      	subs	r3, r2, #1
 80009a2:	42b1      	cmp	r1, r6
 80009a4:	d327      	bcc.n	80009f6 <__aeabi_ddiv+0x582>
 80009a6:	42a9      	cmp	r1, r5
 80009a8:	d315      	bcc.n	80009d6 <__aeabi_ddiv+0x562>
 80009aa:	d058      	beq.n	8000a5e <__aeabi_ddiv+0x5ea>
 80009ac:	001a      	movs	r2, r3
 80009ae:	e773      	b.n	8000898 <__aeabi_ddiv+0x424>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_ddiv+0x542>
 80009b4:	e604      	b.n	80005c0 <__aeabi_ddiv+0x14c>
 80009b6:	2301      	movs	r3, #1
 80009b8:	2200      	movs	r2, #0
 80009ba:	449b      	add	fp, r3
 80009bc:	e5cd      	b.n	800055a <__aeabi_ddiv+0xe6>
 80009be:	2302      	movs	r3, #2
 80009c0:	4447      	add	r7, r8
 80009c2:	4547      	cmp	r7, r8
 80009c4:	4189      	sbcs	r1, r1
 80009c6:	425b      	negs	r3, r3
 80009c8:	469c      	mov	ip, r3
 80009ca:	4249      	negs	r1, r1
 80009cc:	1989      	adds	r1, r1, r6
 80009ce:	190c      	adds	r4, r1, r4
 80009d0:	44e3      	add	fp, ip
 80009d2:	1a24      	subs	r4, r4, r0
 80009d4:	e703      	b.n	80007de <__aeabi_ddiv+0x36a>
 80009d6:	4643      	mov	r3, r8
 80009d8:	005f      	lsls	r7, r3, #1
 80009da:	4547      	cmp	r7, r8
 80009dc:	419b      	sbcs	r3, r3
 80009de:	46b8      	mov	r8, r7
 80009e0:	425b      	negs	r3, r3
 80009e2:	199e      	adds	r6, r3, r6
 80009e4:	3a02      	subs	r2, #2
 80009e6:	1989      	adds	r1, r1, r6
 80009e8:	42a9      	cmp	r1, r5
 80009ea:	d000      	beq.n	80009ee <__aeabi_ddiv+0x57a>
 80009ec:	e754      	b.n	8000898 <__aeabi_ddiv+0x424>
 80009ee:	4540      	cmp	r0, r8
 80009f0:	d000      	beq.n	80009f4 <__aeabi_ddiv+0x580>
 80009f2:	e751      	b.n	8000898 <__aeabi_ddiv+0x424>
 80009f4:	e5ab      	b.n	800054e <__aeabi_ddiv+0xda>
 80009f6:	001a      	movs	r2, r3
 80009f8:	e7f6      	b.n	80009e8 <__aeabi_ddiv+0x574>
 80009fa:	211f      	movs	r1, #31
 80009fc:	465f      	mov	r7, fp
 80009fe:	4249      	negs	r1, r1
 8000a00:	1b0c      	subs	r4, r1, r4
 8000a02:	40e7      	lsrs	r7, r4
 8000a04:	2b20      	cmp	r3, #32
 8000a06:	d007      	beq.n	8000a18 <__aeabi_ddiv+0x5a4>
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <__aeabi_ddiv+0x600>)
 8000a0a:	9b00      	ldr	r3, [sp, #0]
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	4463      	add	r3, ip
 8000a10:	0018      	movs	r0, r3
 8000a12:	465b      	mov	r3, fp
 8000a14:	4083      	lsls	r3, r0
 8000a16:	431a      	orrs	r2, r3
 8000a18:	1e50      	subs	r0, r2, #1
 8000a1a:	4182      	sbcs	r2, r0
 8000a1c:	433a      	orrs	r2, r7
 8000a1e:	2707      	movs	r7, #7
 8000a20:	2300      	movs	r3, #0
 8000a22:	4017      	ands	r7, r2
 8000a24:	d009      	beq.n	8000a3a <__aeabi_ddiv+0x5c6>
 8000a26:	210f      	movs	r1, #15
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4011      	ands	r1, r2
 8000a2c:	0014      	movs	r4, r2
 8000a2e:	2904      	cmp	r1, #4
 8000a30:	d195      	bne.n	800095e <__aeabi_ddiv+0x4ea>
 8000a32:	0022      	movs	r2, r4
 8000a34:	075f      	lsls	r7, r3, #29
 8000a36:	025b      	lsls	r3, r3, #9
 8000a38:	0b1b      	lsrs	r3, r3, #12
 8000a3a:	08d2      	lsrs	r2, r2, #3
 8000a3c:	4317      	orrs	r7, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	e5a6      	b.n	8000590 <__aeabi_ddiv+0x11c>
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	4659      	mov	r1, fp
 8000a46:	031b      	lsls	r3, r3, #12
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	031b      	lsls	r3, r3, #12
 8000a4c:	0017      	movs	r7, r2
 8000a4e:	0b1b      	lsrs	r3, r3, #12
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <__aeabi_ddiv+0x5f8>)
 8000a52:	e59d      	b.n	8000590 <__aeabi_ddiv+0x11c>
 8000a54:	42bd      	cmp	r5, r7
 8000a56:	d8b2      	bhi.n	80009be <__aeabi_ddiv+0x54a>
 8000a58:	469b      	mov	fp, r3
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	e6bf      	b.n	80007de <__aeabi_ddiv+0x36a>
 8000a5e:	4580      	cmp	r8, r0
 8000a60:	d3b9      	bcc.n	80009d6 <__aeabi_ddiv+0x562>
 8000a62:	001a      	movs	r2, r3
 8000a64:	e7c3      	b.n	80009ee <__aeabi_ddiv+0x57a>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	000003ff 	.word	0x000003ff
 8000a6c:	000007ff 	.word	0x000007ff
 8000a70:	0000041e 	.word	0x0000041e
 8000a74:	0000043e 	.word	0x0000043e

08000a78 <__aeabi_dmul>:
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	4657      	mov	r7, sl
 8000a7c:	46de      	mov	lr, fp
 8000a7e:	464e      	mov	r6, r9
 8000a80:	4645      	mov	r5, r8
 8000a82:	b5e0      	push	{r5, r6, r7, lr}
 8000a84:	4683      	mov	fp, r0
 8000a86:	0006      	movs	r6, r0
 8000a88:	030f      	lsls	r7, r1, #12
 8000a8a:	0048      	lsls	r0, r1, #1
 8000a8c:	b087      	sub	sp, #28
 8000a8e:	4692      	mov	sl, r2
 8000a90:	001d      	movs	r5, r3
 8000a92:	0b3f      	lsrs	r7, r7, #12
 8000a94:	0d40      	lsrs	r0, r0, #21
 8000a96:	0fcc      	lsrs	r4, r1, #31
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x26>
 8000a9c:	e06f      	b.n	8000b7e <__aeabi_dmul+0x106>
 8000a9e:	4bde      	ldr	r3, [pc, #888]	; (8000e18 <__aeabi_dmul+0x3a0>)
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	d038      	beq.n	8000b16 <__aeabi_dmul+0x9e>
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	00ff      	lsls	r7, r7, #3
 8000aa8:	041b      	lsls	r3, r3, #16
 8000aaa:	431f      	orrs	r7, r3
 8000aac:	0f73      	lsrs	r3, r6, #29
 8000aae:	433b      	orrs	r3, r7
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	4bda      	ldr	r3, [pc, #872]	; (8000e1c <__aeabi_dmul+0x3a4>)
 8000ab4:	2700      	movs	r7, #0
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	469b      	mov	fp, r3
 8000abc:	00f6      	lsls	r6, r6, #3
 8000abe:	4481      	add	r9, r0
 8000ac0:	032b      	lsls	r3, r5, #12
 8000ac2:	0069      	lsls	r1, r5, #1
 8000ac4:	0b1b      	lsrs	r3, r3, #12
 8000ac6:	4652      	mov	r2, sl
 8000ac8:	4698      	mov	r8, r3
 8000aca:	0d49      	lsrs	r1, r1, #21
 8000acc:	0fed      	lsrs	r5, r5, #31
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x5c>
 8000ad2:	e085      	b.n	8000be0 <__aeabi_dmul+0x168>
 8000ad4:	4bd0      	ldr	r3, [pc, #832]	; (8000e18 <__aeabi_dmul+0x3a0>)
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dmul+0x64>
 8000ada:	e073      	b.n	8000bc4 <__aeabi_dmul+0x14c>
 8000adc:	4643      	mov	r3, r8
 8000ade:	00da      	lsls	r2, r3, #3
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	041b      	lsls	r3, r3, #16
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4652      	mov	r2, sl
 8000ae8:	48cc      	ldr	r0, [pc, #816]	; (8000e1c <__aeabi_dmul+0x3a4>)
 8000aea:	0f52      	lsrs	r2, r2, #29
 8000aec:	4684      	mov	ip, r0
 8000aee:	4313      	orrs	r3, r2
 8000af0:	4652      	mov	r2, sl
 8000af2:	2000      	movs	r0, #0
 8000af4:	4461      	add	r1, ip
 8000af6:	00d2      	lsls	r2, r2, #3
 8000af8:	4489      	add	r9, r1
 8000afa:	0021      	movs	r1, r4
 8000afc:	4069      	eors	r1, r5
 8000afe:	9100      	str	r1, [sp, #0]
 8000b00:	468c      	mov	ip, r1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4449      	add	r1, r9
 8000b06:	468a      	mov	sl, r1
 8000b08:	2f0f      	cmp	r7, #15
 8000b0a:	d900      	bls.n	8000b0e <__aeabi_dmul+0x96>
 8000b0c:	e090      	b.n	8000c30 <__aeabi_dmul+0x1b8>
 8000b0e:	49c4      	ldr	r1, [pc, #784]	; (8000e20 <__aeabi_dmul+0x3a8>)
 8000b10:	00bf      	lsls	r7, r7, #2
 8000b12:	59cf      	ldr	r7, [r1, r7]
 8000b14:	46bf      	mov	pc, r7
 8000b16:	465b      	mov	r3, fp
 8000b18:	433b      	orrs	r3, r7
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_dmul+0xa8>
 8000b1e:	e16a      	b.n	8000df6 <__aeabi_dmul+0x37e>
 8000b20:	2302      	movs	r3, #2
 8000b22:	2708      	movs	r7, #8
 8000b24:	2600      	movs	r6, #0
 8000b26:	4681      	mov	r9, r0
 8000b28:	469b      	mov	fp, r3
 8000b2a:	e7c9      	b.n	8000ac0 <__aeabi_dmul+0x48>
 8000b2c:	0032      	movs	r2, r6
 8000b2e:	4658      	mov	r0, fp
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	4661      	mov	r1, ip
 8000b34:	9100      	str	r1, [sp, #0]
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dmul+0xc4>
 8000b3a:	e075      	b.n	8000c28 <__aeabi_dmul+0x1b0>
 8000b3c:	2803      	cmp	r0, #3
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dmul+0xca>
 8000b40:	e1fe      	b.n	8000f40 <__aeabi_dmul+0x4c8>
 8000b42:	2801      	cmp	r0, #1
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dmul+0xd0>
 8000b46:	e12c      	b.n	8000da2 <__aeabi_dmul+0x32a>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	2500      	movs	r5, #0
 8000b50:	033f      	lsls	r7, r7, #12
 8000b52:	0d2a      	lsrs	r2, r5, #20
 8000b54:	0b3f      	lsrs	r7, r7, #12
 8000b56:	48b3      	ldr	r0, [pc, #716]	; (8000e24 <__aeabi_dmul+0x3ac>)
 8000b58:	0512      	lsls	r2, r2, #20
 8000b5a:	433a      	orrs	r2, r7
 8000b5c:	4002      	ands	r2, r0
 8000b5e:	051b      	lsls	r3, r3, #20
 8000b60:	4313      	orrs	r3, r2
 8000b62:	9a00      	ldr	r2, [sp, #0]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	07d1      	lsls	r1, r2, #31
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	0030      	movs	r0, r6
 8000b6e:	0019      	movs	r1, r3
 8000b70:	b007      	add	sp, #28
 8000b72:	bc3c      	pop	{r2, r3, r4, r5}
 8000b74:	4690      	mov	r8, r2
 8000b76:	4699      	mov	r9, r3
 8000b78:	46a2      	mov	sl, r4
 8000b7a:	46ab      	mov	fp, r5
 8000b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7e:	465b      	mov	r3, fp
 8000b80:	433b      	orrs	r3, r7
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dmul+0x110>
 8000b86:	e12f      	b.n	8000de8 <__aeabi_dmul+0x370>
 8000b88:	2f00      	cmp	r7, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dmul+0x116>
 8000b8c:	e1a5      	b.n	8000eda <__aeabi_dmul+0x462>
 8000b8e:	0038      	movs	r0, r7
 8000b90:	f000 fda0 	bl	80016d4 <__clzsi2>
 8000b94:	0003      	movs	r3, r0
 8000b96:	3b0b      	subs	r3, #11
 8000b98:	2b1c      	cmp	r3, #28
 8000b9a:	dd00      	ble.n	8000b9e <__aeabi_dmul+0x126>
 8000b9c:	e196      	b.n	8000ecc <__aeabi_dmul+0x454>
 8000b9e:	221d      	movs	r2, #29
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	465a      	mov	r2, fp
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	40da      	lsrs	r2, r3
 8000ba8:	465e      	mov	r6, fp
 8000baa:	3908      	subs	r1, #8
 8000bac:	408f      	lsls	r7, r1
 8000bae:	0013      	movs	r3, r2
 8000bb0:	408e      	lsls	r6, r1
 8000bb2:	433b      	orrs	r3, r7
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	4b9c      	ldr	r3, [pc, #624]	; (8000e28 <__aeabi_dmul+0x3b0>)
 8000bb8:	2700      	movs	r7, #0
 8000bba:	1a1b      	subs	r3, r3, r0
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	e77d      	b.n	8000ac0 <__aeabi_dmul+0x48>
 8000bc4:	4641      	mov	r1, r8
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	4993      	ldr	r1, [pc, #588]	; (8000e18 <__aeabi_dmul+0x3a0>)
 8000bcc:	468c      	mov	ip, r1
 8000bce:	44e1      	add	r9, ip
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_dmul+0x15e>
 8000bd4:	e11a      	b.n	8000e0c <__aeabi_dmul+0x394>
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	2002      	movs	r0, #2
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e78c      	b.n	8000afa <__aeabi_dmul+0x82>
 8000be0:	4313      	orrs	r3, r2
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dmul+0x16e>
 8000be4:	e10d      	b.n	8000e02 <__aeabi_dmul+0x38a>
 8000be6:	4643      	mov	r3, r8
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_dmul+0x176>
 8000bec:	e181      	b.n	8000ef2 <__aeabi_dmul+0x47a>
 8000bee:	4640      	mov	r0, r8
 8000bf0:	f000 fd70 	bl	80016d4 <__clzsi2>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	3a0b      	subs	r2, #11
 8000bf8:	2a1c      	cmp	r2, #28
 8000bfa:	dd00      	ble.n	8000bfe <__aeabi_dmul+0x186>
 8000bfc:	e172      	b.n	8000ee4 <__aeabi_dmul+0x46c>
 8000bfe:	0001      	movs	r1, r0
 8000c00:	4643      	mov	r3, r8
 8000c02:	3908      	subs	r1, #8
 8000c04:	408b      	lsls	r3, r1
 8000c06:	4698      	mov	r8, r3
 8000c08:	231d      	movs	r3, #29
 8000c0a:	1a9a      	subs	r2, r3, r2
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	001a      	movs	r2, r3
 8000c12:	4643      	mov	r3, r8
 8000c14:	4313      	orrs	r3, r2
 8000c16:	4652      	mov	r2, sl
 8000c18:	408a      	lsls	r2, r1
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	1a08      	subs	r0, r1, r0
 8000c1e:	4982      	ldr	r1, [pc, #520]	; (8000e28 <__aeabi_dmul+0x3b0>)
 8000c20:	4689      	mov	r9, r1
 8000c22:	4481      	add	r9, r0
 8000c24:	2000      	movs	r0, #0
 8000c26:	e768      	b.n	8000afa <__aeabi_dmul+0x82>
 8000c28:	4b7b      	ldr	r3, [pc, #492]	; (8000e18 <__aeabi_dmul+0x3a0>)
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e78e      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000c30:	0c14      	lsrs	r4, r2, #16
 8000c32:	0412      	lsls	r2, r2, #16
 8000c34:	0c12      	lsrs	r2, r2, #16
 8000c36:	0011      	movs	r1, r2
 8000c38:	0c37      	lsrs	r7, r6, #16
 8000c3a:	0436      	lsls	r6, r6, #16
 8000c3c:	0c35      	lsrs	r5, r6, #16
 8000c3e:	4379      	muls	r1, r7
 8000c40:	0028      	movs	r0, r5
 8000c42:	468c      	mov	ip, r1
 8000c44:	002e      	movs	r6, r5
 8000c46:	4360      	muls	r0, r4
 8000c48:	4460      	add	r0, ip
 8000c4a:	4683      	mov	fp, r0
 8000c4c:	4356      	muls	r6, r2
 8000c4e:	0021      	movs	r1, r4
 8000c50:	0c30      	lsrs	r0, r6, #16
 8000c52:	4680      	mov	r8, r0
 8000c54:	4658      	mov	r0, fp
 8000c56:	4379      	muls	r1, r7
 8000c58:	4440      	add	r0, r8
 8000c5a:	9102      	str	r1, [sp, #8]
 8000c5c:	4584      	cmp	ip, r0
 8000c5e:	d906      	bls.n	8000c6e <__aeabi_dmul+0x1f6>
 8000c60:	4688      	mov	r8, r1
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	468c      	mov	ip, r1
 8000c68:	44e0      	add	r8, ip
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	9102      	str	r1, [sp, #8]
 8000c6e:	0436      	lsls	r6, r6, #16
 8000c70:	0c01      	lsrs	r1, r0, #16
 8000c72:	0c36      	lsrs	r6, r6, #16
 8000c74:	0400      	lsls	r0, r0, #16
 8000c76:	468b      	mov	fp, r1
 8000c78:	1981      	adds	r1, r0, r6
 8000c7a:	0c1e      	lsrs	r6, r3, #16
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	9103      	str	r1, [sp, #12]
 8000c82:	0019      	movs	r1, r3
 8000c84:	4379      	muls	r1, r7
 8000c86:	468c      	mov	ip, r1
 8000c88:	0028      	movs	r0, r5
 8000c8a:	4375      	muls	r5, r6
 8000c8c:	4465      	add	r5, ip
 8000c8e:	46a8      	mov	r8, r5
 8000c90:	4358      	muls	r0, r3
 8000c92:	0c05      	lsrs	r5, r0, #16
 8000c94:	4445      	add	r5, r8
 8000c96:	4377      	muls	r7, r6
 8000c98:	42a9      	cmp	r1, r5
 8000c9a:	d903      	bls.n	8000ca4 <__aeabi_dmul+0x22c>
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0249      	lsls	r1, r1, #9
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	4467      	add	r7, ip
 8000ca4:	0c29      	lsrs	r1, r5, #16
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	0039      	movs	r1, r7
 8000caa:	0400      	lsls	r0, r0, #16
 8000cac:	0c00      	lsrs	r0, r0, #16
 8000cae:	042d      	lsls	r5, r5, #16
 8000cb0:	182d      	adds	r5, r5, r0
 8000cb2:	4461      	add	r1, ip
 8000cb4:	44ab      	add	fp, r5
 8000cb6:	9105      	str	r1, [sp, #20]
 8000cb8:	4659      	mov	r1, fp
 8000cba:	9104      	str	r1, [sp, #16]
 8000cbc:	9901      	ldr	r1, [sp, #4]
 8000cbe:	040f      	lsls	r7, r1, #16
 8000cc0:	0c3f      	lsrs	r7, r7, #16
 8000cc2:	0c08      	lsrs	r0, r1, #16
 8000cc4:	0039      	movs	r1, r7
 8000cc6:	4351      	muls	r1, r2
 8000cc8:	4342      	muls	r2, r0
 8000cca:	4690      	mov	r8, r2
 8000ccc:	0002      	movs	r2, r0
 8000cce:	468c      	mov	ip, r1
 8000cd0:	0c09      	lsrs	r1, r1, #16
 8000cd2:	468b      	mov	fp, r1
 8000cd4:	4362      	muls	r2, r4
 8000cd6:	437c      	muls	r4, r7
 8000cd8:	4444      	add	r4, r8
 8000cda:	445c      	add	r4, fp
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d903      	bls.n	8000ce8 <__aeabi_dmul+0x270>
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0249      	lsls	r1, r1, #9
 8000ce4:	4688      	mov	r8, r1
 8000ce6:	4442      	add	r2, r8
 8000ce8:	0c21      	lsrs	r1, r4, #16
 8000cea:	4688      	mov	r8, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	0c09      	lsrs	r1, r1, #16
 8000cf2:	468c      	mov	ip, r1
 8000cf4:	0039      	movs	r1, r7
 8000cf6:	4359      	muls	r1, r3
 8000cf8:	4343      	muls	r3, r0
 8000cfa:	4370      	muls	r0, r6
 8000cfc:	437e      	muls	r6, r7
 8000cfe:	0c0f      	lsrs	r7, r1, #16
 8000d00:	18f6      	adds	r6, r6, r3
 8000d02:	0424      	lsls	r4, r4, #16
 8000d04:	19be      	adds	r6, r7, r6
 8000d06:	4464      	add	r4, ip
 8000d08:	4442      	add	r2, r8
 8000d0a:	468c      	mov	ip, r1
 8000d0c:	42b3      	cmp	r3, r6
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_dmul+0x2a0>
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	4698      	mov	r8, r3
 8000d16:	4440      	add	r0, r8
 8000d18:	9b02      	ldr	r3, [sp, #8]
 8000d1a:	4661      	mov	r1, ip
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	9b04      	ldr	r3, [sp, #16]
 8000d20:	0437      	lsls	r7, r6, #16
 8000d22:	4443      	add	r3, r8
 8000d24:	469b      	mov	fp, r3
 8000d26:	45ab      	cmp	fp, r5
 8000d28:	41ad      	sbcs	r5, r5
 8000d2a:	426b      	negs	r3, r5
 8000d2c:	040d      	lsls	r5, r1, #16
 8000d2e:	9905      	ldr	r1, [sp, #20]
 8000d30:	0c2d      	lsrs	r5, r5, #16
 8000d32:	468c      	mov	ip, r1
 8000d34:	197f      	adds	r7, r7, r5
 8000d36:	4467      	add	r7, ip
 8000d38:	18fd      	adds	r5, r7, r3
 8000d3a:	46a8      	mov	r8, r5
 8000d3c:	465d      	mov	r5, fp
 8000d3e:	192d      	adds	r5, r5, r4
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	41a4      	sbcs	r4, r4
 8000d44:	4693      	mov	fp, r2
 8000d46:	4264      	negs	r4, r4
 8000d48:	46a4      	mov	ip, r4
 8000d4a:	44c3      	add	fp, r8
 8000d4c:	44dc      	add	ip, fp
 8000d4e:	428f      	cmp	r7, r1
 8000d50:	41bf      	sbcs	r7, r7
 8000d52:	4598      	cmp	r8, r3
 8000d54:	419b      	sbcs	r3, r3
 8000d56:	4593      	cmp	fp, r2
 8000d58:	4192      	sbcs	r2, r2
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	41a4      	sbcs	r4, r4
 8000d5e:	425b      	negs	r3, r3
 8000d60:	427f      	negs	r7, r7
 8000d62:	431f      	orrs	r7, r3
 8000d64:	0c36      	lsrs	r6, r6, #16
 8000d66:	4252      	negs	r2, r2
 8000d68:	4264      	negs	r4, r4
 8000d6a:	19bf      	adds	r7, r7, r6
 8000d6c:	4322      	orrs	r2, r4
 8000d6e:	18bf      	adds	r7, r7, r2
 8000d70:	4662      	mov	r2, ip
 8000d72:	1838      	adds	r0, r7, r0
 8000d74:	0243      	lsls	r3, r0, #9
 8000d76:	0dd2      	lsrs	r2, r2, #23
 8000d78:	9903      	ldr	r1, [sp, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	026a      	lsls	r2, r5, #9
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	1e50      	subs	r0, r2, #1
 8000d82:	4182      	sbcs	r2, r0
 8000d84:	4661      	mov	r1, ip
 8000d86:	0ded      	lsrs	r5, r5, #23
 8000d88:	432a      	orrs	r2, r5
 8000d8a:	024e      	lsls	r6, r1, #9
 8000d8c:	4332      	orrs	r2, r6
 8000d8e:	01d9      	lsls	r1, r3, #7
 8000d90:	d400      	bmi.n	8000d94 <__aeabi_dmul+0x31c>
 8000d92:	e0b3      	b.n	8000efc <__aeabi_dmul+0x484>
 8000d94:	2601      	movs	r6, #1
 8000d96:	0850      	lsrs	r0, r2, #1
 8000d98:	4032      	ands	r2, r6
 8000d9a:	4302      	orrs	r2, r0
 8000d9c:	07de      	lsls	r6, r3, #31
 8000d9e:	4332      	orrs	r2, r6
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	4c22      	ldr	r4, [pc, #136]	; (8000e2c <__aeabi_dmul+0x3b4>)
 8000da4:	4454      	add	r4, sl
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	dd62      	ble.n	8000e70 <__aeabi_dmul+0x3f8>
 8000daa:	0751      	lsls	r1, r2, #29
 8000dac:	d009      	beq.n	8000dc2 <__aeabi_dmul+0x34a>
 8000dae:	200f      	movs	r0, #15
 8000db0:	4010      	ands	r0, r2
 8000db2:	2804      	cmp	r0, #4
 8000db4:	d005      	beq.n	8000dc2 <__aeabi_dmul+0x34a>
 8000db6:	1d10      	adds	r0, r2, #4
 8000db8:	4290      	cmp	r0, r2
 8000dba:	4192      	sbcs	r2, r2
 8000dbc:	4252      	negs	r2, r2
 8000dbe:	189b      	adds	r3, r3, r2
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	01d9      	lsls	r1, r3, #7
 8000dc4:	d504      	bpl.n	8000dd0 <__aeabi_dmul+0x358>
 8000dc6:	2480      	movs	r4, #128	; 0x80
 8000dc8:	4819      	ldr	r0, [pc, #100]	; (8000e30 <__aeabi_dmul+0x3b8>)
 8000dca:	00e4      	lsls	r4, r4, #3
 8000dcc:	4003      	ands	r3, r0
 8000dce:	4454      	add	r4, sl
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <__aeabi_dmul+0x3bc>)
 8000dd2:	4284      	cmp	r4, r0
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_dmul+0x360>
 8000dd6:	e727      	b.n	8000c28 <__aeabi_dmul+0x1b0>
 8000dd8:	075e      	lsls	r6, r3, #29
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	08d2      	lsrs	r2, r2, #3
 8000dde:	0b1f      	lsrs	r7, r3, #12
 8000de0:	0563      	lsls	r3, r4, #21
 8000de2:	4316      	orrs	r6, r2
 8000de4:	0d5b      	lsrs	r3, r3, #21
 8000de6:	e6b2      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000de8:	2300      	movs	r3, #0
 8000dea:	4699      	mov	r9, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	2704      	movs	r7, #4
 8000df0:	2600      	movs	r6, #0
 8000df2:	469b      	mov	fp, r3
 8000df4:	e664      	b.n	8000ac0 <__aeabi_dmul+0x48>
 8000df6:	2303      	movs	r3, #3
 8000df8:	9701      	str	r7, [sp, #4]
 8000dfa:	4681      	mov	r9, r0
 8000dfc:	270c      	movs	r7, #12
 8000dfe:	469b      	mov	fp, r3
 8000e00:	e65e      	b.n	8000ac0 <__aeabi_dmul+0x48>
 8000e02:	2201      	movs	r2, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	4317      	orrs	r7, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e676      	b.n	8000afa <__aeabi_dmul+0x82>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	2003      	movs	r0, #3
 8000e10:	431f      	orrs	r7, r3
 8000e12:	4643      	mov	r3, r8
 8000e14:	e671      	b.n	8000afa <__aeabi_dmul+0x82>
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	fffffc01 	.word	0xfffffc01
 8000e20:	08003c44 	.word	0x08003c44
 8000e24:	800fffff 	.word	0x800fffff
 8000e28:	fffffc0d 	.word	0xfffffc0d
 8000e2c:	000003ff 	.word	0x000003ff
 8000e30:	feffffff 	.word	0xfeffffff
 8000e34:	000007fe 	.word	0x000007fe
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2780      	movs	r7, #128	; 0x80
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	033f      	lsls	r7, r7, #12
 8000e40:	2600      	movs	r6, #0
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <__aeabi_dmul+0x4d8>)
 8000e44:	e683      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	0032      	movs	r2, r6
 8000e4a:	46a4      	mov	ip, r4
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	e670      	b.n	8000b32 <__aeabi_dmul+0xba>
 8000e50:	46ac      	mov	ip, r5
 8000e52:	e66e      	b.n	8000b32 <__aeabi_dmul+0xba>
 8000e54:	2780      	movs	r7, #128	; 0x80
 8000e56:	9901      	ldr	r1, [sp, #4]
 8000e58:	033f      	lsls	r7, r7, #12
 8000e5a:	4239      	tst	r1, r7
 8000e5c:	d02d      	beq.n	8000eba <__aeabi_dmul+0x442>
 8000e5e:	423b      	tst	r3, r7
 8000e60:	d12b      	bne.n	8000eba <__aeabi_dmul+0x442>
 8000e62:	431f      	orrs	r7, r3
 8000e64:	033f      	lsls	r7, r7, #12
 8000e66:	0b3f      	lsrs	r7, r7, #12
 8000e68:	9500      	str	r5, [sp, #0]
 8000e6a:	0016      	movs	r6, r2
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <__aeabi_dmul+0x4d8>)
 8000e6e:	e66e      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000e70:	2501      	movs	r5, #1
 8000e72:	1b2d      	subs	r5, r5, r4
 8000e74:	2d38      	cmp	r5, #56	; 0x38
 8000e76:	dd00      	ble.n	8000e7a <__aeabi_dmul+0x402>
 8000e78:	e666      	b.n	8000b48 <__aeabi_dmul+0xd0>
 8000e7a:	2d1f      	cmp	r5, #31
 8000e7c:	dc40      	bgt.n	8000f00 <__aeabi_dmul+0x488>
 8000e7e:	4835      	ldr	r0, [pc, #212]	; (8000f54 <__aeabi_dmul+0x4dc>)
 8000e80:	001c      	movs	r4, r3
 8000e82:	4450      	add	r0, sl
 8000e84:	0016      	movs	r6, r2
 8000e86:	4082      	lsls	r2, r0
 8000e88:	4084      	lsls	r4, r0
 8000e8a:	40ee      	lsrs	r6, r5
 8000e8c:	1e50      	subs	r0, r2, #1
 8000e8e:	4182      	sbcs	r2, r0
 8000e90:	4334      	orrs	r4, r6
 8000e92:	4314      	orrs	r4, r2
 8000e94:	40eb      	lsrs	r3, r5
 8000e96:	0762      	lsls	r2, r4, #29
 8000e98:	d009      	beq.n	8000eae <__aeabi_dmul+0x436>
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	4022      	ands	r2, r4
 8000e9e:	2a04      	cmp	r2, #4
 8000ea0:	d005      	beq.n	8000eae <__aeabi_dmul+0x436>
 8000ea2:	0022      	movs	r2, r4
 8000ea4:	1d14      	adds	r4, r2, #4
 8000ea6:	4294      	cmp	r4, r2
 8000ea8:	4180      	sbcs	r0, r0
 8000eaa:	4240      	negs	r0, r0
 8000eac:	181b      	adds	r3, r3, r0
 8000eae:	021a      	lsls	r2, r3, #8
 8000eb0:	d53e      	bpl.n	8000f30 <__aeabi_dmul+0x4b8>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	e649      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000eba:	2780      	movs	r7, #128	; 0x80
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	033f      	lsls	r7, r7, #12
 8000ec0:	431f      	orrs	r7, r3
 8000ec2:	033f      	lsls	r7, r7, #12
 8000ec4:	0b3f      	lsrs	r7, r7, #12
 8000ec6:	9400      	str	r4, [sp, #0]
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <__aeabi_dmul+0x4d8>)
 8000eca:	e640      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	465a      	mov	r2, fp
 8000ed0:	3b28      	subs	r3, #40	; 0x28
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	2600      	movs	r6, #0
 8000ed6:	9201      	str	r2, [sp, #4]
 8000ed8:	e66d      	b.n	8000bb6 <__aeabi_dmul+0x13e>
 8000eda:	4658      	mov	r0, fp
 8000edc:	f000 fbfa 	bl	80016d4 <__clzsi2>
 8000ee0:	3020      	adds	r0, #32
 8000ee2:	e657      	b.n	8000b94 <__aeabi_dmul+0x11c>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	4652      	mov	r2, sl
 8000ee8:	3b28      	subs	r3, #40	; 0x28
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	e693      	b.n	8000c1a <__aeabi_dmul+0x1a2>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	f000 fbee 	bl	80016d4 <__clzsi2>
 8000ef8:	3020      	adds	r0, #32
 8000efa:	e67b      	b.n	8000bf4 <__aeabi_dmul+0x17c>
 8000efc:	46ca      	mov	sl, r9
 8000efe:	e750      	b.n	8000da2 <__aeabi_dmul+0x32a>
 8000f00:	201f      	movs	r0, #31
 8000f02:	001e      	movs	r6, r3
 8000f04:	4240      	negs	r0, r0
 8000f06:	1b04      	subs	r4, r0, r4
 8000f08:	40e6      	lsrs	r6, r4
 8000f0a:	2d20      	cmp	r5, #32
 8000f0c:	d003      	beq.n	8000f16 <__aeabi_dmul+0x49e>
 8000f0e:	4c12      	ldr	r4, [pc, #72]	; (8000f58 <__aeabi_dmul+0x4e0>)
 8000f10:	4454      	add	r4, sl
 8000f12:	40a3      	lsls	r3, r4
 8000f14:	431a      	orrs	r2, r3
 8000f16:	1e50      	subs	r0, r2, #1
 8000f18:	4182      	sbcs	r2, r0
 8000f1a:	4332      	orrs	r2, r6
 8000f1c:	2607      	movs	r6, #7
 8000f1e:	2700      	movs	r7, #0
 8000f20:	4016      	ands	r6, r2
 8000f22:	d009      	beq.n	8000f38 <__aeabi_dmul+0x4c0>
 8000f24:	200f      	movs	r0, #15
 8000f26:	2300      	movs	r3, #0
 8000f28:	4010      	ands	r0, r2
 8000f2a:	0014      	movs	r4, r2
 8000f2c:	2804      	cmp	r0, #4
 8000f2e:	d1b9      	bne.n	8000ea4 <__aeabi_dmul+0x42c>
 8000f30:	0022      	movs	r2, r4
 8000f32:	075e      	lsls	r6, r3, #29
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	0b1f      	lsrs	r7, r3, #12
 8000f38:	08d2      	lsrs	r2, r2, #3
 8000f3a:	4316      	orrs	r6, r2
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e606      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000f40:	2780      	movs	r7, #128	; 0x80
 8000f42:	033f      	lsls	r7, r7, #12
 8000f44:	431f      	orrs	r7, r3
 8000f46:	033f      	lsls	r7, r7, #12
 8000f48:	0b3f      	lsrs	r7, r7, #12
 8000f4a:	0016      	movs	r6, r2
 8000f4c:	4b00      	ldr	r3, [pc, #0]	; (8000f50 <__aeabi_dmul+0x4d8>)
 8000f4e:	e5fe      	b.n	8000b4e <__aeabi_dmul+0xd6>
 8000f50:	000007ff 	.word	0x000007ff
 8000f54:	0000041e 	.word	0x0000041e
 8000f58:	0000043e 	.word	0x0000043e

08000f5c <__aeabi_dsub>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	4657      	mov	r7, sl
 8000f60:	464e      	mov	r6, r9
 8000f62:	4645      	mov	r5, r8
 8000f64:	46de      	mov	lr, fp
 8000f66:	000c      	movs	r4, r1
 8000f68:	0309      	lsls	r1, r1, #12
 8000f6a:	b5e0      	push	{r5, r6, r7, lr}
 8000f6c:	0a49      	lsrs	r1, r1, #9
 8000f6e:	0f46      	lsrs	r6, r0, #29
 8000f70:	005f      	lsls	r7, r3, #1
 8000f72:	4331      	orrs	r1, r6
 8000f74:	031e      	lsls	r6, r3, #12
 8000f76:	0fdb      	lsrs	r3, r3, #31
 8000f78:	0a76      	lsrs	r6, r6, #9
 8000f7a:	469b      	mov	fp, r3
 8000f7c:	0f53      	lsrs	r3, r2, #29
 8000f7e:	4333      	orrs	r3, r6
 8000f80:	4ec8      	ldr	r6, [pc, #800]	; (80012a4 <__aeabi_dsub+0x348>)
 8000f82:	0065      	lsls	r5, r4, #1
 8000f84:	00c0      	lsls	r0, r0, #3
 8000f86:	0fe4      	lsrs	r4, r4, #31
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	0d6d      	lsrs	r5, r5, #21
 8000f8c:	46a2      	mov	sl, r4
 8000f8e:	4681      	mov	r9, r0
 8000f90:	0d7f      	lsrs	r7, r7, #21
 8000f92:	469c      	mov	ip, r3
 8000f94:	4690      	mov	r8, r2
 8000f96:	42b7      	cmp	r7, r6
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dsub+0x40>
 8000f9a:	e0b9      	b.n	8001110 <__aeabi_dsub+0x1b4>
 8000f9c:	465b      	mov	r3, fp
 8000f9e:	2601      	movs	r6, #1
 8000fa0:	4073      	eors	r3, r6
 8000fa2:	469b      	mov	fp, r3
 8000fa4:	1bee      	subs	r6, r5, r7
 8000fa6:	45a3      	cmp	fp, r4
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dsub+0x50>
 8000faa:	e083      	b.n	80010b4 <__aeabi_dsub+0x158>
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	dd63      	ble.n	8001078 <__aeabi_dsub+0x11c>
 8000fb0:	2f00      	cmp	r7, #0
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_dsub+0x5a>
 8000fb4:	e0b1      	b.n	800111a <__aeabi_dsub+0x1be>
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dsub+0x62>
 8000fbc:	e123      	b.n	8001206 <__aeabi_dsub+0x2aa>
 8000fbe:	1e73      	subs	r3, r6, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dsub+0x6a>
 8000fc4:	e1ba      	b.n	800133c <__aeabi_dsub+0x3e0>
 8000fc6:	1a86      	subs	r6, r0, r2
 8000fc8:	4663      	mov	r3, ip
 8000fca:	42b0      	cmp	r0, r6
 8000fcc:	4180      	sbcs	r0, r0
 8000fce:	2501      	movs	r5, #1
 8000fd0:	1ac9      	subs	r1, r1, r3
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	1a09      	subs	r1, r1, r0
 8000fd6:	020b      	lsls	r3, r1, #8
 8000fd8:	d400      	bmi.n	8000fdc <__aeabi_dsub+0x80>
 8000fda:	e147      	b.n	800126c <__aeabi_dsub+0x310>
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	0a4b      	lsrs	r3, r1, #9
 8000fe0:	4698      	mov	r8, r3
 8000fe2:	4643      	mov	r3, r8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dsub+0x8e>
 8000fe8:	e189      	b.n	80012fe <__aeabi_dsub+0x3a2>
 8000fea:	4640      	mov	r0, r8
 8000fec:	f000 fb72 	bl	80016d4 <__clzsi2>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	2b1f      	cmp	r3, #31
 8000ff6:	dd00      	ble.n	8000ffa <__aeabi_dsub+0x9e>
 8000ff8:	e17c      	b.n	80012f4 <__aeabi_dsub+0x398>
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	0030      	movs	r0, r6
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	4641      	mov	r1, r8
 8001002:	40d0      	lsrs	r0, r2
 8001004:	4099      	lsls	r1, r3
 8001006:	0002      	movs	r2, r0
 8001008:	409e      	lsls	r6, r3
 800100a:	430a      	orrs	r2, r1
 800100c:	429d      	cmp	r5, r3
 800100e:	dd00      	ble.n	8001012 <__aeabi_dsub+0xb6>
 8001010:	e16a      	b.n	80012e8 <__aeabi_dsub+0x38c>
 8001012:	1b5d      	subs	r5, r3, r5
 8001014:	1c6b      	adds	r3, r5, #1
 8001016:	2b1f      	cmp	r3, #31
 8001018:	dd00      	ble.n	800101c <__aeabi_dsub+0xc0>
 800101a:	e194      	b.n	8001346 <__aeabi_dsub+0x3ea>
 800101c:	2120      	movs	r1, #32
 800101e:	0010      	movs	r0, r2
 8001020:	0035      	movs	r5, r6
 8001022:	1ac9      	subs	r1, r1, r3
 8001024:	408e      	lsls	r6, r1
 8001026:	40da      	lsrs	r2, r3
 8001028:	4088      	lsls	r0, r1
 800102a:	40dd      	lsrs	r5, r3
 800102c:	1e71      	subs	r1, r6, #1
 800102e:	418e      	sbcs	r6, r1
 8001030:	0011      	movs	r1, r2
 8001032:	2207      	movs	r2, #7
 8001034:	4328      	orrs	r0, r5
 8001036:	2500      	movs	r5, #0
 8001038:	4306      	orrs	r6, r0
 800103a:	4032      	ands	r2, r6
 800103c:	2a00      	cmp	r2, #0
 800103e:	d009      	beq.n	8001054 <__aeabi_dsub+0xf8>
 8001040:	230f      	movs	r3, #15
 8001042:	4033      	ands	r3, r6
 8001044:	2b04      	cmp	r3, #4
 8001046:	d005      	beq.n	8001054 <__aeabi_dsub+0xf8>
 8001048:	1d33      	adds	r3, r6, #4
 800104a:	42b3      	cmp	r3, r6
 800104c:	41b6      	sbcs	r6, r6
 800104e:	4276      	negs	r6, r6
 8001050:	1989      	adds	r1, r1, r6
 8001052:	001e      	movs	r6, r3
 8001054:	020b      	lsls	r3, r1, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_dsub+0xfe>
 8001058:	e23d      	b.n	80014d6 <__aeabi_dsub+0x57a>
 800105a:	1c6a      	adds	r2, r5, #1
 800105c:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <__aeabi_dsub+0x348>)
 800105e:	0555      	lsls	r5, r2, #21
 8001060:	0d6d      	lsrs	r5, r5, #21
 8001062:	429a      	cmp	r2, r3
 8001064:	d100      	bne.n	8001068 <__aeabi_dsub+0x10c>
 8001066:	e119      	b.n	800129c <__aeabi_dsub+0x340>
 8001068:	4a8f      	ldr	r2, [pc, #572]	; (80012a8 <__aeabi_dsub+0x34c>)
 800106a:	08f6      	lsrs	r6, r6, #3
 800106c:	400a      	ands	r2, r1
 800106e:	0757      	lsls	r7, r2, #29
 8001070:	0252      	lsls	r2, r2, #9
 8001072:	4337      	orrs	r7, r6
 8001074:	0b12      	lsrs	r2, r2, #12
 8001076:	e09b      	b.n	80011b0 <__aeabi_dsub+0x254>
 8001078:	2e00      	cmp	r6, #0
 800107a:	d000      	beq.n	800107e <__aeabi_dsub+0x122>
 800107c:	e0c5      	b.n	800120a <__aeabi_dsub+0x2ae>
 800107e:	1c6e      	adds	r6, r5, #1
 8001080:	0576      	lsls	r6, r6, #21
 8001082:	0d76      	lsrs	r6, r6, #21
 8001084:	2e01      	cmp	r6, #1
 8001086:	dc00      	bgt.n	800108a <__aeabi_dsub+0x12e>
 8001088:	e148      	b.n	800131c <__aeabi_dsub+0x3c0>
 800108a:	4667      	mov	r7, ip
 800108c:	1a86      	subs	r6, r0, r2
 800108e:	1bcb      	subs	r3, r1, r7
 8001090:	42b0      	cmp	r0, r6
 8001092:	41bf      	sbcs	r7, r7
 8001094:	427f      	negs	r7, r7
 8001096:	46b8      	mov	r8, r7
 8001098:	001f      	movs	r7, r3
 800109a:	4643      	mov	r3, r8
 800109c:	1aff      	subs	r7, r7, r3
 800109e:	003b      	movs	r3, r7
 80010a0:	46b8      	mov	r8, r7
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	d500      	bpl.n	80010a8 <__aeabi_dsub+0x14c>
 80010a6:	e15f      	b.n	8001368 <__aeabi_dsub+0x40c>
 80010a8:	4337      	orrs	r7, r6
 80010aa:	d19a      	bne.n	8000fe2 <__aeabi_dsub+0x86>
 80010ac:	2200      	movs	r2, #0
 80010ae:	2400      	movs	r4, #0
 80010b0:	2500      	movs	r5, #0
 80010b2:	e079      	b.n	80011a8 <__aeabi_dsub+0x24c>
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dsub+0x15e>
 80010b8:	e0fa      	b.n	80012b0 <__aeabi_dsub+0x354>
 80010ba:	2f00      	cmp	r7, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x164>
 80010be:	e08d      	b.n	80011dc <__aeabi_dsub+0x280>
 80010c0:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <__aeabi_dsub+0x348>)
 80010c2:	429d      	cmp	r5, r3
 80010c4:	d067      	beq.n	8001196 <__aeabi_dsub+0x23a>
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	4667      	mov	r7, ip
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	431f      	orrs	r7, r3
 80010ce:	46bc      	mov	ip, r7
 80010d0:	2e38      	cmp	r6, #56	; 0x38
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_dsub+0x17a>
 80010d4:	e152      	b.n	800137c <__aeabi_dsub+0x420>
 80010d6:	4663      	mov	r3, ip
 80010d8:	4313      	orrs	r3, r2
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	4193      	sbcs	r3, r2
 80010de:	181e      	adds	r6, r3, r0
 80010e0:	4286      	cmp	r6, r0
 80010e2:	4180      	sbcs	r0, r0
 80010e4:	4240      	negs	r0, r0
 80010e6:	1809      	adds	r1, r1, r0
 80010e8:	020b      	lsls	r3, r1, #8
 80010ea:	d400      	bmi.n	80010ee <__aeabi_dsub+0x192>
 80010ec:	e0be      	b.n	800126c <__aeabi_dsub+0x310>
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <__aeabi_dsub+0x348>)
 80010f0:	3501      	adds	r5, #1
 80010f2:	429d      	cmp	r5, r3
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dsub+0x19c>
 80010f6:	e0d2      	b.n	800129e <__aeabi_dsub+0x342>
 80010f8:	4a6b      	ldr	r2, [pc, #428]	; (80012a8 <__aeabi_dsub+0x34c>)
 80010fa:	0873      	lsrs	r3, r6, #1
 80010fc:	400a      	ands	r2, r1
 80010fe:	2101      	movs	r1, #1
 8001100:	400e      	ands	r6, r1
 8001102:	431e      	orrs	r6, r3
 8001104:	0851      	lsrs	r1, r2, #1
 8001106:	07d3      	lsls	r3, r2, #31
 8001108:	2207      	movs	r2, #7
 800110a:	431e      	orrs	r6, r3
 800110c:	4032      	ands	r2, r6
 800110e:	e795      	b.n	800103c <__aeabi_dsub+0xe0>
 8001110:	001e      	movs	r6, r3
 8001112:	4316      	orrs	r6, r2
 8001114:	d000      	beq.n	8001118 <__aeabi_dsub+0x1bc>
 8001116:	e745      	b.n	8000fa4 <__aeabi_dsub+0x48>
 8001118:	e740      	b.n	8000f9c <__aeabi_dsub+0x40>
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <__aeabi_dsub+0x348>)
 800111c:	429d      	cmp	r5, r3
 800111e:	d03a      	beq.n	8001196 <__aeabi_dsub+0x23a>
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	4667      	mov	r7, ip
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	431f      	orrs	r7, r3
 8001128:	46bc      	mov	ip, r7
 800112a:	2e38      	cmp	r6, #56	; 0x38
 800112c:	dd00      	ble.n	8001130 <__aeabi_dsub+0x1d4>
 800112e:	e0eb      	b.n	8001308 <__aeabi_dsub+0x3ac>
 8001130:	2e1f      	cmp	r6, #31
 8001132:	dc00      	bgt.n	8001136 <__aeabi_dsub+0x1da>
 8001134:	e13a      	b.n	80013ac <__aeabi_dsub+0x450>
 8001136:	0033      	movs	r3, r6
 8001138:	4667      	mov	r7, ip
 800113a:	3b20      	subs	r3, #32
 800113c:	40df      	lsrs	r7, r3
 800113e:	003b      	movs	r3, r7
 8001140:	2e20      	cmp	r6, #32
 8001142:	d005      	beq.n	8001150 <__aeabi_dsub+0x1f4>
 8001144:	2740      	movs	r7, #64	; 0x40
 8001146:	1bbf      	subs	r7, r7, r6
 8001148:	4666      	mov	r6, ip
 800114a:	40be      	lsls	r6, r7
 800114c:	4332      	orrs	r2, r6
 800114e:	4690      	mov	r8, r2
 8001150:	4646      	mov	r6, r8
 8001152:	1e72      	subs	r2, r6, #1
 8001154:	4196      	sbcs	r6, r2
 8001156:	4333      	orrs	r3, r6
 8001158:	e0da      	b.n	8001310 <__aeabi_dsub+0x3b4>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_dsub+0x204>
 800115e:	e214      	b.n	800158a <__aeabi_dsub+0x62e>
 8001160:	4663      	mov	r3, ip
 8001162:	4313      	orrs	r3, r2
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x20c>
 8001166:	e168      	b.n	800143a <__aeabi_dsub+0x4de>
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	074e      	lsls	r6, r1, #29
 800116c:	08c0      	lsrs	r0, r0, #3
 800116e:	08c9      	lsrs	r1, r1, #3
 8001170:	031b      	lsls	r3, r3, #12
 8001172:	4306      	orrs	r6, r0
 8001174:	4219      	tst	r1, r3
 8001176:	d008      	beq.n	800118a <__aeabi_dsub+0x22e>
 8001178:	4660      	mov	r0, ip
 800117a:	08c0      	lsrs	r0, r0, #3
 800117c:	4218      	tst	r0, r3
 800117e:	d104      	bne.n	800118a <__aeabi_dsub+0x22e>
 8001180:	4663      	mov	r3, ip
 8001182:	0001      	movs	r1, r0
 8001184:	08d2      	lsrs	r2, r2, #3
 8001186:	075e      	lsls	r6, r3, #29
 8001188:	4316      	orrs	r6, r2
 800118a:	00f3      	lsls	r3, r6, #3
 800118c:	4699      	mov	r9, r3
 800118e:	00c9      	lsls	r1, r1, #3
 8001190:	0f72      	lsrs	r2, r6, #29
 8001192:	4d44      	ldr	r5, [pc, #272]	; (80012a4 <__aeabi_dsub+0x348>)
 8001194:	4311      	orrs	r1, r2
 8001196:	464b      	mov	r3, r9
 8001198:	08de      	lsrs	r6, r3, #3
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <__aeabi_dsub+0x348>)
 800119c:	074f      	lsls	r7, r1, #29
 800119e:	4337      	orrs	r7, r6
 80011a0:	08ca      	lsrs	r2, r1, #3
 80011a2:	429d      	cmp	r5, r3
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x24c>
 80011a6:	e06e      	b.n	8001286 <__aeabi_dsub+0x32a>
 80011a8:	0312      	lsls	r2, r2, #12
 80011aa:	056d      	lsls	r5, r5, #21
 80011ac:	0b12      	lsrs	r2, r2, #12
 80011ae:	0d6d      	lsrs	r5, r5, #21
 80011b0:	2100      	movs	r1, #0
 80011b2:	0312      	lsls	r2, r2, #12
 80011b4:	0b13      	lsrs	r3, r2, #12
 80011b6:	0d0a      	lsrs	r2, r1, #20
 80011b8:	0512      	lsls	r2, r2, #20
 80011ba:	431a      	orrs	r2, r3
 80011bc:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <__aeabi_dsub+0x350>)
 80011be:	052d      	lsls	r5, r5, #20
 80011c0:	4013      	ands	r3, r2
 80011c2:	432b      	orrs	r3, r5
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	07e4      	lsls	r4, r4, #31
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	4323      	orrs	r3, r4
 80011cc:	0038      	movs	r0, r7
 80011ce:	0019      	movs	r1, r3
 80011d0:	bc3c      	pop	{r2, r3, r4, r5}
 80011d2:	4690      	mov	r8, r2
 80011d4:	4699      	mov	r9, r3
 80011d6:	46a2      	mov	sl, r4
 80011d8:	46ab      	mov	fp, r5
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011dc:	4663      	mov	r3, ip
 80011de:	4313      	orrs	r3, r2
 80011e0:	d011      	beq.n	8001206 <__aeabi_dsub+0x2aa>
 80011e2:	1e73      	subs	r3, r6, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d000      	beq.n	80011ea <__aeabi_dsub+0x28e>
 80011e8:	e107      	b.n	80013fa <__aeabi_dsub+0x49e>
 80011ea:	1886      	adds	r6, r0, r2
 80011ec:	4286      	cmp	r6, r0
 80011ee:	4180      	sbcs	r0, r0
 80011f0:	4461      	add	r1, ip
 80011f2:	4240      	negs	r0, r0
 80011f4:	1809      	adds	r1, r1, r0
 80011f6:	2501      	movs	r5, #1
 80011f8:	020b      	lsls	r3, r1, #8
 80011fa:	d537      	bpl.n	800126c <__aeabi_dsub+0x310>
 80011fc:	2502      	movs	r5, #2
 80011fe:	e77b      	b.n	80010f8 <__aeabi_dsub+0x19c>
 8001200:	003e      	movs	r6, r7
 8001202:	4661      	mov	r1, ip
 8001204:	4691      	mov	r9, r2
 8001206:	0035      	movs	r5, r6
 8001208:	e7c5      	b.n	8001196 <__aeabi_dsub+0x23a>
 800120a:	465c      	mov	r4, fp
 800120c:	2d00      	cmp	r5, #0
 800120e:	d000      	beq.n	8001212 <__aeabi_dsub+0x2b6>
 8001210:	e0e1      	b.n	80013d6 <__aeabi_dsub+0x47a>
 8001212:	000b      	movs	r3, r1
 8001214:	4303      	orrs	r3, r0
 8001216:	d0f3      	beq.n	8001200 <__aeabi_dsub+0x2a4>
 8001218:	1c73      	adds	r3, r6, #1
 800121a:	d100      	bne.n	800121e <__aeabi_dsub+0x2c2>
 800121c:	e1ac      	b.n	8001578 <__aeabi_dsub+0x61c>
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <__aeabi_dsub+0x348>)
 8001220:	429f      	cmp	r7, r3
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x2ca>
 8001224:	e13a      	b.n	800149c <__aeabi_dsub+0x540>
 8001226:	43f3      	mvns	r3, r6
 8001228:	2b38      	cmp	r3, #56	; 0x38
 800122a:	dd00      	ble.n	800122e <__aeabi_dsub+0x2d2>
 800122c:	e16f      	b.n	800150e <__aeabi_dsub+0x5b2>
 800122e:	2b1f      	cmp	r3, #31
 8001230:	dd00      	ble.n	8001234 <__aeabi_dsub+0x2d8>
 8001232:	e18c      	b.n	800154e <__aeabi_dsub+0x5f2>
 8001234:	2520      	movs	r5, #32
 8001236:	000e      	movs	r6, r1
 8001238:	1aed      	subs	r5, r5, r3
 800123a:	40ae      	lsls	r6, r5
 800123c:	46b0      	mov	r8, r6
 800123e:	0006      	movs	r6, r0
 8001240:	46aa      	mov	sl, r5
 8001242:	40de      	lsrs	r6, r3
 8001244:	4645      	mov	r5, r8
 8001246:	4335      	orrs	r5, r6
 8001248:	002e      	movs	r6, r5
 800124a:	4655      	mov	r5, sl
 800124c:	40d9      	lsrs	r1, r3
 800124e:	40a8      	lsls	r0, r5
 8001250:	4663      	mov	r3, ip
 8001252:	1e45      	subs	r5, r0, #1
 8001254:	41a8      	sbcs	r0, r5
 8001256:	1a5b      	subs	r3, r3, r1
 8001258:	469c      	mov	ip, r3
 800125a:	4330      	orrs	r0, r6
 800125c:	1a16      	subs	r6, r2, r0
 800125e:	42b2      	cmp	r2, r6
 8001260:	4192      	sbcs	r2, r2
 8001262:	4663      	mov	r3, ip
 8001264:	4252      	negs	r2, r2
 8001266:	1a99      	subs	r1, r3, r2
 8001268:	003d      	movs	r5, r7
 800126a:	e6b4      	b.n	8000fd6 <__aeabi_dsub+0x7a>
 800126c:	2207      	movs	r2, #7
 800126e:	4032      	ands	r2, r6
 8001270:	2a00      	cmp	r2, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x31a>
 8001274:	e6e4      	b.n	8001040 <__aeabi_dsub+0xe4>
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <__aeabi_dsub+0x348>)
 8001278:	08f6      	lsrs	r6, r6, #3
 800127a:	074f      	lsls	r7, r1, #29
 800127c:	4337      	orrs	r7, r6
 800127e:	08ca      	lsrs	r2, r1, #3
 8001280:	429d      	cmp	r5, r3
 8001282:	d000      	beq.n	8001286 <__aeabi_dsub+0x32a>
 8001284:	e790      	b.n	80011a8 <__aeabi_dsub+0x24c>
 8001286:	003b      	movs	r3, r7
 8001288:	4313      	orrs	r3, r2
 800128a:	d100      	bne.n	800128e <__aeabi_dsub+0x332>
 800128c:	e1a6      	b.n	80015dc <__aeabi_dsub+0x680>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	031b      	lsls	r3, r3, #12
 8001292:	431a      	orrs	r2, r3
 8001294:	0312      	lsls	r2, r2, #12
 8001296:	0b12      	lsrs	r2, r2, #12
 8001298:	4d02      	ldr	r5, [pc, #8]	; (80012a4 <__aeabi_dsub+0x348>)
 800129a:	e789      	b.n	80011b0 <__aeabi_dsub+0x254>
 800129c:	0015      	movs	r5, r2
 800129e:	2200      	movs	r2, #0
 80012a0:	2700      	movs	r7, #0
 80012a2:	e785      	b.n	80011b0 <__aeabi_dsub+0x254>
 80012a4:	000007ff 	.word	0x000007ff
 80012a8:	ff7fffff 	.word	0xff7fffff
 80012ac:	800fffff 	.word	0x800fffff
 80012b0:	2e00      	cmp	r6, #0
 80012b2:	d000      	beq.n	80012b6 <__aeabi_dsub+0x35a>
 80012b4:	e0c7      	b.n	8001446 <__aeabi_dsub+0x4ea>
 80012b6:	1c6b      	adds	r3, r5, #1
 80012b8:	055e      	lsls	r6, r3, #21
 80012ba:	0d76      	lsrs	r6, r6, #21
 80012bc:	2e01      	cmp	r6, #1
 80012be:	dc00      	bgt.n	80012c2 <__aeabi_dsub+0x366>
 80012c0:	e0f0      	b.n	80014a4 <__aeabi_dsub+0x548>
 80012c2:	4dc8      	ldr	r5, [pc, #800]	; (80015e4 <__aeabi_dsub+0x688>)
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x36e>
 80012c8:	e0b9      	b.n	800143e <__aeabi_dsub+0x4e2>
 80012ca:	1885      	adds	r5, r0, r2
 80012cc:	000a      	movs	r2, r1
 80012ce:	4285      	cmp	r5, r0
 80012d0:	4189      	sbcs	r1, r1
 80012d2:	4462      	add	r2, ip
 80012d4:	4249      	negs	r1, r1
 80012d6:	1851      	adds	r1, r2, r1
 80012d8:	2207      	movs	r2, #7
 80012da:	07ce      	lsls	r6, r1, #31
 80012dc:	086d      	lsrs	r5, r5, #1
 80012de:	432e      	orrs	r6, r5
 80012e0:	0849      	lsrs	r1, r1, #1
 80012e2:	4032      	ands	r2, r6
 80012e4:	001d      	movs	r5, r3
 80012e6:	e6a9      	b.n	800103c <__aeabi_dsub+0xe0>
 80012e8:	49bf      	ldr	r1, [pc, #764]	; (80015e8 <__aeabi_dsub+0x68c>)
 80012ea:	1aed      	subs	r5, r5, r3
 80012ec:	4011      	ands	r1, r2
 80012ee:	2207      	movs	r2, #7
 80012f0:	4032      	ands	r2, r6
 80012f2:	e6a3      	b.n	800103c <__aeabi_dsub+0xe0>
 80012f4:	0032      	movs	r2, r6
 80012f6:	3828      	subs	r0, #40	; 0x28
 80012f8:	4082      	lsls	r2, r0
 80012fa:	2600      	movs	r6, #0
 80012fc:	e686      	b.n	800100c <__aeabi_dsub+0xb0>
 80012fe:	0030      	movs	r0, r6
 8001300:	f000 f9e8 	bl	80016d4 <__clzsi2>
 8001304:	3020      	adds	r0, #32
 8001306:	e673      	b.n	8000ff0 <__aeabi_dsub+0x94>
 8001308:	4663      	mov	r3, ip
 800130a:	4313      	orrs	r3, r2
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	4193      	sbcs	r3, r2
 8001310:	1ac6      	subs	r6, r0, r3
 8001312:	42b0      	cmp	r0, r6
 8001314:	4180      	sbcs	r0, r0
 8001316:	4240      	negs	r0, r0
 8001318:	1a09      	subs	r1, r1, r0
 800131a:	e65c      	b.n	8000fd6 <__aeabi_dsub+0x7a>
 800131c:	000e      	movs	r6, r1
 800131e:	4667      	mov	r7, ip
 8001320:	4306      	orrs	r6, r0
 8001322:	4317      	orrs	r7, r2
 8001324:	2d00      	cmp	r5, #0
 8001326:	d15e      	bne.n	80013e6 <__aeabi_dsub+0x48a>
 8001328:	2e00      	cmp	r6, #0
 800132a:	d000      	beq.n	800132e <__aeabi_dsub+0x3d2>
 800132c:	e0f3      	b.n	8001516 <__aeabi_dsub+0x5ba>
 800132e:	2f00      	cmp	r7, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_dsub+0x3d8>
 8001332:	e11e      	b.n	8001572 <__aeabi_dsub+0x616>
 8001334:	465c      	mov	r4, fp
 8001336:	4661      	mov	r1, ip
 8001338:	4691      	mov	r9, r2
 800133a:	e72c      	b.n	8001196 <__aeabi_dsub+0x23a>
 800133c:	4fa9      	ldr	r7, [pc, #676]	; (80015e4 <__aeabi_dsub+0x688>)
 800133e:	42be      	cmp	r6, r7
 8001340:	d07b      	beq.n	800143a <__aeabi_dsub+0x4de>
 8001342:	001e      	movs	r6, r3
 8001344:	e6f1      	b.n	800112a <__aeabi_dsub+0x1ce>
 8001346:	0010      	movs	r0, r2
 8001348:	3d1f      	subs	r5, #31
 800134a:	40e8      	lsrs	r0, r5
 800134c:	2b20      	cmp	r3, #32
 800134e:	d003      	beq.n	8001358 <__aeabi_dsub+0x3fc>
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	409a      	lsls	r2, r3
 8001356:	4316      	orrs	r6, r2
 8001358:	1e73      	subs	r3, r6, #1
 800135a:	419e      	sbcs	r6, r3
 800135c:	2207      	movs	r2, #7
 800135e:	4306      	orrs	r6, r0
 8001360:	4032      	ands	r2, r6
 8001362:	2100      	movs	r1, #0
 8001364:	2500      	movs	r5, #0
 8001366:	e783      	b.n	8001270 <__aeabi_dsub+0x314>
 8001368:	1a16      	subs	r6, r2, r0
 800136a:	4663      	mov	r3, ip
 800136c:	42b2      	cmp	r2, r6
 800136e:	4180      	sbcs	r0, r0
 8001370:	1a59      	subs	r1, r3, r1
 8001372:	4240      	negs	r0, r0
 8001374:	1a0b      	subs	r3, r1, r0
 8001376:	4698      	mov	r8, r3
 8001378:	465c      	mov	r4, fp
 800137a:	e632      	b.n	8000fe2 <__aeabi_dsub+0x86>
 800137c:	2e1f      	cmp	r6, #31
 800137e:	dd00      	ble.n	8001382 <__aeabi_dsub+0x426>
 8001380:	e0ab      	b.n	80014da <__aeabi_dsub+0x57e>
 8001382:	2720      	movs	r7, #32
 8001384:	1bbb      	subs	r3, r7, r6
 8001386:	469a      	mov	sl, r3
 8001388:	4663      	mov	r3, ip
 800138a:	4657      	mov	r7, sl
 800138c:	40bb      	lsls	r3, r7
 800138e:	4699      	mov	r9, r3
 8001390:	0013      	movs	r3, r2
 8001392:	464f      	mov	r7, r9
 8001394:	40f3      	lsrs	r3, r6
 8001396:	431f      	orrs	r7, r3
 8001398:	003b      	movs	r3, r7
 800139a:	4657      	mov	r7, sl
 800139c:	40ba      	lsls	r2, r7
 800139e:	1e57      	subs	r7, r2, #1
 80013a0:	41ba      	sbcs	r2, r7
 80013a2:	4313      	orrs	r3, r2
 80013a4:	4662      	mov	r2, ip
 80013a6:	40f2      	lsrs	r2, r6
 80013a8:	1889      	adds	r1, r1, r2
 80013aa:	e698      	b.n	80010de <__aeabi_dsub+0x182>
 80013ac:	2720      	movs	r7, #32
 80013ae:	1bbb      	subs	r3, r7, r6
 80013b0:	469a      	mov	sl, r3
 80013b2:	4663      	mov	r3, ip
 80013b4:	4657      	mov	r7, sl
 80013b6:	40bb      	lsls	r3, r7
 80013b8:	4699      	mov	r9, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	464f      	mov	r7, r9
 80013be:	40f3      	lsrs	r3, r6
 80013c0:	431f      	orrs	r7, r3
 80013c2:	003b      	movs	r3, r7
 80013c4:	4657      	mov	r7, sl
 80013c6:	40ba      	lsls	r2, r7
 80013c8:	1e57      	subs	r7, r2, #1
 80013ca:	41ba      	sbcs	r2, r7
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4662      	mov	r2, ip
 80013d0:	40f2      	lsrs	r2, r6
 80013d2:	1a89      	subs	r1, r1, r2
 80013d4:	e79c      	b.n	8001310 <__aeabi_dsub+0x3b4>
 80013d6:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <__aeabi_dsub+0x688>)
 80013d8:	429f      	cmp	r7, r3
 80013da:	d05f      	beq.n	800149c <__aeabi_dsub+0x540>
 80013dc:	2580      	movs	r5, #128	; 0x80
 80013de:	042d      	lsls	r5, r5, #16
 80013e0:	4273      	negs	r3, r6
 80013e2:	4329      	orrs	r1, r5
 80013e4:	e720      	b.n	8001228 <__aeabi_dsub+0x2cc>
 80013e6:	2e00      	cmp	r6, #0
 80013e8:	d10c      	bne.n	8001404 <__aeabi_dsub+0x4a8>
 80013ea:	2f00      	cmp	r7, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dsub+0x494>
 80013ee:	e0d0      	b.n	8001592 <__aeabi_dsub+0x636>
 80013f0:	465c      	mov	r4, fp
 80013f2:	4661      	mov	r1, ip
 80013f4:	4691      	mov	r9, r2
 80013f6:	4d7b      	ldr	r5, [pc, #492]	; (80015e4 <__aeabi_dsub+0x688>)
 80013f8:	e6cd      	b.n	8001196 <__aeabi_dsub+0x23a>
 80013fa:	4f7a      	ldr	r7, [pc, #488]	; (80015e4 <__aeabi_dsub+0x688>)
 80013fc:	42be      	cmp	r6, r7
 80013fe:	d01c      	beq.n	800143a <__aeabi_dsub+0x4de>
 8001400:	001e      	movs	r6, r3
 8001402:	e665      	b.n	80010d0 <__aeabi_dsub+0x174>
 8001404:	2f00      	cmp	r7, #0
 8001406:	d018      	beq.n	800143a <__aeabi_dsub+0x4de>
 8001408:	08c0      	lsrs	r0, r0, #3
 800140a:	074e      	lsls	r6, r1, #29
 800140c:	4306      	orrs	r6, r0
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	08c9      	lsrs	r1, r1, #3
 8001412:	0300      	lsls	r0, r0, #12
 8001414:	4201      	tst	r1, r0
 8001416:	d008      	beq.n	800142a <__aeabi_dsub+0x4ce>
 8001418:	4663      	mov	r3, ip
 800141a:	08dc      	lsrs	r4, r3, #3
 800141c:	4204      	tst	r4, r0
 800141e:	d104      	bne.n	800142a <__aeabi_dsub+0x4ce>
 8001420:	0021      	movs	r1, r4
 8001422:	46da      	mov	sl, fp
 8001424:	08d2      	lsrs	r2, r2, #3
 8001426:	075e      	lsls	r6, r3, #29
 8001428:	4316      	orrs	r6, r2
 800142a:	00f3      	lsls	r3, r6, #3
 800142c:	4699      	mov	r9, r3
 800142e:	2401      	movs	r4, #1
 8001430:	4653      	mov	r3, sl
 8001432:	00c9      	lsls	r1, r1, #3
 8001434:	0f72      	lsrs	r2, r6, #29
 8001436:	4311      	orrs	r1, r2
 8001438:	401c      	ands	r4, r3
 800143a:	4d6a      	ldr	r5, [pc, #424]	; (80015e4 <__aeabi_dsub+0x688>)
 800143c:	e6ab      	b.n	8001196 <__aeabi_dsub+0x23a>
 800143e:	001d      	movs	r5, r3
 8001440:	2200      	movs	r2, #0
 8001442:	2700      	movs	r7, #0
 8001444:	e6b4      	b.n	80011b0 <__aeabi_dsub+0x254>
 8001446:	2d00      	cmp	r5, #0
 8001448:	d159      	bne.n	80014fe <__aeabi_dsub+0x5a2>
 800144a:	000b      	movs	r3, r1
 800144c:	4303      	orrs	r3, r0
 800144e:	d100      	bne.n	8001452 <__aeabi_dsub+0x4f6>
 8001450:	e6d6      	b.n	8001200 <__aeabi_dsub+0x2a4>
 8001452:	1c73      	adds	r3, r6, #1
 8001454:	d100      	bne.n	8001458 <__aeabi_dsub+0x4fc>
 8001456:	e0b2      	b.n	80015be <__aeabi_dsub+0x662>
 8001458:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <__aeabi_dsub+0x688>)
 800145a:	429f      	cmp	r7, r3
 800145c:	d01e      	beq.n	800149c <__aeabi_dsub+0x540>
 800145e:	43f3      	mvns	r3, r6
 8001460:	2b38      	cmp	r3, #56	; 0x38
 8001462:	dc6f      	bgt.n	8001544 <__aeabi_dsub+0x5e8>
 8001464:	2b1f      	cmp	r3, #31
 8001466:	dd00      	ble.n	800146a <__aeabi_dsub+0x50e>
 8001468:	e097      	b.n	800159a <__aeabi_dsub+0x63e>
 800146a:	2520      	movs	r5, #32
 800146c:	000e      	movs	r6, r1
 800146e:	1aed      	subs	r5, r5, r3
 8001470:	40ae      	lsls	r6, r5
 8001472:	46b0      	mov	r8, r6
 8001474:	0006      	movs	r6, r0
 8001476:	46aa      	mov	sl, r5
 8001478:	40de      	lsrs	r6, r3
 800147a:	4645      	mov	r5, r8
 800147c:	4335      	orrs	r5, r6
 800147e:	002e      	movs	r6, r5
 8001480:	4655      	mov	r5, sl
 8001482:	40a8      	lsls	r0, r5
 8001484:	40d9      	lsrs	r1, r3
 8001486:	1e45      	subs	r5, r0, #1
 8001488:	41a8      	sbcs	r0, r5
 800148a:	448c      	add	ip, r1
 800148c:	4306      	orrs	r6, r0
 800148e:	18b6      	adds	r6, r6, r2
 8001490:	4296      	cmp	r6, r2
 8001492:	4192      	sbcs	r2, r2
 8001494:	4251      	negs	r1, r2
 8001496:	4461      	add	r1, ip
 8001498:	003d      	movs	r5, r7
 800149a:	e625      	b.n	80010e8 <__aeabi_dsub+0x18c>
 800149c:	003d      	movs	r5, r7
 800149e:	4661      	mov	r1, ip
 80014a0:	4691      	mov	r9, r2
 80014a2:	e678      	b.n	8001196 <__aeabi_dsub+0x23a>
 80014a4:	000b      	movs	r3, r1
 80014a6:	4303      	orrs	r3, r0
 80014a8:	2d00      	cmp	r5, #0
 80014aa:	d000      	beq.n	80014ae <__aeabi_dsub+0x552>
 80014ac:	e655      	b.n	800115a <__aeabi_dsub+0x1fe>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f5      	beq.n	800149e <__aeabi_dsub+0x542>
 80014b2:	4663      	mov	r3, ip
 80014b4:	4313      	orrs	r3, r2
 80014b6:	d100      	bne.n	80014ba <__aeabi_dsub+0x55e>
 80014b8:	e66d      	b.n	8001196 <__aeabi_dsub+0x23a>
 80014ba:	1886      	adds	r6, r0, r2
 80014bc:	4286      	cmp	r6, r0
 80014be:	4180      	sbcs	r0, r0
 80014c0:	4461      	add	r1, ip
 80014c2:	4240      	negs	r0, r0
 80014c4:	1809      	adds	r1, r1, r0
 80014c6:	2200      	movs	r2, #0
 80014c8:	020b      	lsls	r3, r1, #8
 80014ca:	d400      	bmi.n	80014ce <__aeabi_dsub+0x572>
 80014cc:	e6d0      	b.n	8001270 <__aeabi_dsub+0x314>
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <__aeabi_dsub+0x68c>)
 80014d0:	3501      	adds	r5, #1
 80014d2:	4019      	ands	r1, r3
 80014d4:	e5b2      	b.n	800103c <__aeabi_dsub+0xe0>
 80014d6:	46b1      	mov	r9, r6
 80014d8:	e65d      	b.n	8001196 <__aeabi_dsub+0x23a>
 80014da:	0033      	movs	r3, r6
 80014dc:	4667      	mov	r7, ip
 80014de:	3b20      	subs	r3, #32
 80014e0:	40df      	lsrs	r7, r3
 80014e2:	003b      	movs	r3, r7
 80014e4:	2e20      	cmp	r6, #32
 80014e6:	d005      	beq.n	80014f4 <__aeabi_dsub+0x598>
 80014e8:	2740      	movs	r7, #64	; 0x40
 80014ea:	1bbf      	subs	r7, r7, r6
 80014ec:	4666      	mov	r6, ip
 80014ee:	40be      	lsls	r6, r7
 80014f0:	4332      	orrs	r2, r6
 80014f2:	4690      	mov	r8, r2
 80014f4:	4646      	mov	r6, r8
 80014f6:	1e72      	subs	r2, r6, #1
 80014f8:	4196      	sbcs	r6, r2
 80014fa:	4333      	orrs	r3, r6
 80014fc:	e5ef      	b.n	80010de <__aeabi_dsub+0x182>
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <__aeabi_dsub+0x688>)
 8001500:	429f      	cmp	r7, r3
 8001502:	d0cb      	beq.n	800149c <__aeabi_dsub+0x540>
 8001504:	2580      	movs	r5, #128	; 0x80
 8001506:	042d      	lsls	r5, r5, #16
 8001508:	4273      	negs	r3, r6
 800150a:	4329      	orrs	r1, r5
 800150c:	e7a8      	b.n	8001460 <__aeabi_dsub+0x504>
 800150e:	4308      	orrs	r0, r1
 8001510:	1e41      	subs	r1, r0, #1
 8001512:	4188      	sbcs	r0, r1
 8001514:	e6a2      	b.n	800125c <__aeabi_dsub+0x300>
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dsub+0x5c0>
 800151a:	e63c      	b.n	8001196 <__aeabi_dsub+0x23a>
 800151c:	4663      	mov	r3, ip
 800151e:	1a86      	subs	r6, r0, r2
 8001520:	1acf      	subs	r7, r1, r3
 8001522:	42b0      	cmp	r0, r6
 8001524:	419b      	sbcs	r3, r3
 8001526:	425b      	negs	r3, r3
 8001528:	1afb      	subs	r3, r7, r3
 800152a:	4698      	mov	r8, r3
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	d54e      	bpl.n	80015ce <__aeabi_dsub+0x672>
 8001530:	1a16      	subs	r6, r2, r0
 8001532:	4663      	mov	r3, ip
 8001534:	42b2      	cmp	r2, r6
 8001536:	4192      	sbcs	r2, r2
 8001538:	1a59      	subs	r1, r3, r1
 800153a:	4252      	negs	r2, r2
 800153c:	1a89      	subs	r1, r1, r2
 800153e:	465c      	mov	r4, fp
 8001540:	2200      	movs	r2, #0
 8001542:	e57b      	b.n	800103c <__aeabi_dsub+0xe0>
 8001544:	4301      	orrs	r1, r0
 8001546:	000e      	movs	r6, r1
 8001548:	1e71      	subs	r1, r6, #1
 800154a:	418e      	sbcs	r6, r1
 800154c:	e79f      	b.n	800148e <__aeabi_dsub+0x532>
 800154e:	001d      	movs	r5, r3
 8001550:	000e      	movs	r6, r1
 8001552:	3d20      	subs	r5, #32
 8001554:	40ee      	lsrs	r6, r5
 8001556:	46b0      	mov	r8, r6
 8001558:	2b20      	cmp	r3, #32
 800155a:	d004      	beq.n	8001566 <__aeabi_dsub+0x60a>
 800155c:	2540      	movs	r5, #64	; 0x40
 800155e:	1aeb      	subs	r3, r5, r3
 8001560:	4099      	lsls	r1, r3
 8001562:	4308      	orrs	r0, r1
 8001564:	4681      	mov	r9, r0
 8001566:	4648      	mov	r0, r9
 8001568:	4643      	mov	r3, r8
 800156a:	1e41      	subs	r1, r0, #1
 800156c:	4188      	sbcs	r0, r1
 800156e:	4318      	orrs	r0, r3
 8001570:	e674      	b.n	800125c <__aeabi_dsub+0x300>
 8001572:	2200      	movs	r2, #0
 8001574:	2400      	movs	r4, #0
 8001576:	e617      	b.n	80011a8 <__aeabi_dsub+0x24c>
 8001578:	1a16      	subs	r6, r2, r0
 800157a:	4663      	mov	r3, ip
 800157c:	42b2      	cmp	r2, r6
 800157e:	4192      	sbcs	r2, r2
 8001580:	1a59      	subs	r1, r3, r1
 8001582:	4252      	negs	r2, r2
 8001584:	1a89      	subs	r1, r1, r2
 8001586:	003d      	movs	r5, r7
 8001588:	e525      	b.n	8000fd6 <__aeabi_dsub+0x7a>
 800158a:	4661      	mov	r1, ip
 800158c:	4691      	mov	r9, r2
 800158e:	4d15      	ldr	r5, [pc, #84]	; (80015e4 <__aeabi_dsub+0x688>)
 8001590:	e601      	b.n	8001196 <__aeabi_dsub+0x23a>
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	2400      	movs	r4, #0
 8001596:	0312      	lsls	r2, r2, #12
 8001598:	e679      	b.n	800128e <__aeabi_dsub+0x332>
 800159a:	001d      	movs	r5, r3
 800159c:	000e      	movs	r6, r1
 800159e:	3d20      	subs	r5, #32
 80015a0:	40ee      	lsrs	r6, r5
 80015a2:	46b0      	mov	r8, r6
 80015a4:	2b20      	cmp	r3, #32
 80015a6:	d004      	beq.n	80015b2 <__aeabi_dsub+0x656>
 80015a8:	2540      	movs	r5, #64	; 0x40
 80015aa:	1aeb      	subs	r3, r5, r3
 80015ac:	4099      	lsls	r1, r3
 80015ae:	4308      	orrs	r0, r1
 80015b0:	4681      	mov	r9, r0
 80015b2:	464e      	mov	r6, r9
 80015b4:	4643      	mov	r3, r8
 80015b6:	1e71      	subs	r1, r6, #1
 80015b8:	418e      	sbcs	r6, r1
 80015ba:	431e      	orrs	r6, r3
 80015bc:	e767      	b.n	800148e <__aeabi_dsub+0x532>
 80015be:	1886      	adds	r6, r0, r2
 80015c0:	4296      	cmp	r6, r2
 80015c2:	419b      	sbcs	r3, r3
 80015c4:	4461      	add	r1, ip
 80015c6:	425b      	negs	r3, r3
 80015c8:	18c9      	adds	r1, r1, r3
 80015ca:	003d      	movs	r5, r7
 80015cc:	e58c      	b.n	80010e8 <__aeabi_dsub+0x18c>
 80015ce:	4647      	mov	r7, r8
 80015d0:	4337      	orrs	r7, r6
 80015d2:	d0ce      	beq.n	8001572 <__aeabi_dsub+0x616>
 80015d4:	2207      	movs	r2, #7
 80015d6:	4641      	mov	r1, r8
 80015d8:	4032      	ands	r2, r6
 80015da:	e649      	b.n	8001270 <__aeabi_dsub+0x314>
 80015dc:	2700      	movs	r7, #0
 80015de:	003a      	movs	r2, r7
 80015e0:	e5e6      	b.n	80011b0 <__aeabi_dsub+0x254>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	000007ff 	.word	0x000007ff
 80015e8:	ff7fffff 	.word	0xff7fffff

080015ec <__aeabi_d2iz>:
 80015ec:	b530      	push	{r4, r5, lr}
 80015ee:	4d14      	ldr	r5, [pc, #80]	; (8001640 <__aeabi_d2iz+0x54>)
 80015f0:	030a      	lsls	r2, r1, #12
 80015f2:	004b      	lsls	r3, r1, #1
 80015f4:	0b12      	lsrs	r2, r2, #12
 80015f6:	0d5b      	lsrs	r3, r3, #21
 80015f8:	0fc9      	lsrs	r1, r1, #31
 80015fa:	2400      	movs	r4, #0
 80015fc:	42ab      	cmp	r3, r5
 80015fe:	dd11      	ble.n	8001624 <__aeabi_d2iz+0x38>
 8001600:	4c10      	ldr	r4, [pc, #64]	; (8001644 <__aeabi_d2iz+0x58>)
 8001602:	42a3      	cmp	r3, r4
 8001604:	dc10      	bgt.n	8001628 <__aeabi_d2iz+0x3c>
 8001606:	2480      	movs	r4, #128	; 0x80
 8001608:	0364      	lsls	r4, r4, #13
 800160a:	4322      	orrs	r2, r4
 800160c:	4c0e      	ldr	r4, [pc, #56]	; (8001648 <__aeabi_d2iz+0x5c>)
 800160e:	1ae4      	subs	r4, r4, r3
 8001610:	2c1f      	cmp	r4, #31
 8001612:	dd0c      	ble.n	800162e <__aeabi_d2iz+0x42>
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <__aeabi_d2iz+0x60>)
 8001616:	1ac3      	subs	r3, r0, r3
 8001618:	40da      	lsrs	r2, r3
 800161a:	0013      	movs	r3, r2
 800161c:	425c      	negs	r4, r3
 800161e:	2900      	cmp	r1, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_d2iz+0x38>
 8001622:	001c      	movs	r4, r3
 8001624:	0020      	movs	r0, r4
 8001626:	bd30      	pop	{r4, r5, pc}
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <__aeabi_d2iz+0x64>)
 800162a:	18cc      	adds	r4, r1, r3
 800162c:	e7fa      	b.n	8001624 <__aeabi_d2iz+0x38>
 800162e:	4d09      	ldr	r5, [pc, #36]	; (8001654 <__aeabi_d2iz+0x68>)
 8001630:	40e0      	lsrs	r0, r4
 8001632:	46ac      	mov	ip, r5
 8001634:	4463      	add	r3, ip
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	4303      	orrs	r3, r0
 800163c:	e7ee      	b.n	800161c <__aeabi_d2iz+0x30>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	000003fe 	.word	0x000003fe
 8001644:	0000041d 	.word	0x0000041d
 8001648:	00000433 	.word	0x00000433
 800164c:	00000413 	.word	0x00000413
 8001650:	7fffffff 	.word	0x7fffffff
 8001654:	fffffbed 	.word	0xfffffbed

08001658 <__aeabi_cdrcmple>:
 8001658:	4684      	mov	ip, r0
 800165a:	1c10      	adds	r0, r2, #0
 800165c:	4662      	mov	r2, ip
 800165e:	468c      	mov	ip, r1
 8001660:	1c19      	adds	r1, r3, #0
 8001662:	4663      	mov	r3, ip
 8001664:	e000      	b.n	8001668 <__aeabi_cdcmpeq>
 8001666:	46c0      	nop			; (mov r8, r8)

08001668 <__aeabi_cdcmpeq>:
 8001668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800166a:	f000 f8fd 	bl	8001868 <__ledf2>
 800166e:	2800      	cmp	r0, #0
 8001670:	d401      	bmi.n	8001676 <__aeabi_cdcmpeq+0xe>
 8001672:	2100      	movs	r1, #0
 8001674:	42c8      	cmn	r0, r1
 8001676:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001678 <__aeabi_dcmpeq>:
 8001678:	b510      	push	{r4, lr}
 800167a:	f000 f855 	bl	8001728 <__eqdf2>
 800167e:	4240      	negs	r0, r0
 8001680:	3001      	adds	r0, #1
 8001682:	bd10      	pop	{r4, pc}

08001684 <__aeabi_dcmplt>:
 8001684:	b510      	push	{r4, lr}
 8001686:	f000 f8ef 	bl	8001868 <__ledf2>
 800168a:	2800      	cmp	r0, #0
 800168c:	db01      	blt.n	8001692 <__aeabi_dcmplt+0xe>
 800168e:	2000      	movs	r0, #0
 8001690:	bd10      	pop	{r4, pc}
 8001692:	2001      	movs	r0, #1
 8001694:	bd10      	pop	{r4, pc}
 8001696:	46c0      	nop			; (mov r8, r8)

08001698 <__aeabi_dcmple>:
 8001698:	b510      	push	{r4, lr}
 800169a:	f000 f8e5 	bl	8001868 <__ledf2>
 800169e:	2800      	cmp	r0, #0
 80016a0:	dd01      	ble.n	80016a6 <__aeabi_dcmple+0xe>
 80016a2:	2000      	movs	r0, #0
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	2001      	movs	r0, #1
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)

080016ac <__aeabi_dcmpgt>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	f000 f877 	bl	80017a0 <__gedf2>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	dc01      	bgt.n	80016ba <__aeabi_dcmpgt+0xe>
 80016b6:	2000      	movs	r0, #0
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	2001      	movs	r0, #1
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	46c0      	nop			; (mov r8, r8)

080016c0 <__aeabi_dcmpge>:
 80016c0:	b510      	push	{r4, lr}
 80016c2:	f000 f86d 	bl	80017a0 <__gedf2>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	da01      	bge.n	80016ce <__aeabi_dcmpge+0xe>
 80016ca:	2000      	movs	r0, #0
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	2001      	movs	r0, #1
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)

080016d4 <__clzsi2>:
 80016d4:	211c      	movs	r1, #28
 80016d6:	2301      	movs	r3, #1
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	4298      	cmp	r0, r3
 80016dc:	d301      	bcc.n	80016e2 <__clzsi2+0xe>
 80016de:	0c00      	lsrs	r0, r0, #16
 80016e0:	3910      	subs	r1, #16
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	4298      	cmp	r0, r3
 80016e6:	d301      	bcc.n	80016ec <__clzsi2+0x18>
 80016e8:	0a00      	lsrs	r0, r0, #8
 80016ea:	3908      	subs	r1, #8
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d301      	bcc.n	80016f6 <__clzsi2+0x22>
 80016f2:	0900      	lsrs	r0, r0, #4
 80016f4:	3904      	subs	r1, #4
 80016f6:	a202      	add	r2, pc, #8	; (adr r2, 8001700 <__clzsi2+0x2c>)
 80016f8:	5c10      	ldrb	r0, [r2, r0]
 80016fa:	1840      	adds	r0, r0, r1
 80016fc:	4770      	bx	lr
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	02020304 	.word	0x02020304
 8001704:	01010101 	.word	0x01010101
	...

08001710 <__clzdi2>:
 8001710:	b510      	push	{r4, lr}
 8001712:	2900      	cmp	r1, #0
 8001714:	d103      	bne.n	800171e <__clzdi2+0xe>
 8001716:	f7ff ffdd 	bl	80016d4 <__clzsi2>
 800171a:	3020      	adds	r0, #32
 800171c:	e002      	b.n	8001724 <__clzdi2+0x14>
 800171e:	1c08      	adds	r0, r1, #0
 8001720:	f7ff ffd8 	bl	80016d4 <__clzsi2>
 8001724:	bd10      	pop	{r4, pc}
 8001726:	46c0      	nop			; (mov r8, r8)

08001728 <__eqdf2>:
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	464f      	mov	r7, r9
 800172c:	4646      	mov	r6, r8
 800172e:	46d6      	mov	lr, sl
 8001730:	4684      	mov	ip, r0
 8001732:	b5c0      	push	{r6, r7, lr}
 8001734:	4680      	mov	r8, r0
 8001736:	4e19      	ldr	r6, [pc, #100]	; (800179c <__eqdf2+0x74>)
 8001738:	0318      	lsls	r0, r3, #12
 800173a:	030f      	lsls	r7, r1, #12
 800173c:	004d      	lsls	r5, r1, #1
 800173e:	0b00      	lsrs	r0, r0, #12
 8001740:	005c      	lsls	r4, r3, #1
 8001742:	4682      	mov	sl, r0
 8001744:	0b3f      	lsrs	r7, r7, #12
 8001746:	0d6d      	lsrs	r5, r5, #21
 8001748:	0fc9      	lsrs	r1, r1, #31
 800174a:	4691      	mov	r9, r2
 800174c:	0d64      	lsrs	r4, r4, #21
 800174e:	0fdb      	lsrs	r3, r3, #31
 8001750:	2001      	movs	r0, #1
 8001752:	42b5      	cmp	r5, r6
 8001754:	d00a      	beq.n	800176c <__eqdf2+0x44>
 8001756:	42b4      	cmp	r4, r6
 8001758:	d003      	beq.n	8001762 <__eqdf2+0x3a>
 800175a:	42a5      	cmp	r5, r4
 800175c:	d101      	bne.n	8001762 <__eqdf2+0x3a>
 800175e:	4557      	cmp	r7, sl
 8001760:	d00c      	beq.n	800177c <__eqdf2+0x54>
 8001762:	bc1c      	pop	{r2, r3, r4}
 8001764:	4690      	mov	r8, r2
 8001766:	4699      	mov	r9, r3
 8001768:	46a2      	mov	sl, r4
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	4666      	mov	r6, ip
 800176e:	433e      	orrs	r6, r7
 8001770:	d1f7      	bne.n	8001762 <__eqdf2+0x3a>
 8001772:	42ac      	cmp	r4, r5
 8001774:	d1f5      	bne.n	8001762 <__eqdf2+0x3a>
 8001776:	4654      	mov	r4, sl
 8001778:	4314      	orrs	r4, r2
 800177a:	d1f2      	bne.n	8001762 <__eqdf2+0x3a>
 800177c:	2001      	movs	r0, #1
 800177e:	45c8      	cmp	r8, r9
 8001780:	d1ef      	bne.n	8001762 <__eqdf2+0x3a>
 8001782:	4299      	cmp	r1, r3
 8001784:	d007      	beq.n	8001796 <__eqdf2+0x6e>
 8001786:	2d00      	cmp	r5, #0
 8001788:	d1eb      	bne.n	8001762 <__eqdf2+0x3a>
 800178a:	4663      	mov	r3, ip
 800178c:	431f      	orrs	r7, r3
 800178e:	0038      	movs	r0, r7
 8001790:	1e47      	subs	r7, r0, #1
 8001792:	41b8      	sbcs	r0, r7
 8001794:	e7e5      	b.n	8001762 <__eqdf2+0x3a>
 8001796:	2000      	movs	r0, #0
 8001798:	e7e3      	b.n	8001762 <__eqdf2+0x3a>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	000007ff 	.word	0x000007ff

080017a0 <__gedf2>:
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	464f      	mov	r7, r9
 80017a4:	4646      	mov	r6, r8
 80017a6:	46d6      	mov	lr, sl
 80017a8:	004d      	lsls	r5, r1, #1
 80017aa:	b5c0      	push	{r6, r7, lr}
 80017ac:	030e      	lsls	r6, r1, #12
 80017ae:	0fc9      	lsrs	r1, r1, #31
 80017b0:	468a      	mov	sl, r1
 80017b2:	492c      	ldr	r1, [pc, #176]	; (8001864 <__gedf2+0xc4>)
 80017b4:	031f      	lsls	r7, r3, #12
 80017b6:	005c      	lsls	r4, r3, #1
 80017b8:	4680      	mov	r8, r0
 80017ba:	0b36      	lsrs	r6, r6, #12
 80017bc:	0d6d      	lsrs	r5, r5, #21
 80017be:	4691      	mov	r9, r2
 80017c0:	0b3f      	lsrs	r7, r7, #12
 80017c2:	0d64      	lsrs	r4, r4, #21
 80017c4:	0fdb      	lsrs	r3, r3, #31
 80017c6:	428d      	cmp	r5, r1
 80017c8:	d01e      	beq.n	8001808 <__gedf2+0x68>
 80017ca:	428c      	cmp	r4, r1
 80017cc:	d016      	beq.n	80017fc <__gedf2+0x5c>
 80017ce:	2d00      	cmp	r5, #0
 80017d0:	d11e      	bne.n	8001810 <__gedf2+0x70>
 80017d2:	4330      	orrs	r0, r6
 80017d4:	4684      	mov	ip, r0
 80017d6:	2c00      	cmp	r4, #0
 80017d8:	d101      	bne.n	80017de <__gedf2+0x3e>
 80017da:	433a      	orrs	r2, r7
 80017dc:	d023      	beq.n	8001826 <__gedf2+0x86>
 80017de:	4662      	mov	r2, ip
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d01a      	beq.n	800181a <__gedf2+0x7a>
 80017e4:	459a      	cmp	sl, r3
 80017e6:	d029      	beq.n	800183c <__gedf2+0x9c>
 80017e8:	4651      	mov	r1, sl
 80017ea:	2002      	movs	r0, #2
 80017ec:	3901      	subs	r1, #1
 80017ee:	4008      	ands	r0, r1
 80017f0:	3801      	subs	r0, #1
 80017f2:	bc1c      	pop	{r2, r3, r4}
 80017f4:	4690      	mov	r8, r2
 80017f6:	4699      	mov	r9, r3
 80017f8:	46a2      	mov	sl, r4
 80017fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fc:	0039      	movs	r1, r7
 80017fe:	4311      	orrs	r1, r2
 8001800:	d0e5      	beq.n	80017ce <__gedf2+0x2e>
 8001802:	2002      	movs	r0, #2
 8001804:	4240      	negs	r0, r0
 8001806:	e7f4      	b.n	80017f2 <__gedf2+0x52>
 8001808:	4330      	orrs	r0, r6
 800180a:	d1fa      	bne.n	8001802 <__gedf2+0x62>
 800180c:	42ac      	cmp	r4, r5
 800180e:	d00f      	beq.n	8001830 <__gedf2+0x90>
 8001810:	2c00      	cmp	r4, #0
 8001812:	d10f      	bne.n	8001834 <__gedf2+0x94>
 8001814:	433a      	orrs	r2, r7
 8001816:	d0e7      	beq.n	80017e8 <__gedf2+0x48>
 8001818:	e00c      	b.n	8001834 <__gedf2+0x94>
 800181a:	2201      	movs	r2, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	4393      	bics	r3, r2
 8001820:	0018      	movs	r0, r3
 8001822:	3001      	adds	r0, #1
 8001824:	e7e5      	b.n	80017f2 <__gedf2+0x52>
 8001826:	4663      	mov	r3, ip
 8001828:	2000      	movs	r0, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0e1      	beq.n	80017f2 <__gedf2+0x52>
 800182e:	e7db      	b.n	80017e8 <__gedf2+0x48>
 8001830:	433a      	orrs	r2, r7
 8001832:	d1e6      	bne.n	8001802 <__gedf2+0x62>
 8001834:	459a      	cmp	sl, r3
 8001836:	d1d7      	bne.n	80017e8 <__gedf2+0x48>
 8001838:	42a5      	cmp	r5, r4
 800183a:	dcd5      	bgt.n	80017e8 <__gedf2+0x48>
 800183c:	42a5      	cmp	r5, r4
 800183e:	db05      	blt.n	800184c <__gedf2+0xac>
 8001840:	42be      	cmp	r6, r7
 8001842:	d8d1      	bhi.n	80017e8 <__gedf2+0x48>
 8001844:	d008      	beq.n	8001858 <__gedf2+0xb8>
 8001846:	2000      	movs	r0, #0
 8001848:	42be      	cmp	r6, r7
 800184a:	d2d2      	bcs.n	80017f2 <__gedf2+0x52>
 800184c:	4650      	mov	r0, sl
 800184e:	2301      	movs	r3, #1
 8001850:	3801      	subs	r0, #1
 8001852:	4398      	bics	r0, r3
 8001854:	3001      	adds	r0, #1
 8001856:	e7cc      	b.n	80017f2 <__gedf2+0x52>
 8001858:	45c8      	cmp	r8, r9
 800185a:	d8c5      	bhi.n	80017e8 <__gedf2+0x48>
 800185c:	2000      	movs	r0, #0
 800185e:	45c8      	cmp	r8, r9
 8001860:	d3f4      	bcc.n	800184c <__gedf2+0xac>
 8001862:	e7c6      	b.n	80017f2 <__gedf2+0x52>
 8001864:	000007ff 	.word	0x000007ff

08001868 <__ledf2>:
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	464f      	mov	r7, r9
 800186c:	4646      	mov	r6, r8
 800186e:	46d6      	mov	lr, sl
 8001870:	004d      	lsls	r5, r1, #1
 8001872:	b5c0      	push	{r6, r7, lr}
 8001874:	030e      	lsls	r6, r1, #12
 8001876:	0fc9      	lsrs	r1, r1, #31
 8001878:	468a      	mov	sl, r1
 800187a:	492e      	ldr	r1, [pc, #184]	; (8001934 <__ledf2+0xcc>)
 800187c:	031f      	lsls	r7, r3, #12
 800187e:	005c      	lsls	r4, r3, #1
 8001880:	4680      	mov	r8, r0
 8001882:	0b36      	lsrs	r6, r6, #12
 8001884:	0d6d      	lsrs	r5, r5, #21
 8001886:	4691      	mov	r9, r2
 8001888:	0b3f      	lsrs	r7, r7, #12
 800188a:	0d64      	lsrs	r4, r4, #21
 800188c:	0fdb      	lsrs	r3, r3, #31
 800188e:	428d      	cmp	r5, r1
 8001890:	d018      	beq.n	80018c4 <__ledf2+0x5c>
 8001892:	428c      	cmp	r4, r1
 8001894:	d011      	beq.n	80018ba <__ledf2+0x52>
 8001896:	2d00      	cmp	r5, #0
 8001898:	d118      	bne.n	80018cc <__ledf2+0x64>
 800189a:	4330      	orrs	r0, r6
 800189c:	4684      	mov	ip, r0
 800189e:	2c00      	cmp	r4, #0
 80018a0:	d11e      	bne.n	80018e0 <__ledf2+0x78>
 80018a2:	433a      	orrs	r2, r7
 80018a4:	d11c      	bne.n	80018e0 <__ledf2+0x78>
 80018a6:	4663      	mov	r3, ip
 80018a8:	2000      	movs	r0, #0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d030      	beq.n	8001910 <__ledf2+0xa8>
 80018ae:	4651      	mov	r1, sl
 80018b0:	2002      	movs	r0, #2
 80018b2:	3901      	subs	r1, #1
 80018b4:	4008      	ands	r0, r1
 80018b6:	3801      	subs	r0, #1
 80018b8:	e02a      	b.n	8001910 <__ledf2+0xa8>
 80018ba:	0039      	movs	r1, r7
 80018bc:	4311      	orrs	r1, r2
 80018be:	d0ea      	beq.n	8001896 <__ledf2+0x2e>
 80018c0:	2002      	movs	r0, #2
 80018c2:	e025      	b.n	8001910 <__ledf2+0xa8>
 80018c4:	4330      	orrs	r0, r6
 80018c6:	d1fb      	bne.n	80018c0 <__ledf2+0x58>
 80018c8:	42ac      	cmp	r4, r5
 80018ca:	d026      	beq.n	800191a <__ledf2+0xb2>
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d126      	bne.n	800191e <__ledf2+0xb6>
 80018d0:	433a      	orrs	r2, r7
 80018d2:	d124      	bne.n	800191e <__ledf2+0xb6>
 80018d4:	4651      	mov	r1, sl
 80018d6:	2002      	movs	r0, #2
 80018d8:	3901      	subs	r1, #1
 80018da:	4008      	ands	r0, r1
 80018dc:	3801      	subs	r0, #1
 80018de:	e017      	b.n	8001910 <__ledf2+0xa8>
 80018e0:	4662      	mov	r2, ip
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	d00f      	beq.n	8001906 <__ledf2+0x9e>
 80018e6:	459a      	cmp	sl, r3
 80018e8:	d1e1      	bne.n	80018ae <__ledf2+0x46>
 80018ea:	42a5      	cmp	r5, r4
 80018ec:	db05      	blt.n	80018fa <__ledf2+0x92>
 80018ee:	42be      	cmp	r6, r7
 80018f0:	d8dd      	bhi.n	80018ae <__ledf2+0x46>
 80018f2:	d019      	beq.n	8001928 <__ledf2+0xc0>
 80018f4:	2000      	movs	r0, #0
 80018f6:	42be      	cmp	r6, r7
 80018f8:	d20a      	bcs.n	8001910 <__ledf2+0xa8>
 80018fa:	4650      	mov	r0, sl
 80018fc:	2301      	movs	r3, #1
 80018fe:	3801      	subs	r0, #1
 8001900:	4398      	bics	r0, r3
 8001902:	3001      	adds	r0, #1
 8001904:	e004      	b.n	8001910 <__ledf2+0xa8>
 8001906:	2201      	movs	r2, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	4393      	bics	r3, r2
 800190c:	0018      	movs	r0, r3
 800190e:	3001      	adds	r0, #1
 8001910:	bc1c      	pop	{r2, r3, r4}
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	46a2      	mov	sl, r4
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191a:	433a      	orrs	r2, r7
 800191c:	d1d0      	bne.n	80018c0 <__ledf2+0x58>
 800191e:	459a      	cmp	sl, r3
 8001920:	d1c5      	bne.n	80018ae <__ledf2+0x46>
 8001922:	42a5      	cmp	r5, r4
 8001924:	dcc3      	bgt.n	80018ae <__ledf2+0x46>
 8001926:	e7e0      	b.n	80018ea <__ledf2+0x82>
 8001928:	45c8      	cmp	r8, r9
 800192a:	d8c0      	bhi.n	80018ae <__ledf2+0x46>
 800192c:	2000      	movs	r0, #0
 800192e:	45c8      	cmp	r8, r9
 8001930:	d3e3      	bcc.n	80018fa <__ledf2+0x92>
 8001932:	e7ed      	b.n	8001910 <__ledf2+0xa8>
 8001934:	000007ff 	.word	0x000007ff

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	4c60      	ldr	r4, [pc, #384]	; (8001abc <main+0x184>)
 800193c:	44a5      	add	sp, r4
 800193e:	af00      	add	r7, sp, #0
	//Due to small ram (8KB) we must divide frame array by 32 (157440/32=4920)
	//The resulting problem with this is that the beginning of every 10th row will be over exposed.
	//uint8_t received_data[4920] = {0}; // size of one frame: 157440
	//uint8_t test[2000] = {0}; //2000 gives hard fault. 1000 does not. Seems like the RAM is the limitation.

	uint8_t received_data[4920] = {0};  //320*492 = 157440    157440/32 = 4920
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <main+0x188>)
 8001942:	22b9      	movs	r2, #185	; 0xb9
 8001944:	0152      	lsls	r2, r2, #5
 8001946:	4694      	mov	ip, r2
 8001948:	44bc      	add	ip, r7
 800194a:	4463      	add	r3, ip
 800194c:	0018      	movs	r0, r3
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <main+0x18c>)
 8001950:	001a      	movs	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	f002 f942 	bl	8003bdc <memset>
	uint8_t empty_data[966] = {0};
 8001958:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <main+0x190>)
 800195a:	22b9      	movs	r2, #185	; 0xb9
 800195c:	0152      	lsls	r2, r2, #5
 800195e:	4694      	mov	ip, r2
 8001960:	44bc      	add	ip, r7
 8001962:	4463      	add	r3, ip
 8001964:	0018      	movs	r0, r3
 8001966:	4b59      	ldr	r3, [pc, #356]	; (8001acc <main+0x194>)
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f002 f936 	bl	8003bdc <memset>
	uint8_t test_pattern[6];
	test_pattern[0] = 0b10010000;
 8001970:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <main+0x198>)
 8001972:	22b9      	movs	r2, #185	; 0xb9
 8001974:	0152      	lsls	r2, r2, #5
 8001976:	4694      	mov	ip, r2
 8001978:	44bc      	add	ip, r7
 800197a:	4463      	add	r3, ip
 800197c:	2290      	movs	r2, #144	; 0x90
 800197e:	701a      	strb	r2, [r3, #0]
	test_pattern[1] = 0b11000001;
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <main+0x198>)
 8001982:	22b9      	movs	r2, #185	; 0xb9
 8001984:	0152      	lsls	r2, r2, #5
 8001986:	4694      	mov	ip, r2
 8001988:	44bc      	add	ip, r7
 800198a:	4463      	add	r3, ip
 800198c:	22c1      	movs	r2, #193	; 0xc1
 800198e:	705a      	strb	r2, [r3, #1]
	test_pattern[2] = 0b00101010;
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <main+0x198>)
 8001992:	22b9      	movs	r2, #185	; 0xb9
 8001994:	0152      	lsls	r2, r2, #5
 8001996:	4694      	mov	ip, r2
 8001998:	44bc      	add	ip, r7
 800199a:	4463      	add	r3, ip
 800199c:	222a      	movs	r2, #42	; 0x2a
 800199e:	709a      	strb	r2, [r3, #2]
	test_pattern[3] = 0b10010010;
 80019a0:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <main+0x198>)
 80019a2:	22b9      	movs	r2, #185	; 0xb9
 80019a4:	0152      	lsls	r2, r2, #5
 80019a6:	4694      	mov	ip, r2
 80019a8:	44bc      	add	ip, r7
 80019aa:	4463      	add	r3, ip
 80019ac:	2292      	movs	r2, #146	; 0x92
 80019ae:	70da      	strb	r2, [r3, #3]
	test_pattern[4] = 0b00000101;
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <main+0x198>)
 80019b2:	22b9      	movs	r2, #185	; 0xb9
 80019b4:	0152      	lsls	r2, r2, #5
 80019b6:	4694      	mov	ip, r2
 80019b8:	44bc      	add	ip, r7
 80019ba:	4463      	add	r3, ip
 80019bc:	2205      	movs	r2, #5
 80019be:	711a      	strb	r2, [r3, #4]
	test_pattern[5] = 0b00101000;
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <main+0x198>)
 80019c2:	22b9      	movs	r2, #185	; 0xb9
 80019c4:	0152      	lsls	r2, r2, #5
 80019c6:	4694      	mov	ip, r2
 80019c8:	44bc      	add	ip, r7
 80019ca:	4463      	add	r3, ip
 80019cc:	2228      	movs	r2, #40	; 0x28
 80019ce:	715a      	strb	r2, [r3, #5]

	uint8_t on_time = 0;
 80019d0:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <main+0x19c>)
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	uint8_t off_time = 0;
 80019d8:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <main+0x1a0>)
 80019da:	18bb      	adds	r3, r7, r2
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	double period = 50; //ms
 80019e0:	2300      	movs	r3, #0
 80019e2:	4c3e      	ldr	r4, [pc, #248]	; (8001adc <main+0x1a4>)
 80019e4:	4d3e      	ldr	r5, [pc, #248]	; (8001ae0 <main+0x1a8>)
 80019e6:	1978      	adds	r0, r7, r5
 80019e8:	6003      	str	r3, [r0, #0]
 80019ea:	6044      	str	r4, [r0, #4]

	double duty = 100;
 80019ec:	2300      	movs	r3, #0
 80019ee:	4c3d      	ldr	r4, [pc, #244]	; (8001ae4 <main+0x1ac>)
 80019f0:	4e3d      	ldr	r6, [pc, #244]	; (8001ae8 <main+0x1b0>)
 80019f2:	19b8      	adds	r0, r7, r6
 80019f4:	6003      	str	r3, [r0, #0]
 80019f6:	6044      	str	r4, [r0, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f000 fafc 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f878 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f000 f97a 	bl	8001cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a04:	f000 f95a 	bl	8001cbc <MX_DMA_Init>
  MX_SPI1_Init();
 8001a08:	f000 f8ce 	bl	8001ba8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001a0c:	f000 f904 	bl	8001c18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  on_time = period * (duty/100);
 8001a10:	2200      	movs	r2, #0
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <main+0x1ac>)
 8001a14:	19b8      	adds	r0, r7, r6
 8001a16:	6841      	ldr	r1, [r0, #4]
 8001a18:	6800      	ldr	r0, [r0, #0]
 8001a1a:	f7fe fd2b 	bl	8000474 <__aeabi_ddiv>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	000c      	movs	r4, r1
 8001a22:	0018      	movs	r0, r3
 8001a24:	0021      	movs	r1, r4
 8001a26:	197c      	adds	r4, r7, r5
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	6863      	ldr	r3, [r4, #4]
 8001a2c:	f7ff f824 	bl	8000a78 <__aeabi_dmul>
 8001a30:	0003      	movs	r3, r0
 8001a32:	000c      	movs	r4, r1
 8001a34:	001a      	movs	r2, r3
 8001a36:	0023      	movs	r3, r4
 8001a38:	4926      	ldr	r1, [pc, #152]	; (8001ad4 <main+0x19c>)
 8001a3a:	187c      	adds	r4, r7, r1
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	f7fe fc38 	bl	80002b4 <__aeabi_d2uiz>
 8001a44:	0003      	movs	r3, r0
 8001a46:	7023      	strb	r3, [r4, #0]
  off_time = period * (1-(duty/100));
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <main+0x1ac>)
 8001a4c:	19b8      	adds	r0, r7, r6
 8001a4e:	6841      	ldr	r1, [r0, #4]
 8001a50:	6800      	ldr	r0, [r0, #0]
 8001a52:	f7fe fd0f 	bl	8000474 <__aeabi_ddiv>
 8001a56:	0003      	movs	r3, r0
 8001a58:	000c      	movs	r4, r1
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	0023      	movs	r3, r4
 8001a5e:	2000      	movs	r0, #0
 8001a60:	4922      	ldr	r1, [pc, #136]	; (8001aec <main+0x1b4>)
 8001a62:	f7ff fa7b 	bl	8000f5c <__aeabi_dsub>
 8001a66:	0003      	movs	r3, r0
 8001a68:	000c      	movs	r4, r1
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	0021      	movs	r1, r4
 8001a6e:	197b      	adds	r3, r7, r5
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f7ff f800 	bl	8000a78 <__aeabi_dmul>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	000c      	movs	r4, r1
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	0023      	movs	r3, r4
 8001a80:	4915      	ldr	r1, [pc, #84]	; (8001ad8 <main+0x1a0>)
 8001a82:	187c      	adds	r4, r7, r1
 8001a84:	0010      	movs	r0, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	f7fe fc14 	bl	80002b4 <__aeabi_d2uiz>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	7023      	strb	r3, [r4, #0]
	  //---- TURN ON EXTRA LEDs ----
//	  HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);
//	  HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(100);
	  GPIOA->BSRR =(1<<2);
 8001a90:	23a0      	movs	r3, #160	; 0xa0
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	2204      	movs	r2, #4
 8001a96:	619a      	str	r2, [r3, #24]
	  HAL_Delay(on_time);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <main+0x19c>)
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 fb18 	bl	80020d4 <HAL_Delay>
	  GPIOA->BSRR =(1<<18);
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	02d2      	lsls	r2, r2, #11
 8001aac:	619a      	str	r2, [r3, #24]
	  HAL_Delay(off_time);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <main+0x1a0>)
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 fb0d 	bl	80020d4 <HAL_Delay>
	  GPIOA->BSRR =(1<<2);
 8001aba:	e7e9      	b.n	8001a90 <main+0x158>
 8001abc:	ffffe8dc 	.word	0xffffe8dc
 8001ac0:	ffffecb0 	.word	0xffffecb0
 8001ac4:	00001338 	.word	0x00001338
 8001ac8:	ffffe8e8 	.word	0xffffe8e8
 8001acc:	000003c6 	.word	0x000003c6
 8001ad0:	ffffe8e0 	.word	0xffffe8e0
 8001ad4:	0000171f 	.word	0x0000171f
 8001ad8:	0000171e 	.word	0x0000171e
 8001adc:	40490000 	.word	0x40490000
 8001ae0:	00001710 	.word	0x00001710
 8001ae4:	40590000 	.word	0x40590000
 8001ae8:	00001708 	.word	0x00001708
 8001aec:	3ff00000 	.word	0x3ff00000

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b095      	sub	sp, #84	; 0x54
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	2418      	movs	r4, #24
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	0018      	movs	r0, r3
 8001afc:	2338      	movs	r3, #56	; 0x38
 8001afe:	001a      	movs	r2, r3
 8001b00:	2100      	movs	r1, #0
 8001b02:	f002 f86b 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	0018      	movs	r0, r3
 8001b0a:	2314      	movs	r3, #20
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f002 f864 	bl	8003bdc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <SystemClock_Config+0xb0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <SystemClock_Config+0xb4>)
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <SystemClock_Config+0xb0>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b26:	0021      	movs	r1, r4
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2210      	movs	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	0412      	lsls	r2, r2, #16
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fe76 	bl	8002848 <HAL_RCC_OscConfig>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b60:	f000 f900 	bl	8001d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	220f      	movs	r2, #15
 8001b68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	22a0      	movs	r2, #160	; 0xa0
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2100      	movs	r1, #0
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f001 fa25 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b92:	f000 f8e7 	bl	8001d64 <Error_Handler>
  }
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b015      	add	sp, #84	; 0x54
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	ffffe7ff 	.word	0xffffe7ff

08001ba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bae:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <MX_SPI1_Init+0x6c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bb4:	2282      	movs	r2, #130	; 0x82
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	0212      	lsls	r2, r2, #8
 8001bc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <MX_SPI1_Init+0x68>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f001 fbd5 	bl	80033ac <HAL_SPI_Init>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001c06:	f000 f8ad 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000002c 	.word	0x2000002c
 8001c14:	40013000 	.word	0x40013000

08001c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	2308      	movs	r3, #8
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	0018      	movs	r0, r3
 8001c24:	2310      	movs	r3, #16
 8001c26:	001a      	movs	r2, r3
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f001 ffd7 	bl	8003bdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	003b      	movs	r3, r7
 8001c30:	0018      	movs	r0, r3
 8001c32:	2308      	movs	r3, #8
 8001c34:	001a      	movs	r2, r3
 8001c36:	2100      	movs	r1, #0
 8001c38:	f001 ffd0 	bl	8003bdc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	05d2      	lsls	r2, r2, #23
 8001c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c46:	2204      	movs	r2, #4
 8001c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c52:	2264      	movs	r2, #100	; 0x64
 8001c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f001 fc35 	bl	80034d4 <HAL_TIM_Base_Init>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f000 f879 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	2108      	movs	r1, #8
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0152      	lsls	r2, r2, #5
 8001c7a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7c:	187a      	adds	r2, r7, r1
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f001 fd4e 	bl	8003724 <HAL_TIM_ConfigClockSource>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c8c:	f000 f86a 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	003b      	movs	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	003b      	movs	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9c:	003a      	movs	r2, r7
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_TIM2_Init+0xa0>)
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 ff1e 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001cac:	f000 f85a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b006      	add	sp, #24
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000084 	.word	0x20000084

08001cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_DMA_Init+0x38>)
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_DMA_Init+0x38>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_DMA_Init+0x38>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f000 fac6 	bl	8002270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f000 fad8 	bl	800229a <HAL_NVIC_EnableIRQ>

}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	0018      	movs	r0, r3
 8001d02:	2314      	movs	r3, #20
 8001d04:	001a      	movs	r2, r3
 8001d06:	2100      	movs	r1, #0
 8001d08:	f001 ff68 	bl	8003bdc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_GPIO_Init+0x68>)
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_GPIO_Init+0x68>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_GPIO_Init+0x68>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8001d24:	23a0      	movs	r3, #160	; 0xa0
 8001d26:	05db      	lsls	r3, r3, #23
 8001d28:	2200      	movs	r2, #0
 8001d2a:	210c      	movs	r1, #12
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 fd6d 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED_EN_Pin|LED_Pin;
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	220c      	movs	r2, #12
 8001d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	1d3a      	adds	r2, r7, #4
 8001d4c:	23a0      	movs	r3, #160	; 0xa0
 8001d4e:	05db      	lsls	r3, r3, #23
 8001d50:	0011      	movs	r1, r2
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 fbe4 	bl	8002520 <HAL_GPIO_Init>

}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b006      	add	sp, #24
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <Error_Handler+0x6>

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_MspInit+0x24>)
 8001d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_MspInit+0x24>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_MspInit+0x24>)
 8001d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_MspInit+0x24>)
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0549      	lsls	r1, r1, #21
 8001d86:	430a      	orrs	r2, r1
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	0018      	movs	r0, r3
 8001da2:	2314      	movs	r3, #20
 8001da4:	001a      	movs	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	f001 ff18 	bl	8003bdc <memset>
  if(hspi->Instance==SPI1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_SPI_MspInit+0x124>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d000      	beq.n	8001db8 <HAL_SPI_MspInit+0x24>
 8001db6:	e07b      	b.n	8001eb0 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db8:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_SPI_MspInit+0x128>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_SPI_MspInit+0x128>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0149      	lsls	r1, r1, #5
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_SPI_MspInit+0x128>)
 8001dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dca:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <HAL_SPI_MspInit+0x128>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_SPI_MspInit+0x128>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dde:	210c      	movs	r1, #12
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	22a0      	movs	r2, #160	; 0xa0
 8001de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2202      	movs	r2, #2
 8001dea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2203      	movs	r2, #3
 8001df6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	187a      	adds	r2, r7, r1
 8001e00:	23a0      	movs	r3, #160	; 0xa0
 8001e02:	05db      	lsls	r3, r3, #23
 8001e04:	0011      	movs	r1, r2
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fb8a 	bl	8002520 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <HAL_SPI_MspInit+0x130>)
 8001e10:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fa45 	bl	80022d4 <HAL_DMA_Init>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001e4e:	f7ff ff89 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e56:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_SPI_MspInit+0x138>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fa1c 	bl	80022d4 <HAL_DMA_Init>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001ea0:	f7ff ff60 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001ea8:	649a      	str	r2, [r3, #72]	; 0x48
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_SPI_MspInit+0x134>)
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b008      	add	sp, #32
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	200000c4 	.word	0x200000c4
 8001ec4:	4002001c 	.word	0x4002001c
 8001ec8:	2000010c 	.word	0x2000010c
 8001ecc:	40020030 	.word	0x40020030

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	05db      	lsls	r3, r3, #23
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d10d      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_TIM_Base_MspInit+0x38>)
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_TIM_Base_MspInit+0x38>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	430a      	orrs	r2, r1
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f000 f9bb 	bl	8002270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f000 f9cd 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f8b4 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fa3e 	bl	80023c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <DMA1_Channel2_3_IRQHandler+0x20>)
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 fa3a 	bl	80023c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	200000c4 	.word	0x200000c4
 8001f5c:	2000010c 	.word	0x2000010c

08001f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <TIM2_IRQHandler+0x2c>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f001 faf4 	bl	8003554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2->CCR4 = (htim2.Init.Period * ui8TimPulse) / 100u; //rett CCR2?
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <TIM2_IRQHandler+0x2c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <TIM2_IRQHandler+0x30>)
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	435a      	muls	r2, r3
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	05dc      	lsls	r4, r3, #23
 8001f7a:	2164      	movs	r1, #100	; 0x64
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f7fe f8c3 	bl	8000108 <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	6423      	str	r3, [r4, #64]	; 0x40
  /* USER CODE END TIM2_IRQn 1 */
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	20000084 	.word	0x20000084
 8001f90:	20000000 	.word	0x20000000

08001f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa6:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fbc:	4c0b      	ldr	r4, [pc, #44]	; (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fca:	f7ff ffe3 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f001 fde1 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff fcb1 	bl	8001938 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
   ldr   r0, =_estack
 8001fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001fe4:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 8001fe8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001fec:	20000158 	.word	0x20000158

08001ff0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_COMP_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_Init+0x3c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Init+0x3c>)
 8002006:	2140      	movs	r1, #64	; 0x40
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200c:	2000      	movs	r0, #0
 800200e:	f000 f811 	bl	8002034 <HAL_InitTick>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d003      	beq.n	800201e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e001      	b.n	8002022 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800201e:	f7ff fea5 	bl	8001d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_InitTick+0x5c>)
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_InitTick+0x60>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	0019      	movs	r1, r3
 8002046:	23fa      	movs	r3, #250	; 0xfa
 8002048:	0098      	lsls	r0, r3, #2
 800204a:	f7fe f85d 	bl	8000108 <__udivsi3>
 800204e:	0003      	movs	r3, r0
 8002050:	0019      	movs	r1, r3
 8002052:	0020      	movs	r0, r4
 8002054:	f7fe f858 	bl	8000108 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f92d 	bl	80022ba <HAL_SYSTICK_Config>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e00f      	b.n	8002088 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d80b      	bhi.n	8002086 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	2301      	movs	r3, #1
 8002072:	425b      	negs	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f8fa 	bl	8002270 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_InitTick+0x64>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b003      	add	sp, #12
 800208e:	bd90      	pop	{r4, r7, pc}
 8002090:	20000004 	.word	0x20000004
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	001a      	movs	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	18d2      	adds	r2, r2, r3
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_IncTick+0x20>)
 80020ae:	601a      	str	r2, [r3, #0]
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000154 	.word	0x20000154

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_GetTick+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000154 	.word	0x20000154

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3301      	adds	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_Delay+0x40>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	001a      	movs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	f7ff ffe0 	bl	80020c0 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000000c 	.word	0x2000000c

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	0002      	movs	r2, r0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b7f      	cmp	r3, #127	; 0x7f
 800212a:	d809      	bhi.n	8002140 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	001a      	movs	r2, r3
 8002132:	231f      	movs	r3, #31
 8002134:	401a      	ands	r2, r3
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <__NVIC_EnableIRQ+0x30>)
 8002138:	2101      	movs	r1, #1
 800213a:	4091      	lsls	r1, r2
 800213c:	000a      	movs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
  }
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	0002      	movs	r2, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b7f      	cmp	r3, #127	; 0x7f
 8002160:	d828      	bhi.n	80021b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002162:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <__NVIC_SetPriority+0xd4>)
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b25b      	sxtb	r3, r3
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	589b      	ldr	r3, [r3, r2]
 8002172:	1dfa      	adds	r2, r7, #7
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	0011      	movs	r1, r2
 8002178:	2203      	movs	r2, #3
 800217a:	400a      	ands	r2, r1
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	21ff      	movs	r1, #255	; 0xff
 8002180:	4091      	lsls	r1, r2
 8002182:	000a      	movs	r2, r1
 8002184:	43d2      	mvns	r2, r2
 8002186:	401a      	ands	r2, r3
 8002188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	401a      	ands	r2, r3
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	0018      	movs	r0, r3
 8002198:	2303      	movs	r3, #3
 800219a:	4003      	ands	r3, r0
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a0:	481f      	ldr	r0, [pc, #124]	; (8002220 <__NVIC_SetPriority+0xd4>)
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	430a      	orrs	r2, r1
 80021ac:	33c0      	adds	r3, #192	; 0xc0
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021b2:	e031      	b.n	8002218 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b4:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <__NVIC_SetPriority+0xd8>)
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	0019      	movs	r1, r3
 80021bc:	230f      	movs	r3, #15
 80021be:	400b      	ands	r3, r1
 80021c0:	3b08      	subs	r3, #8
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3306      	adds	r3, #6
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	3304      	adds	r3, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1dfa      	adds	r2, r7, #7
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	0011      	movs	r1, r2
 80021d4:	2203      	movs	r2, #3
 80021d6:	400a      	ands	r2, r1
 80021d8:	00d2      	lsls	r2, r2, #3
 80021da:	21ff      	movs	r1, #255	; 0xff
 80021dc:	4091      	lsls	r1, r2
 80021de:	000a      	movs	r2, r1
 80021e0:	43d2      	mvns	r2, r2
 80021e2:	401a      	ands	r2, r3
 80021e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	401a      	ands	r2, r3
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	2303      	movs	r3, #3
 80021f6:	4003      	ands	r3, r0
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <__NVIC_SetPriority+0xd8>)
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	001c      	movs	r4, r3
 8002204:	230f      	movs	r3, #15
 8002206:	4023      	ands	r3, r4
 8002208:	3b08      	subs	r3, #8
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	430a      	orrs	r2, r1
 800220e:	3306      	adds	r3, #6
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	18c3      	adds	r3, r0, r3
 8002214:	3304      	adds	r3, #4
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b003      	add	sp, #12
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <SysTick_Config+0x40>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e010      	b.n	8002260 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <SysTick_Config+0x44>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	3a01      	subs	r2, #1
 8002244:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	2301      	movs	r3, #1
 8002248:	425b      	negs	r3, r3
 800224a:	2103      	movs	r1, #3
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ff7d 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <SysTick_Config+0x44>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x44>)
 800225a:	2207      	movs	r2, #7
 800225c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}
 8002268:	00ffffff 	.word	0x00ffffff
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	210f      	movs	r1, #15
 800227c:	187b      	adds	r3, r7, r1
 800227e:	1c02      	adds	r2, r0, #0
 8002280:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b25b      	sxtb	r3, r3
 800228a:	0011      	movs	r1, r2
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	0002      	movs	r2, r0
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff ff33 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ffaf 	bl	8002228 <SysTick_Config>
 80022ca:	0003      	movs	r3, r0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e061      	b.n	80023aa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a32      	ldr	r2, [pc, #200]	; (80023b4 <HAL_DMA_Init+0xe0>)
 80022ec:	4694      	mov	ip, r2
 80022ee:	4463      	add	r3, ip
 80022f0:	2114      	movs	r1, #20
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7fd ff08 	bl	8000108 <__udivsi3>
 80022f8:	0003      	movs	r3, r0
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_DMA_Init+0xe4>)
 8002304:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2225      	movs	r2, #37	; 0x25
 800230a:	2102      	movs	r1, #2
 800230c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_DMA_Init+0xe8>)
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	01db      	lsls	r3, r3, #7
 800235c:	429a      	cmp	r2, r3
 800235e:	d018      	beq.n	8002392 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_DMA_Init+0xec>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	211c      	movs	r1, #28
 800236a:	400b      	ands	r3, r1
 800236c:	210f      	movs	r1, #15
 800236e:	4099      	lsls	r1, r3
 8002370:	000b      	movs	r3, r1
 8002372:	43d9      	mvns	r1, r3
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_DMA_Init+0xec>)
 8002376:	400a      	ands	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_DMA_Init+0xec>)
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	201c      	movs	r0, #28
 8002388:	4003      	ands	r3, r0
 800238a:	409a      	lsls	r2, r3
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_DMA_Init+0xec>)
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2225      	movs	r2, #37	; 0x25
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	bffdfff8 	.word	0xbffdfff8
 80023b8:	40020000 	.word	0x40020000
 80023bc:	ffff800f 	.word	0xffff800f
 80023c0:	400200a8 	.word	0x400200a8

080023c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	221c      	movs	r2, #28
 80023e2:	4013      	ands	r3, r2
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	d026      	beq.n	800243e <HAL_DMA_IRQHandler+0x7a>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	d022      	beq.n	800243e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	4013      	ands	r3, r2
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	221c      	movs	r2, #28
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2104      	movs	r1, #4
 8002422:	4091      	lsls	r1, r2
 8002424:	000a      	movs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d100      	bne.n	8002432 <HAL_DMA_IRQHandler+0x6e>
 8002430:	e071      	b.n	8002516 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	0010      	movs	r0, r2
 800243a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800243c:	e06b      	b.n	8002516 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	221c      	movs	r2, #28
 8002444:	4013      	ands	r3, r2
 8002446:	2202      	movs	r2, #2
 8002448:	409a      	lsls	r2, r3
 800244a:	0013      	movs	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	d02d      	beq.n	80024ae <HAL_DMA_IRQHandler+0xea>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d029      	beq.n	80024ae <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2220      	movs	r2, #32
 8002462:	4013      	ands	r3, r2
 8002464:	d10b      	bne.n	800247e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	210a      	movs	r1, #10
 8002472:	438a      	bics	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2225      	movs	r2, #37	; 0x25
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	221c      	movs	r2, #28
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2102      	movs	r1, #2
 800248c:	4091      	lsls	r1, r2
 800248e:	000a      	movs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d039      	beq.n	8002516 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	0010      	movs	r0, r2
 80024aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ac:	e033      	b.n	8002516 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	221c      	movs	r2, #28
 80024b4:	4013      	ands	r3, r2
 80024b6:	2208      	movs	r2, #8
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	d02a      	beq.n	8002518 <HAL_DMA_IRQHandler+0x154>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d026      	beq.n	8002518 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	210e      	movs	r1, #14
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	221c      	movs	r2, #28
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2101      	movs	r1, #1
 80024e8:	4091      	lsls	r1, r2
 80024ea:	000a      	movs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2225      	movs	r2, #37	; 0x25
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	0010      	movs	r0, r2
 8002514:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46c0      	nop			; (mov r8, r8)
}
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002536:	e14f      	b.n	80027d8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4091      	lsls	r1, r2
 8002542:	000a      	movs	r2, r1
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <HAL_GPIO_Init+0x30>
 800254e:	e140      	b.n	80027d2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	4013      	ands	r3, r2
 8002558:	2b01      	cmp	r3, #1
 800255a:	d005      	beq.n	8002568 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002564:	2b02      	cmp	r3, #2
 8002566:	d130      	bne.n	80025ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	409a      	lsls	r2, r3
 8002576:	0013      	movs	r3, r2
 8002578:	43da      	mvns	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259e:	2201      	movs	r2, #1
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
 80025a4:	0013      	movs	r3, r2
 80025a6:	43da      	mvns	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	2201      	movs	r2, #1
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d017      	beq.n	8002606 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	4013      	ands	r3, r2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d123      	bne.n	800265a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	58d3      	ldr	r3, [r2, r3]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2207      	movs	r2, #7
 8002624:	4013      	ands	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	43da      	mvns	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2107      	movs	r1, #7
 800263e:	400b      	ands	r3, r1
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	43da      	mvns	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2203      	movs	r2, #3
 8002678:	401a      	ands	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	23c0      	movs	r3, #192	; 0xc0
 8002694:	029b      	lsls	r3, r3, #10
 8002696:	4013      	ands	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_GPIO_Init+0x17c>
 800269a:	e09a      	b.n	80027d2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269c:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 800269e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	430a      	orrs	r2, r1
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x2d4>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	589b      	ldr	r3, [r3, r2]
 80026b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	43da      	mvns	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	23a0      	movs	r3, #160	; 0xa0
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x1ea>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <HAL_GPIO_Init+0x2d8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1e6>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a46      	ldr	r2, [pc, #280]	; (80027fc <HAL_GPIO_Init+0x2dc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1e2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_GPIO_Init+0x2e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1de>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a44      	ldr	r2, [pc, #272]	; (8002804 <HAL_GPIO_Init+0x2e4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1da>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x1ec>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x1ec>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x1ec>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x1ec>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x1ec>
 800270a:	2300      	movs	r3, #0
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	2103      	movs	r1, #3
 8002710:	400a      	ands	r2, r1
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_GPIO_Init+0x2d4>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	4013      	ands	r3, r2
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43da      	mvns	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	029b      	lsls	r3, r3, #10
 800276c:	4013      	ands	r3, r2
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43da      	mvns	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	035b      	lsls	r3, r3, #13
 8002796:	4013      	ands	r3, r2
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	039b      	lsls	r3, r3, #14
 80027c0:	4013      	ands	r3, r2
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_GPIO_Init+0x2e8>)
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	40da      	lsrs	r2, r3
 80027e0:	1e13      	subs	r3, r2, #0
 80027e2:	d000      	beq.n	80027e6 <HAL_GPIO_Init+0x2c6>
 80027e4:	e6a8      	b.n	8002538 <HAL_GPIO_Init+0x18>
  }
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b006      	add	sp, #24
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000
 80027f8:	50000400 	.word	0x50000400
 80027fc:	50000800 	.word	0x50000800
 8002800:	50000c00 	.word	0x50000c00
 8002804:	50001c00 	.word	0x50001c00
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	0008      	movs	r0, r1
 8002816:	0011      	movs	r1, r2
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	1c02      	adds	r2, r0, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	1c0a      	adds	r2, r1, #0
 8002822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	1c7b      	adds	r3, r7, #1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282c:	1cbb      	adds	r3, r7, #2
 800282e:	881a      	ldrh	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002836:	1cbb      	adds	r3, r7, #2
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f000 fbb4 	bl	8002fc4 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285c:	4bc3      	ldr	r3, [pc, #780]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002866:	4bc1      	ldr	r3, [pc, #772]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	025b      	lsls	r3, r3, #9
 800286e:	4013      	ands	r3, r2
 8002870:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2201      	movs	r2, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCC_OscConfig+0x36>
 800287c:	e07e      	b.n	800297c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d007      	beq.n	8002894 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x68>
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4bb5      	ldr	r3, [pc, #724]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d100      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5a>
 80028a0:	e06b      	b.n	800297a <HAL_RCC_OscConfig+0x132>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d167      	bne.n	800297a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f000 fb8a 	bl	8002fc4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	025b      	lsls	r3, r3, #9
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x84>
 80028bc:	4bab      	ldr	r3, [pc, #684]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4baa      	ldr	r3, [pc, #680]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	0249      	lsls	r1, r1, #9
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e027      	b.n	800291c <HAL_RCC_OscConfig+0xd4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	23a0      	movs	r3, #160	; 0xa0
 80028d2:	02db      	lsls	r3, r3, #11
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d10e      	bne.n	80028f6 <HAL_RCC_OscConfig+0xae>
 80028d8:	4ba4      	ldr	r3, [pc, #656]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4ba3      	ldr	r3, [pc, #652]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	02c9      	lsls	r1, r1, #11
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	4ba1      	ldr	r3, [pc, #644]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4ba0      	ldr	r3, [pc, #640]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0249      	lsls	r1, r1, #9
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e012      	b.n	800291c <HAL_RCC_OscConfig+0xd4>
 80028f6:	4b9d      	ldr	r3, [pc, #628]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b9c      	ldr	r3, [pc, #624]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80028fc:	499c      	ldr	r1, [pc, #624]	; (8002b70 <HAL_RCC_OscConfig+0x328>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	4b9a      	ldr	r3, [pc, #616]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4b96      	ldr	r3, [pc, #600]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b95      	ldr	r3, [pc, #596]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002916:	4997      	ldr	r1, [pc, #604]	; (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fbcc 	bl	80020c0 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800292c:	e009      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292e:	f7ff fbc7 	bl	80020c0 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d902      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	f000 fb41 	bl	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002942:	4b8a      	ldr	r3, [pc, #552]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	4013      	ands	r3, r2
 800294c:	d0ef      	beq.n	800292e <HAL_RCC_OscConfig+0xe6>
 800294e:	e015      	b.n	800297c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fbb6 	bl	80020c0 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295a:	f7ff fbb1 	bl	80020c0 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e32b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800296c:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	4013      	ands	r3, r2
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x112>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d100      	bne.n	8002988 <HAL_RCC_OscConfig+0x140>
 8002986:	e08c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d13f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d13c      	bne.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80029a0:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_RCC_OscConfig+0x16c>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e307      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a6f      	ldr	r2, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x330>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	021a      	lsls	r2, r3, #8
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029ca:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2209      	movs	r2, #9
 80029d0:	4393      	bics	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029dc:	f000 fc44 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 80029e0:	0001      	movs	r1, r0
 80029e2:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	220f      	movs	r2, #15
 80029ea:	4013      	ands	r3, r2
 80029ec:	4a63      	ldr	r2, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x334>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	000a      	movs	r2, r1
 80029f2:	40da      	lsrs	r2, r3
 80029f4:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80029f8:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_RCC_OscConfig+0x33c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2513      	movs	r5, #19
 80029fe:	197c      	adds	r4, r7, r5
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff fb17 	bl	8002034 <HAL_InitTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a0a:	197b      	adds	r3, r7, r5
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d047      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8002a12:	2313      	movs	r3, #19
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	e2d4      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d027      	beq.n	8002a70 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a20:	4b52      	ldr	r3, [pc, #328]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2209      	movs	r2, #9
 8002a26:	4393      	bics	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7ff fb45 	bl	80020c0 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fb40 	bl	80020c0 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2ba      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2204      	movs	r2, #4
 8002a54:	4013      	ands	r3, r2
 8002a56:	d0f1      	beq.n	8002a3c <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	e018      	b.n	8002aa2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a70:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fb20 	bl	80020c0 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff fb1b 	bl	80020c0 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e295      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d1f1      	bne.n	8002a86 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_OscConfig+0x266>
 8002aac:	e0a3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d141      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x284>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e27b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_RCC_OscConfig+0x340>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	0a19      	lsrs	r1, r3, #8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	0b5b      	lsrs	r3, r3, #13
 8002afa:	3301      	adds	r3, #1
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	0212      	lsls	r2, r2, #8
 8002b00:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	210f      	movs	r1, #15
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	491b      	ldr	r1, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x334>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b14:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x33c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2513      	movs	r5, #19
 8002b1c:	197c      	adds	r4, r7, r5
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff fa88 	bl	8002034 <HAL_InitTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d062      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8002b30:	2313      	movs	r3, #19
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	e245      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d040      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0049      	lsls	r1, r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fab7 	bl	80020c0 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b56:	e019      	b.n	8002b8c <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b58:	f7ff fab2 	bl	80020c0 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d912      	bls.n	8002b8c <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e22c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	fffbffff 	.word	0xfffbffff
 8002b78:	ffffe0ff 	.word	0xffffe0ff
 8002b7c:	08003c84 	.word	0x08003c84
 8002b80:	20000004 	.word	0x20000004
 8002b84:	20000008 	.word	0x20000008
 8002b88:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b8c:	4bc6      	ldr	r3, [pc, #792]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d0df      	beq.n	8002b58 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	4bc3      	ldr	r3, [pc, #780]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4ac3      	ldr	r2, [pc, #780]	; (8002eac <HAL_RCC_OscConfig+0x664>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba6:	4bc0      	ldr	r3, [pc, #768]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	4bbe      	ldr	r3, [pc, #760]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	0a19      	lsrs	r1, r3, #8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	061a      	lsls	r2, r3, #24
 8002bba:	4bbb      	ldr	r3, [pc, #748]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	e019      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc2:	4bb9      	ldr	r3, [pc, #740]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4bb8      	ldr	r3, [pc, #736]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002bc8:	49b9      	ldr	r1, [pc, #740]	; (8002eb0 <HAL_RCC_OscConfig+0x668>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff fa77 	bl	80020c0 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd8:	f7ff fa72 	bl	80020c0 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1ec      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bea:	4baf      	ldr	r3, [pc, #700]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c08:	4ba7      	ldr	r3, [pc, #668]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c0c:	4ba6      	ldr	r3, [pc, #664]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7ff fa54 	bl	80020c0 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7ff fa4f 	bl	80020c0 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1c9      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c30:	4b9d      	ldr	r3, [pc, #628]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	2202      	movs	r2, #2
 8002c36:	4013      	ands	r3, r2
 8002c38:	d0f1      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3d6>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c40:	4b99      	ldr	r3, [pc, #612]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7ff fa3a 	bl	80020c0 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7ff fa35 	bl	80020c0 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1af      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d1f1      	bne.n	8002c52 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2204      	movs	r2, #4
 8002c74:	4013      	ands	r3, r2
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x432>
 8002c78:	e0af      	b.n	8002dda <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2327      	movs	r3, #39	; 0x27
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b86      	ldr	r3, [pc, #536]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c92:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0549      	lsls	r1, r1, #21
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c9c:	2327      	movs	r3, #39	; 0x27
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b83      	ldr	r3, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x66c>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	d11a      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x66c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x66c>)
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0049      	lsls	r1, r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff f9ff 	bl	80020c0 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7ff f9fa 	bl	80020c0 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e174      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_OscConfig+0x4ba>
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf6:	4b6c      	ldr	r3, [pc, #432]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0049      	lsls	r1, r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8002d00:	e031      	b.n	8002d66 <HAL_RCC_OscConfig+0x51e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
 8002d0a:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0e:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d10:	4967      	ldr	r1, [pc, #412]	; (8002eb0 <HAL_RCC_OscConfig+0x668>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	651a      	str	r2, [r3, #80]	; 0x50
 8002d16:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d1c:	4966      	ldr	r1, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x670>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	651a      	str	r2, [r3, #80]	; 0x50
 8002d22:	e020      	b.n	8002d66 <HAL_RCC_OscConfig+0x51e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	23a0      	movs	r3, #160	; 0xa0
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0x506>
 8002d30:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d34:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	00c9      	lsls	r1, r1, #3
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	0049      	lsls	r1, r1, #1
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x51e>
 8002d4e:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d54:	4956      	ldr	r1, [pc, #344]	; (8002eb0 <HAL_RCC_OscConfig+0x668>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
 8002d5a:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d5e:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d60:	4955      	ldr	r1, [pc, #340]	; (8002eb8 <HAL_RCC_OscConfig+0x670>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7ff f9a7 	bl	80020c0 <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d76:	e009      	b.n	8002d8c <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7ff f9a2 	bl	80020c0 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	4a4e      	ldr	r2, [pc, #312]	; (8002ebc <HAL_RCC_OscConfig+0x674>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e11b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x530>
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f991 	bl	80020c0 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7ff f98c 	bl	80020c0 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a43      	ldr	r2, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x674>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e105      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d1ef      	bne.n	8002da4 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc4:	2327      	movs	r3, #39	; 0x27
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd2:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dd4:	493a      	ldr	r1, [pc, #232]	; (8002ec0 <HAL_RCC_OscConfig+0x678>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	d049      	beq.n	8002e78 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d026      	beq.n	8002e3a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002dec:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002dfe:	2101      	movs	r1, #1
 8002e00:	430a      	orrs	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	0189      	lsls	r1, r1, #6
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7ff f955 	bl	80020c0 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1c:	f7ff f950 	bl	80020c0 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0ca      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d0f1      	beq.n	8002e1c <HAL_RCC_OscConfig+0x5d4>
 8002e38:	e01e      	b.n	8002e78 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	438a      	bics	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e4c:	491e      	ldr	r1, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x680>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7ff f935 	bl	80020c0 <HAL_GetTick>
 8002e56:	0003      	movs	r3, r0
 8002e58:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5c:	f7ff f930 	bl	80020c0 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0aa      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d1f1      	bne.n	8002e5c <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d100      	bne.n	8002e82 <HAL_RCC_OscConfig+0x63a>
 8002e80:	e09f      	b.n	8002fc2 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x642>
 8002e88:	e078      	b.n	8002f7c <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d159      	bne.n	8002f46 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCC_OscConfig+0x660>)
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <HAL_RCC_OscConfig+0x684>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7ff f90f 	bl	80020c0 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x69a>
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	ffff1fff 	.word	0xffff1fff
 8002eb0:	fffffeff 	.word	0xfffffeff
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	fffffbff 	.word	0xfffffbff
 8002ebc:	00001388 	.word	0x00001388
 8002ec0:	efffffff 	.word	0xefffffff
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	ffffdfff 	.word	0xffffdfff
 8002ecc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7ff f8f6 	bl	80020c0 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e070      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	049b      	lsls	r3, r3, #18
 8002eea:	4013      	ands	r3, r2
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x788>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	431a      	orrs	r2, r3
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0449      	lsls	r1, r1, #17
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f8d0 	bl	80020c0 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7ff f8cb 	bl	80020c0 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e045      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	049b      	lsls	r3, r3, #18
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x6de>
 8002f44:	e03d      	b.n	8002fc2 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f4c:	4921      	ldr	r1, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x78c>)
 8002f4e:	400a      	ands	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7ff f8b5 	bl	80020c0 <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7ff f8b0 	bl	80020c0 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e02a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	4013      	ands	r3, r2
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x714>
 8002f7a:	e022      	b.n	8002fc2 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_OscConfig+0x784>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	025b      	lsls	r3, r3, #9
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d10f      	bne.n	8002fbe <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	23f0      	movs	r3, #240	; 0xf0
 8002fa2:	039b      	lsls	r3, r3, #14
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	23c0      	movs	r3, #192	; 0xc0
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b00a      	add	sp, #40	; 0x28
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	ff02ffff 	.word	0xff02ffff
 8002fd4:	feffffff 	.word	0xfeffffff

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e129      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d91e      	bls.n	8003038 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b93      	ldr	r3, [pc, #588]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4393      	bics	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	4b90      	ldr	r3, [pc, #576]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800300c:	f7ff f858 	bl	80020c0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003014:	e009      	b.n	800302a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003016:	f7ff f853 	bl	80020c0 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4a8a      	ldr	r2, [pc, #552]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e10a      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d1ee      	bne.n	8003016 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003042:	4b83      	ldr	r3, [pc, #524]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	22f0      	movs	r2, #240	; 0xf0
 8003048:	4393      	bics	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	d100      	bne.n	8003062 <HAL_RCC_ClockConfig+0x8a>
 8003060:	e089      	b.n	8003176 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	4013      	ands	r3, r2
 8003074:	d120      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e2      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	049b      	lsls	r3, r3, #18
 800308a:	4013      	ands	r3, r2
 800308c:	d114      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0d6      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cb      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030a8:	4b69      	ldr	r3, [pc, #420]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4013      	ands	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0c3      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b8:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2203      	movs	r2, #3
 80030be:	4393      	bics	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030cc:	f7fe fff8 	bl	80020c0 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d111      	bne.n	8003100 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030dc:	e009      	b.n	80030f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030de:	f7fe ffef 	bl	80020c0 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0a6      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	220c      	movs	r2, #12
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d1ef      	bne.n	80030de <HAL_RCC_ClockConfig+0x106>
 80030fe:	e03a      	b.n	8003176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d111      	bne.n	800312c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	e009      	b.n	800311e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310a:	f7fe ffd9 	bl	80020c0 <HAL_GetTick>
 800310e:	0002      	movs	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	4a4d      	ldr	r2, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e090      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	220c      	movs	r2, #12
 8003124:	4013      	ands	r3, r2
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d1ef      	bne.n	800310a <HAL_RCC_ClockConfig+0x132>
 800312a:	e024      	b.n	8003176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d11b      	bne.n	800316c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003134:	e009      	b.n	800314a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fe ffc3 	bl	80020c0 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	4a42      	ldr	r2, [pc, #264]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e07a      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	220c      	movs	r2, #12
 8003150:	4013      	ands	r3, r2
 8003152:	2b04      	cmp	r3, #4
 8003154:	d1ef      	bne.n	8003136 <HAL_RCC_ClockConfig+0x15e>
 8003156:	e00e      	b.n	8003176 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fe ffb2 	bl	80020c0 <HAL_GetTick>
 800315c:	0002      	movs	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e069      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	220c      	movs	r2, #12
 8003172:	4013      	ands	r3, r2
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	4013      	ands	r3, r2
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d21e      	bcs.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4393      	bics	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003196:	f7fe ff93 	bl	80020c0 <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	e009      	b.n	80031b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fe ff8e 	bl	80020c0 <HAL_GetTick>
 80031a4:	0002      	movs	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e045      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2201      	movs	r2, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_RCC_ClockConfig+0x27c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00a      	beq.n	8003200 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x280>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00da      	lsls	r2, r3, #3
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003200:	f000 f832 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003204:	0001      	movs	r1, r0
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	220f      	movs	r2, #15
 800320e:	4013      	ands	r3, r2
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x284>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	000a      	movs	r2, r1
 8003216:	40da      	lsrs	r2, r3
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_ClockConfig+0x288>)
 800321a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_ClockConfig+0x28c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	250b      	movs	r5, #11
 8003222:	197c      	adds	r4, r7, r5
 8003224:	0018      	movs	r0, r3
 8003226:	f7fe ff05 	bl	8002034 <HAL_InitTick>
 800322a:	0003      	movs	r3, r0
 800322c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800322e:	197b      	adds	r3, r7, r5
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8003236:	230b      	movs	r3, #11
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	e000      	b.n	8003240 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bdb0      	pop	{r4, r5, r7, pc}
 8003248:	40022000 	.word	0x40022000
 800324c:	00001388 	.word	0x00001388
 8003250:	40021000 	.word	0x40021000
 8003254:	fffff8ff 	.word	0xfffff8ff
 8003258:	ffffc7ff 	.word	0xffffc7ff
 800325c:	08003c84 	.word	0x08003c84
 8003260:	20000004 	.word	0x20000004
 8003264:	20000008 	.word	0x20000008

08003268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	b08f      	sub	sp, #60	; 0x3c
 800326c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_GetSysClockFreq+0x130>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	230c      	movs	r3, #12
 8003278:	4013      	ands	r3, r2
 800327a:	2b08      	cmp	r3, #8
 800327c:	d00f      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x36>
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003282:	2b04      	cmp	r3, #4
 8003284:	d000      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x20>
 8003286:	e073      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_GetSysClockFreq+0x130>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	4013      	ands	r3, r2
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_GetSysClockFreq+0x134>)
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003296:	e079      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800329c:	e076      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032a2:	e073      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	0c9a      	lsrs	r2, r3, #18
 80032a8:	230f      	movs	r3, #15
 80032aa:	401a      	ands	r2, r3
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x140>)
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	0d9a      	lsrs	r2, r3, #22
 80032b6:	2303      	movs	r3, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	3301      	adds	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_GetSysClockFreq+0x130>)
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	4013      	ands	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80032d4:	2300      	movs	r3, #0
 80032d6:	69b8      	ldr	r0, [r7, #24]
 80032d8:	69f9      	ldr	r1, [r7, #28]
 80032da:	f7fc ffc1 	bl	8000260 <__aeabi_lmul>
 80032de:	0003      	movs	r3, r0
 80032e0:	000c      	movs	r4, r1
 80032e2:	0018      	movs	r0, r3
 80032e4:	0021      	movs	r1, r4
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f7fc ff95 	bl	8000220 <__aeabi_uldivmod>
 80032f6:	0003      	movs	r3, r0
 80032f8:	000c      	movs	r4, r1
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
 80032fc:	e035      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_GetSysClockFreq+0x130>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2210      	movs	r2, #16
 8003304:	4013      	ands	r3, r2
 8003306:	d019      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_RCC_GetSysClockFreq+0x134>)
 8003312:	2300      	movs	r3, #0
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	f7fc ffa2 	bl	8000260 <__aeabi_lmul>
 800331c:	0003      	movs	r3, r0
 800331e:	000c      	movs	r4, r1
 8003320:	0018      	movs	r0, r3
 8003322:	0021      	movs	r1, r4
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	2300      	movs	r3, #0
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f7fc ff76 	bl	8000220 <__aeabi_uldivmod>
 8003334:	0003      	movs	r3, r0
 8003336:	000c      	movs	r4, r1
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	e016      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	0018      	movs	r0, r3
 8003340:	2300      	movs	r3, #0
 8003342:	0019      	movs	r1, r3
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003346:	2300      	movs	r3, #0
 8003348:	f7fc ff8a 	bl	8000260 <__aeabi_lmul>
 800334c:	0003      	movs	r3, r0
 800334e:	000c      	movs	r4, r1
 8003350:	0018      	movs	r0, r3
 8003352:	0021      	movs	r1, r4
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	001d      	movs	r5, r3
 8003358:	2300      	movs	r3, #0
 800335a:	001e      	movs	r6, r3
 800335c:	002a      	movs	r2, r5
 800335e:	0033      	movs	r3, r6
 8003360:	f7fc ff5e 	bl	8000220 <__aeabi_uldivmod>
 8003364:	0003      	movs	r3, r0
 8003366:	000c      	movs	r4, r1
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800336e:	e00d      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_GetSysClockFreq+0x130>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0b5b      	lsrs	r3, r3, #13
 8003376:	2207      	movs	r2, #7
 8003378:	4013      	ands	r3, r2
 800337a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	3301      	adds	r3, #1
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0212      	lsls	r2, r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	0013      	movs	r3, r2
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800338a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b00f      	add	sp, #60	; 0x3c
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40021000 	.word	0x40021000
 800339c:	003d0900 	.word	0x003d0900
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	08003c94 	.word	0x08003c94

080033ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e083      	b.n	80034c6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	2382      	movs	r3, #130	; 0x82
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d009      	beq.n	80033e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	61da      	str	r2, [r3, #28]
 80033d8:	e005      	b.n	80033e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2251      	movs	r2, #81	; 0x51
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2250      	movs	r2, #80	; 0x50
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f7fe fcc6 	bl	8001d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2251      	movs	r2, #81	; 0x51
 800340c:	2102      	movs	r1, #2
 800340e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	438a      	bics	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	2382      	movs	r3, #130	; 0x82
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	401a      	ands	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	2384      	movs	r3, #132	; 0x84
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	400b      	ands	r3, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	400b      	ands	r3, r1
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2102      	movs	r1, #2
 8003448:	400b      	ands	r3, r1
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	2101      	movs	r1, #1
 8003452:	400b      	ands	r3, r1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	400b      	ands	r3, r1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2138      	movs	r1, #56	; 0x38
 8003468:	400b      	ands	r3, r1
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	400b      	ands	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	0011      	movs	r1, r2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	019b      	lsls	r3, r3, #6
 8003480:	401a      	ands	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	2204      	movs	r2, #4
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2210      	movs	r2, #16
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <HAL_SPI_Init+0x124>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2251      	movs	r2, #81	; 0x51
 80034c0:	2101      	movs	r1, #1
 80034c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	fffff7ff 	.word	0xfffff7ff

080034d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e032      	b.n	800354c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2239      	movs	r2, #57	; 0x39
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2238      	movs	r2, #56	; 0x38
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fe fce7 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2239      	movs	r2, #57	; 0x39
 8003506:	2102      	movs	r1, #2
 8003508:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	0019      	movs	r1, r3
 8003514:	0010      	movs	r0, r2
 8003516:	f000 f9f7 	bl	8003908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223e      	movs	r2, #62	; 0x3e
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223a      	movs	r2, #58	; 0x3a
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	223b      	movs	r2, #59	; 0x3b
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	223c      	movs	r2, #60	; 0x3c
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223d      	movs	r2, #61	; 0x3d
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2239      	movs	r2, #57	; 0x39
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d124      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2202      	movs	r2, #2
 8003572:	4013      	ands	r3, r2
 8003574:	2b02      	cmp	r3, #2
 8003576:	d11d      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2203      	movs	r2, #3
 800357e:	4252      	negs	r2, r2
 8003580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2203      	movs	r2, #3
 8003590:	4013      	ands	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f99e 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 800359c:	e007      	b.n	80035ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f991 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 f99d 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d125      	bne.n	800360e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11e      	bne.n	800360e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2205      	movs	r2, #5
 80035d6:	4252      	negs	r2, r2
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	23c0      	movs	r3, #192	; 0xc0
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f971 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 80035f6:	e007      	b.n	8003608 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f964 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f970 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2208      	movs	r2, #8
 8003616:	4013      	ands	r3, r2
 8003618:	2b08      	cmp	r3, #8
 800361a:	d124      	bne.n	8003666 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2208      	movs	r2, #8
 8003624:	4013      	ands	r3, r2
 8003626:	2b08      	cmp	r3, #8
 8003628:	d11d      	bne.n	8003666 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2209      	movs	r2, #9
 8003630:	4252      	negs	r2, r2
 8003632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2204      	movs	r2, #4
 8003638:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2203      	movs	r2, #3
 8003642:	4013      	ands	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0018      	movs	r0, r3
 800364a:	f000 f945 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 800364e:	e007      	b.n	8003660 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f938 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 f944 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2210      	movs	r2, #16
 800366e:	4013      	ands	r3, r2
 8003670:	2b10      	cmp	r3, #16
 8003672:	d125      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2210      	movs	r2, #16
 800367c:	4013      	ands	r3, r2
 800367e:	2b10      	cmp	r3, #16
 8003680:	d11e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2211      	movs	r2, #17
 8003688:	4252      	negs	r2, r2
 800368a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2208      	movs	r2, #8
 8003690:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	23c0      	movs	r3, #192	; 0xc0
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f918 	bl	80038d8 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e007      	b.n	80036ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f90b 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f917 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2201      	movs	r2, #1
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10f      	bne.n	80036ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2202      	movs	r2, #2
 80036e2:	4252      	negs	r2, r2
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f8e5 	bl	80038b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d10f      	bne.n	800371c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	4013      	ands	r3, r2
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d108      	bne.n	800371c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2241      	movs	r2, #65	; 0x41
 8003710:	4252      	negs	r2, r2
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f8ee 	bl	80038f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	230f      	movs	r3, #15
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2238      	movs	r2, #56	; 0x38
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIM_ConfigClockSource+0x20>
 8003740:	2302      	movs	r3, #2
 8003742:	e0b2      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x186>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2238      	movs	r2, #56	; 0x38
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2239      	movs	r2, #57	; 0x39
 8003750:	2102      	movs	r1, #2
 8003752:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2277      	movs	r2, #119	; 0x77
 8003760:	4393      	bics	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a53      	ldr	r2, [pc, #332]	; (80038b4 <HAL_TIM_ConfigClockSource+0x190>)
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d100      	bne.n	800377e <HAL_TIM_ConfigClockSource+0x5a>
 800377c:	e06b      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x132>
 800377e:	d80e      	bhi.n	800379e <HAL_TIM_ConfigClockSource+0x7a>
 8003780:	2b10      	cmp	r3, #16
 8003782:	d100      	bne.n	8003786 <HAL_TIM_ConfigClockSource+0x62>
 8003784:	e077      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x152>
 8003786:	d803      	bhi.n	8003790 <HAL_TIM_ConfigClockSource+0x6c>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d100      	bne.n	800378e <HAL_TIM_ConfigClockSource+0x6a>
 800378c:	e073      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x152>
 800378e:	e07b      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x164>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d100      	bne.n	8003796 <HAL_TIM_ConfigClockSource+0x72>
 8003794:	e06f      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x152>
 8003796:	2b30      	cmp	r3, #48	; 0x30
 8003798:	d100      	bne.n	800379c <HAL_TIM_ConfigClockSource+0x78>
 800379a:	e06c      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x152>
 800379c:	e074      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x164>
 800379e:	2b70      	cmp	r3, #112	; 0x70
 80037a0:	d00e      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x9c>
 80037a2:	d804      	bhi.n	80037ae <HAL_TIM_ConfigClockSource+0x8a>
 80037a4:	2b50      	cmp	r3, #80	; 0x50
 80037a6:	d036      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xf2>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d044      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x112>
 80037ac:	e06c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x164>
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	0152      	lsls	r2, r2, #5
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d06d      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	0192      	lsls	r2, r2, #6
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d017      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xca>
 80037be:	e063      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f000 f968 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2277      	movs	r2, #119	; 0x77
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e052      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f000 f951 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	01c9      	lsls	r1, r1, #7
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e03e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	001a      	movs	r2, r3
 8003824:	f000 f8c4 	bl	80039b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2150      	movs	r1, #80	; 0x50
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f91e 	bl	8003a70 <TIM_ITRx_SetConfig>
      break;
 8003834:	e02e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	001a      	movs	r2, r3
 8003844:	f000 f8e2 	bl	8003a0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2160      	movs	r1, #96	; 0x60
 800384e:	0018      	movs	r0, r3
 8003850:	f000 f90e 	bl	8003a70 <TIM_ITRx_SetConfig>
      break;
 8003854:	e01e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	001a      	movs	r2, r3
 8003864:	f000 f8a4 	bl	80039b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f8fe 	bl	8003a70 <TIM_ITRx_SetConfig>
      break;
 8003874:	e00e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f000 f8f5 	bl	8003a70 <TIM_ITRx_SetConfig>
      break;
 8003886:	e005      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
      break;
 8003890:	e000      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8003892:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2239      	movs	r2, #57	; 0x39
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2238      	movs	r2, #56	; 0x38
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

  return status;
 80038a4:	230f      	movs	r3, #15
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	ffff00ff 	.word	0xffff00ff

080038b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	429a      	cmp	r2, r3
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x2a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <TIM_Base_SetConfig+0x9c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x2a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <TIM_Base_SetConfig+0xa0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2270      	movs	r2, #112	; 0x70
 8003936:	4393      	bics	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	429a      	cmp	r2, r3
 800394c:	d007      	beq.n	800395e <TIM_Base_SetConfig+0x56>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <TIM_Base_SetConfig+0x9c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0x56>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <TIM_Base_SetConfig+0xa0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a12      	ldr	r2, [pc, #72]	; (80039ac <TIM_Base_SetConfig+0xa4>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	4393      	bics	r3, r2
 8003976:	001a      	movs	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	615a      	str	r2, [r3, #20]
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40010800 	.word	0x40010800
 80039a8:	40011400 	.word	0x40011400
 80039ac:	fffffcff 	.word	0xfffffcff

080039b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	2201      	movs	r2, #1
 80039c8:	4393      	bics	r3, r2
 80039ca:	001a      	movs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	22f0      	movs	r2, #240	; 0xf0
 80039da:	4393      	bics	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	220a      	movs	r2, #10
 80039ec:	4393      	bics	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b006      	add	sp, #24
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	4393      	bics	r3, r2
 8003a20:	001a      	movs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <TIM_TI2_ConfigInputStage+0x60>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	22a0      	movs	r2, #160	; 0xa0
 8003a48:	4393      	bics	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b006      	add	sp, #24
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	ffff0fff 	.word	0xffff0fff

08003a70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2270      	movs	r2, #112	; 0x70
 8003a84:	4393      	bics	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	2207      	movs	r2, #7
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	609a      	str	r2, [r3, #8]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <TIM_ETR_SetConfig+0x3c>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b006      	add	sp, #24
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	ffff00ff 	.word	0xffff00ff

08003ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2238      	movs	r2, #56	; 0x38
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e042      	b.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2238      	movs	r2, #56	; 0x38
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2239      	movs	r2, #57	; 0x39
 8003b08:	2102      	movs	r1, #2
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2270      	movs	r2, #112	; 0x70
 8003b20:	4393      	bics	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	05db      	lsls	r3, r3, #23
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d009      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10c      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2239      	movs	r2, #57	; 0x39
 8003b74:	2101      	movs	r1, #1
 8003b76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2238      	movs	r2, #56	; 0x38
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	40010800 	.word	0x40010800
 8003b90:	40011400 	.word	0x40011400

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	2600      	movs	r6, #0
 8003b98:	4d0c      	ldr	r5, [pc, #48]	; (8003bcc <__libc_init_array+0x38>)
 8003b9a:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	f000 f821 	bl	8003bec <_init>
 8003baa:	4d0a      	ldr	r5, [pc, #40]	; (8003bd4 <__libc_init_array+0x40>)
 8003bac:	4c0a      	ldr	r4, [pc, #40]	; (8003bd8 <__libc_init_array+0x44>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	00b3      	lsls	r3, r6, #2
 8003bba:	58eb      	ldr	r3, [r5, r3]
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	00b3      	lsls	r3, r6, #2
 8003bc4:	58eb      	ldr	r3, [r5, r3]
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	08003ca8 	.word	0x08003ca8
 8003bd0:	08003ca8 	.word	0x08003ca8
 8003bd4:	08003ca8 	.word	0x08003ca8
 8003bd8:	08003cac 	.word	0x08003cac

08003bdc <memset>:
 8003bdc:	0003      	movs	r3, r0
 8003bde:	1812      	adds	r2, r2, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	7019      	strb	r1, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
