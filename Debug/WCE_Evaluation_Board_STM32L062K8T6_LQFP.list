
WCE_Evaluation_Board_STM32L062K8T6_LQFP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003208  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e4  080032e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032ec  080032ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ec  080032ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003300  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003300  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cdd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d3  00000000  00000000  00025d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000628  00000000  00000000  00026fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00027610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012421  00000000  00000000  00027b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a95  00000000  00000000  00039fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ff46  00000000  00000000  0003fa46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af98c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000151c  00000000  00000000  000afa08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032b0 	.word	0x080032b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080032b0 	.word	0x080032b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	4c4e      	ldr	r4, [pc, #312]	; (80005c8 <main+0x13c>)
 8000490:	44a5      	add	sp, r4
 8000492:	af00      	add	r7, sp, #0
	//Due to small ram (8KB) we must divide frame array by 32 (157440/32=4920)
	//The resulting problem with this is that the beginning of every 10th row will be over exposed.
	//uint8_t received_data[4920] = {0}; // size of one frame: 157440
	//uint8_t test[2000] = {0}; //2000 gives hard fault. 1000 does not. Seems like the RAM is the limitation.

	uint8_t received_data[4920] = {0};  //320*492 = 157440    157440/32 = 4920
 8000494:	4b4d      	ldr	r3, [pc, #308]	; (80005cc <main+0x140>)
 8000496:	4a4e      	ldr	r2, [pc, #312]	; (80005d0 <main+0x144>)
 8000498:	4694      	mov	ip, r2
 800049a:	44bc      	add	ip, r7
 800049c:	4463      	add	r3, ip
 800049e:	0018      	movs	r0, r3
 80004a0:	4b4c      	ldr	r3, [pc, #304]	; (80005d4 <main+0x148>)
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 fefb 	bl	80032a0 <memset>
	uint8_t empty_data[966] = {0};
 80004aa:	4b4b      	ldr	r3, [pc, #300]	; (80005d8 <main+0x14c>)
 80004ac:	4a48      	ldr	r2, [pc, #288]	; (80005d0 <main+0x144>)
 80004ae:	4694      	mov	ip, r2
 80004b0:	44bc      	add	ip, r7
 80004b2:	4463      	add	r3, ip
 80004b4:	0018      	movs	r0, r3
 80004b6:	4b49      	ldr	r3, [pc, #292]	; (80005dc <main+0x150>)
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f002 fef0 	bl	80032a0 <memset>
	uint8_t test_pattern[6];
	test_pattern[0] = 0b10010000;
 80004c0:	4b47      	ldr	r3, [pc, #284]	; (80005e0 <main+0x154>)
 80004c2:	4a43      	ldr	r2, [pc, #268]	; (80005d0 <main+0x144>)
 80004c4:	4694      	mov	ip, r2
 80004c6:	44bc      	add	ip, r7
 80004c8:	4463      	add	r3, ip
 80004ca:	2290      	movs	r2, #144	; 0x90
 80004cc:	701a      	strb	r2, [r3, #0]
	test_pattern[1] = 0b11000001;
 80004ce:	4b44      	ldr	r3, [pc, #272]	; (80005e0 <main+0x154>)
 80004d0:	4a3f      	ldr	r2, [pc, #252]	; (80005d0 <main+0x144>)
 80004d2:	4694      	mov	ip, r2
 80004d4:	44bc      	add	ip, r7
 80004d6:	4463      	add	r3, ip
 80004d8:	22c1      	movs	r2, #193	; 0xc1
 80004da:	705a      	strb	r2, [r3, #1]
	test_pattern[2] = 0b00101010;
 80004dc:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <main+0x154>)
 80004de:	4a3c      	ldr	r2, [pc, #240]	; (80005d0 <main+0x144>)
 80004e0:	4694      	mov	ip, r2
 80004e2:	44bc      	add	ip, r7
 80004e4:	4463      	add	r3, ip
 80004e6:	222a      	movs	r2, #42	; 0x2a
 80004e8:	709a      	strb	r2, [r3, #2]
	test_pattern[3] = 0b10010010;
 80004ea:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <main+0x154>)
 80004ec:	4a38      	ldr	r2, [pc, #224]	; (80005d0 <main+0x144>)
 80004ee:	4694      	mov	ip, r2
 80004f0:	44bc      	add	ip, r7
 80004f2:	4463      	add	r3, ip
 80004f4:	2292      	movs	r2, #146	; 0x92
 80004f6:	70da      	strb	r2, [r3, #3]
	test_pattern[4] = 0b00000101;
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <main+0x154>)
 80004fa:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <main+0x144>)
 80004fc:	4694      	mov	ip, r2
 80004fe:	44bc      	add	ip, r7
 8000500:	4463      	add	r3, ip
 8000502:	2205      	movs	r2, #5
 8000504:	711a      	strb	r2, [r3, #4]
	test_pattern[5] = 0b00101000;
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <main+0x154>)
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <main+0x144>)
 800050a:	4694      	mov	ip, r2
 800050c:	44bc      	add	ip, r7
 800050e:	4463      	add	r3, ip
 8000510:	2228      	movs	r2, #40	; 0x28
 8000512:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fc90 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 fa46 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 faf4 	bl	8000b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000520:	f000 fad4 	bl	8000acc <MX_DMA_Init>
  MX_SPI1_Init();
 8000524:	f000 fa9a 	bl	8000a5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //---- TURN ON CAMERA LEDs ----
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000528:	23a0      	movs	r3, #160	; 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2201      	movs	r2, #1
 800052e:	2108      	movs	r1, #8
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fa59 	bl	80019e8 <HAL_GPIO_WritePin>

  //---- ACTIVATION CLOCK PULSE -----
    HAL_SPI_DeInit(&hspi1);
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <main+0x158>)
 8000538:	0018      	movs	r0, r3
 800053a:	f002 f8d3 	bl	80026e4 <HAL_SPI_DeInit>
    Toggle_GPIO_pin_Init();
 800053e:	f000 fb19 	bl	8000b74 <Toggle_GPIO_pin_Init>
    GPIOA -> ODR ^= GPIO_PIN_5;
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2120      	movs	r1, #32
 800054e:	404a      	eors	r2, r1
 8000550:	615a      	str	r2, [r3, #20]
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f000 fce0 	bl	8000f18 <HAL_Delay>
    GPIOA -> ODR ^= GPIO_PIN_5;
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2120      	movs	r1, #32
 8000564:	404a      	eors	r2, r1
 8000566:	615a      	str	r2, [r3, #20]

    //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
    MX_SPI1_Init();
 8000568:	f000 fa78 	bl	8000a5c <MX_SPI1_Init>
    HAL_SPI_Transmit(&hspi1, test_pattern, 6, 1000);
 800056c:	23fa      	movs	r3, #250	; 0xfa
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	481c      	ldr	r0, [pc, #112]	; (80005e4 <main+0x158>)
 8000574:	2206      	movs	r2, #6
 8000576:	f002 f8de 	bl	8002736 <HAL_SPI_Transmit>

    //---- WAIT FOR IDLE START-UP ----
    HAL_Delay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f000 fccc 	bl	8000f18 <HAL_Delay>

    //---- 10 CLOCKS -----
    HAL_SPI_DeInit(&hspi1);
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0x158>)
 8000582:	0018      	movs	r0, r3
 8000584:	f002 f8ae 	bl	80026e4 <HAL_SPI_DeInit>
    Toggle_GPIO_pin_Init();
 8000588:	f000 faf4 	bl	8000b74 <Toggle_GPIO_pin_Init>
    for (uint8_t i = 0; i < 20; i++)
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <main+0x15c>)
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	e00e      	b.n	80005b4 <main+0x128>
      {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000596:	23a0      	movs	r3, #160	; 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2120      	movs	r1, #32
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fa40 	bl	8001a22 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fcb8 	bl	8000f18 <HAL_Delay>
    for (uint8_t i = 0; i < 20; i++)
 80005a8:	490f      	ldr	r1, [pc, #60]	; (80005e8 <main+0x15c>)
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	3201      	adds	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x15c>)
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b13      	cmp	r3, #19
 80005bc:	d9eb      	bls.n	8000596 <main+0x10a>
      }

    //---- 12 CLOCKS -----  IS this to slow?
    for (uint8_t i = 0; i < 24; i++)
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <main+0x160>)
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e022      	b.n	800060e <main+0x182>
 80005c8:	ffffe8ec 	.word	0xffffe8ec
 80005cc:	ffffecc4 	.word	0xffffecc4
 80005d0:	00001710 	.word	0x00001710
 80005d4:	00001338 	.word	0x00001338
 80005d8:	ffffe8fc 	.word	0xffffe8fc
 80005dc:	000003c6 	.word	0x000003c6
 80005e0:	ffffe8f4 	.word	0xffffe8f4
 80005e4:	20000028 	.word	0x20000028
 80005e8:	0000170f 	.word	0x0000170f
 80005ec:	0000170e 	.word	0x0000170e
      {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	2120      	movs	r1, #32
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fa13 	bl	8001a22 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fc8b 	bl	8000f18 <HAL_Delay>
    for (uint8_t i = 0; i < 24; i++)
 8000602:	49e5      	ldr	r1, [pc, #916]	; (8000998 <main+0x50c>)
 8000604:	187b      	adds	r3, r7, r1
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	187b      	adds	r3, r7, r1
 800060a:	3201      	adds	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	4be2      	ldr	r3, [pc, #904]	; (8000998 <main+0x50c>)
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b17      	cmp	r3, #23
 8000616:	d9eb      	bls.n	80005f0 <main+0x164>
      }

    //---- INITIAL PRE-SYNC MODE: RECEIVE 492 PP FROM CAMERA -----
    MX_DMA_Init();
 8000618:	f000 fa58 	bl	8000acc <MX_DMA_Init>
    MX_SPI1_Init();
 800061c:	f000 fa1e 	bl	8000a5c <MX_SPI1_Init>
    HAL_SPI_Receive_DMA(&hspi1, received_data, 492);
 8000620:	23f6      	movs	r3, #246	; 0xf6
 8000622:	005a      	lsls	r2, r3, #1
 8000624:	24f5      	movs	r4, #245	; 0xf5
 8000626:	00a4      	lsls	r4, r4, #2
 8000628:	1939      	adds	r1, r7, r4
 800062a:	4bdc      	ldr	r3, [pc, #880]	; (800099c <main+0x510>)
 800062c:	0018      	movs	r0, r3
 800062e:	f002 f9d9 	bl	80029e4 <HAL_SPI_Receive_DMA>

    //---- SYNC MODE -----
    HAL_SPI_Receive_DMA(&hspi1, received_data, 984);
 8000632:	23f6      	movs	r3, #246	; 0xf6
 8000634:	009a      	lsls	r2, r3, #2
 8000636:	1939      	adds	r1, r7, r4
 8000638:	4bd8      	ldr	r3, [pc, #864]	; (800099c <main+0x510>)
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f9d2 	bl	80029e4 <HAL_SPI_Receive_DMA>

    //---- DELAY MODE -----
    HAL_SPI_Receive_DMA(&hspi1, received_data, 984);
 8000640:	23f6      	movs	r3, #246	; 0xf6
 8000642:	009a      	lsls	r2, r3, #2
 8000644:	1939      	adds	r1, r7, r4
 8000646:	4bd5      	ldr	r3, [pc, #852]	; (800099c <main+0x510>)
 8000648:	0018      	movs	r0, r3
 800064a:	f002 f9cb 	bl	80029e4 <HAL_SPI_Receive_DMA>

    //---- READOUT MODE -----
    HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 1
 800064e:	4ad4      	ldr	r2, [pc, #848]	; (80009a0 <main+0x514>)
 8000650:	1939      	adds	r1, r7, r4
 8000652:	4bd2      	ldr	r3, [pc, #840]	; (800099c <main+0x510>)
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f9c5 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 2
 800065a:	4ad1      	ldr	r2, [pc, #836]	; (80009a0 <main+0x514>)
 800065c:	1939      	adds	r1, r7, r4
 800065e:	4bcf      	ldr	r3, [pc, #828]	; (800099c <main+0x510>)
 8000660:	0018      	movs	r0, r3
 8000662:	f002 f9bf 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 3
 8000666:	4ace      	ldr	r2, [pc, #824]	; (80009a0 <main+0x514>)
 8000668:	1939      	adds	r1, r7, r4
 800066a:	4bcc      	ldr	r3, [pc, #816]	; (800099c <main+0x510>)
 800066c:	0018      	movs	r0, r3
 800066e:	f002 f9b9 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 4
 8000672:	4acb      	ldr	r2, [pc, #812]	; (80009a0 <main+0x514>)
 8000674:	1939      	adds	r1, r7, r4
 8000676:	4bc9      	ldr	r3, [pc, #804]	; (800099c <main+0x510>)
 8000678:	0018      	movs	r0, r3
 800067a:	f002 f9b3 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 5
 800067e:	4ac8      	ldr	r2, [pc, #800]	; (80009a0 <main+0x514>)
 8000680:	1939      	adds	r1, r7, r4
 8000682:	4bc6      	ldr	r3, [pc, #792]	; (800099c <main+0x510>)
 8000684:	0018      	movs	r0, r3
 8000686:	f002 f9ad 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 6
 800068a:	4ac5      	ldr	r2, [pc, #788]	; (80009a0 <main+0x514>)
 800068c:	1939      	adds	r1, r7, r4
 800068e:	4bc3      	ldr	r3, [pc, #780]	; (800099c <main+0x510>)
 8000690:	0018      	movs	r0, r3
 8000692:	f002 f9a7 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 7
 8000696:	4ac2      	ldr	r2, [pc, #776]	; (80009a0 <main+0x514>)
 8000698:	1939      	adds	r1, r7, r4
 800069a:	4bc0      	ldr	r3, [pc, #768]	; (800099c <main+0x510>)
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f9a1 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 8
 80006a2:	4abf      	ldr	r2, [pc, #764]	; (80009a0 <main+0x514>)
 80006a4:	1939      	adds	r1, r7, r4
 80006a6:	4bbd      	ldr	r3, [pc, #756]	; (800099c <main+0x510>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 f99b 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 9
 80006ae:	4abc      	ldr	r2, [pc, #752]	; (80009a0 <main+0x514>)
 80006b0:	1939      	adds	r1, r7, r4
 80006b2:	4bba      	ldr	r3, [pc, #744]	; (800099c <main+0x510>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f002 f995 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 10
 80006ba:	4ab9      	ldr	r2, [pc, #740]	; (80009a0 <main+0x514>)
 80006bc:	1939      	adds	r1, r7, r4
 80006be:	4bb7      	ldr	r3, [pc, #732]	; (800099c <main+0x510>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 f98f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 11
 80006c6:	4ab6      	ldr	r2, [pc, #728]	; (80009a0 <main+0x514>)
 80006c8:	1939      	adds	r1, r7, r4
 80006ca:	4bb4      	ldr	r3, [pc, #720]	; (800099c <main+0x510>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 f989 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 12
 80006d2:	4ab3      	ldr	r2, [pc, #716]	; (80009a0 <main+0x514>)
 80006d4:	1939      	adds	r1, r7, r4
 80006d6:	4bb1      	ldr	r3, [pc, #708]	; (800099c <main+0x510>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 f983 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 13
 80006de:	4ab0      	ldr	r2, [pc, #704]	; (80009a0 <main+0x514>)
 80006e0:	1939      	adds	r1, r7, r4
 80006e2:	4bae      	ldr	r3, [pc, #696]	; (800099c <main+0x510>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 f97d 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 14
 80006ea:	4aad      	ldr	r2, [pc, #692]	; (80009a0 <main+0x514>)
 80006ec:	1939      	adds	r1, r7, r4
 80006ee:	4bab      	ldr	r3, [pc, #684]	; (800099c <main+0x510>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 f977 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 15
 80006f6:	4aaa      	ldr	r2, [pc, #680]	; (80009a0 <main+0x514>)
 80006f8:	1939      	adds	r1, r7, r4
 80006fa:	4ba8      	ldr	r3, [pc, #672]	; (800099c <main+0x510>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 f971 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 16
 8000702:	4aa7      	ldr	r2, [pc, #668]	; (80009a0 <main+0x514>)
 8000704:	1939      	adds	r1, r7, r4
 8000706:	4ba5      	ldr	r3, [pc, #660]	; (800099c <main+0x510>)
 8000708:	0018      	movs	r0, r3
 800070a:	f002 f96b 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 17
 800070e:	4aa4      	ldr	r2, [pc, #656]	; (80009a0 <main+0x514>)
 8000710:	1939      	adds	r1, r7, r4
 8000712:	4ba2      	ldr	r3, [pc, #648]	; (800099c <main+0x510>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f965 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 18
 800071a:	4aa1      	ldr	r2, [pc, #644]	; (80009a0 <main+0x514>)
 800071c:	1939      	adds	r1, r7, r4
 800071e:	4b9f      	ldr	r3, [pc, #636]	; (800099c <main+0x510>)
 8000720:	0018      	movs	r0, r3
 8000722:	f002 f95f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 19
 8000726:	4a9e      	ldr	r2, [pc, #632]	; (80009a0 <main+0x514>)
 8000728:	1939      	adds	r1, r7, r4
 800072a:	4b9c      	ldr	r3, [pc, #624]	; (800099c <main+0x510>)
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f959 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 20
 8000732:	4a9b      	ldr	r2, [pc, #620]	; (80009a0 <main+0x514>)
 8000734:	1939      	adds	r1, r7, r4
 8000736:	4b99      	ldr	r3, [pc, #612]	; (800099c <main+0x510>)
 8000738:	0018      	movs	r0, r3
 800073a:	f002 f953 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 21
 800073e:	4a98      	ldr	r2, [pc, #608]	; (80009a0 <main+0x514>)
 8000740:	1939      	adds	r1, r7, r4
 8000742:	4b96      	ldr	r3, [pc, #600]	; (800099c <main+0x510>)
 8000744:	0018      	movs	r0, r3
 8000746:	f002 f94d 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 22
 800074a:	4a95      	ldr	r2, [pc, #596]	; (80009a0 <main+0x514>)
 800074c:	1939      	adds	r1, r7, r4
 800074e:	4b93      	ldr	r3, [pc, #588]	; (800099c <main+0x510>)
 8000750:	0018      	movs	r0, r3
 8000752:	f002 f947 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 23
 8000756:	4a92      	ldr	r2, [pc, #584]	; (80009a0 <main+0x514>)
 8000758:	1939      	adds	r1, r7, r4
 800075a:	4b90      	ldr	r3, [pc, #576]	; (800099c <main+0x510>)
 800075c:	0018      	movs	r0, r3
 800075e:	f002 f941 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 24
 8000762:	4a8f      	ldr	r2, [pc, #572]	; (80009a0 <main+0x514>)
 8000764:	1939      	adds	r1, r7, r4
 8000766:	4b8d      	ldr	r3, [pc, #564]	; (800099c <main+0x510>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 f93b 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 25
 800076e:	4a8c      	ldr	r2, [pc, #560]	; (80009a0 <main+0x514>)
 8000770:	1939      	adds	r1, r7, r4
 8000772:	4b8a      	ldr	r3, [pc, #552]	; (800099c <main+0x510>)
 8000774:	0018      	movs	r0, r3
 8000776:	f002 f935 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 26
 800077a:	4a89      	ldr	r2, [pc, #548]	; (80009a0 <main+0x514>)
 800077c:	1939      	adds	r1, r7, r4
 800077e:	4b87      	ldr	r3, [pc, #540]	; (800099c <main+0x510>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f92f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 27
 8000786:	4a86      	ldr	r2, [pc, #536]	; (80009a0 <main+0x514>)
 8000788:	1939      	adds	r1, r7, r4
 800078a:	4b84      	ldr	r3, [pc, #528]	; (800099c <main+0x510>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 f929 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 28
 8000792:	4a83      	ldr	r2, [pc, #524]	; (80009a0 <main+0x514>)
 8000794:	1939      	adds	r1, r7, r4
 8000796:	4b81      	ldr	r3, [pc, #516]	; (800099c <main+0x510>)
 8000798:	0018      	movs	r0, r3
 800079a:	f002 f923 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 29
 800079e:	4a80      	ldr	r2, [pc, #512]	; (80009a0 <main+0x514>)
 80007a0:	1939      	adds	r1, r7, r4
 80007a2:	4b7e      	ldr	r3, [pc, #504]	; (800099c <main+0x510>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 f91d 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 30
 80007aa:	4a7d      	ldr	r2, [pc, #500]	; (80009a0 <main+0x514>)
 80007ac:	1939      	adds	r1, r7, r4
 80007ae:	4b7b      	ldr	r3, [pc, #492]	; (800099c <main+0x510>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 f917 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 31
 80007b6:	4a7a      	ldr	r2, [pc, #488]	; (80009a0 <main+0x514>)
 80007b8:	1939      	adds	r1, r7, r4
 80007ba:	4b78      	ldr	r3, [pc, #480]	; (800099c <main+0x510>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 f911 	bl	80029e4 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 32
 80007c2:	4a77      	ldr	r2, [pc, #476]	; (80009a0 <main+0x514>)
 80007c4:	1939      	adds	r1, r7, r4
 80007c6:	4b75      	ldr	r3, [pc, #468]	; (800099c <main+0x510>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 f90b 	bl	80029e4 <HAL_SPI_Receive_DMA>

    //---- END OF FRAME -----
    HAL_SPI_Receive_DMA(&hspi1, received_data, 8);
 80007ce:	1939      	adds	r1, r7, r4
 80007d0:	4b72      	ldr	r3, [pc, #456]	; (800099c <main+0x510>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 f905 	bl	80029e4 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
	  HAL_SPI_Transmit(&hspi1, test_pattern, 6, 1000);
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	1d39      	adds	r1, r7, #4
 80007e0:	486e      	ldr	r0, [pc, #440]	; (800099c <main+0x510>)
 80007e2:	2206      	movs	r2, #6
 80007e4:	f001 ffa7 	bl	8002736 <HAL_SPI_Transmit>

	  //---- INTERFACE MODE -----
	  HAL_SPI_Transmit(&hspi1, empty_data, 966, 1000);
 80007e8:	23fa      	movs	r3, #250	; 0xfa
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4a6d      	ldr	r2, [pc, #436]	; (80009a4 <main+0x518>)
 80007ee:	210c      	movs	r1, #12
 80007f0:	1879      	adds	r1, r7, r1
 80007f2:	486a      	ldr	r0, [pc, #424]	; (800099c <main+0x510>)
 80007f4:	f001 ff9f 	bl	8002736 <HAL_SPI_Transmit>

	  //---- SYNC and DELAY MODE -----
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 1968);
 80007f8:	23f6      	movs	r3, #246	; 0xf6
 80007fa:	00da      	lsls	r2, r3, #3
 80007fc:	24f5      	movs	r4, #245	; 0xf5
 80007fe:	00a4      	lsls	r4, r4, #2
 8000800:	1939      	adds	r1, r7, r4
 8000802:	4b66      	ldr	r3, [pc, #408]	; (800099c <main+0x510>)
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f8ed 	bl	80029e4 <HAL_SPI_Receive_DMA>

	  //---- READOUT MODE -----
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 1
 800080a:	4a65      	ldr	r2, [pc, #404]	; (80009a0 <main+0x514>)
 800080c:	1939      	adds	r1, r7, r4
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <main+0x510>)
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f8e7 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 2
 8000816:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <main+0x514>)
 8000818:	1939      	adds	r1, r7, r4
 800081a:	4b60      	ldr	r3, [pc, #384]	; (800099c <main+0x510>)
 800081c:	0018      	movs	r0, r3
 800081e:	f002 f8e1 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 3
 8000822:	4a5f      	ldr	r2, [pc, #380]	; (80009a0 <main+0x514>)
 8000824:	1939      	adds	r1, r7, r4
 8000826:	4b5d      	ldr	r3, [pc, #372]	; (800099c <main+0x510>)
 8000828:	0018      	movs	r0, r3
 800082a:	f002 f8db 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 4
 800082e:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <main+0x514>)
 8000830:	1939      	adds	r1, r7, r4
 8000832:	4b5a      	ldr	r3, [pc, #360]	; (800099c <main+0x510>)
 8000834:	0018      	movs	r0, r3
 8000836:	f002 f8d5 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 5
 800083a:	4a59      	ldr	r2, [pc, #356]	; (80009a0 <main+0x514>)
 800083c:	1939      	adds	r1, r7, r4
 800083e:	4b57      	ldr	r3, [pc, #348]	; (800099c <main+0x510>)
 8000840:	0018      	movs	r0, r3
 8000842:	f002 f8cf 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 6
 8000846:	4a56      	ldr	r2, [pc, #344]	; (80009a0 <main+0x514>)
 8000848:	1939      	adds	r1, r7, r4
 800084a:	4b54      	ldr	r3, [pc, #336]	; (800099c <main+0x510>)
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f8c9 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 7
 8000852:	4a53      	ldr	r2, [pc, #332]	; (80009a0 <main+0x514>)
 8000854:	1939      	adds	r1, r7, r4
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <main+0x510>)
 8000858:	0018      	movs	r0, r3
 800085a:	f002 f8c3 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 8
 800085e:	4a50      	ldr	r2, [pc, #320]	; (80009a0 <main+0x514>)
 8000860:	1939      	adds	r1, r7, r4
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <main+0x510>)
 8000864:	0018      	movs	r0, r3
 8000866:	f002 f8bd 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 9
 800086a:	4a4d      	ldr	r2, [pc, #308]	; (80009a0 <main+0x514>)
 800086c:	1939      	adds	r1, r7, r4
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <main+0x510>)
 8000870:	0018      	movs	r0, r3
 8000872:	f002 f8b7 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 10
 8000876:	4a4a      	ldr	r2, [pc, #296]	; (80009a0 <main+0x514>)
 8000878:	1939      	adds	r1, r7, r4
 800087a:	4b48      	ldr	r3, [pc, #288]	; (800099c <main+0x510>)
 800087c:	0018      	movs	r0, r3
 800087e:	f002 f8b1 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 11
 8000882:	4a47      	ldr	r2, [pc, #284]	; (80009a0 <main+0x514>)
 8000884:	1939      	adds	r1, r7, r4
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <main+0x510>)
 8000888:	0018      	movs	r0, r3
 800088a:	f002 f8ab 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 12
 800088e:	4a44      	ldr	r2, [pc, #272]	; (80009a0 <main+0x514>)
 8000890:	1939      	adds	r1, r7, r4
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <main+0x510>)
 8000894:	0018      	movs	r0, r3
 8000896:	f002 f8a5 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 13
 800089a:	4a41      	ldr	r2, [pc, #260]	; (80009a0 <main+0x514>)
 800089c:	1939      	adds	r1, r7, r4
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <main+0x510>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 f89f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 14
 80008a6:	4a3e      	ldr	r2, [pc, #248]	; (80009a0 <main+0x514>)
 80008a8:	1939      	adds	r1, r7, r4
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x510>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f002 f899 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 15
 80008b2:	4a3b      	ldr	r2, [pc, #236]	; (80009a0 <main+0x514>)
 80008b4:	1939      	adds	r1, r7, r4
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <main+0x510>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 f893 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 16
 80008be:	4a38      	ldr	r2, [pc, #224]	; (80009a0 <main+0x514>)
 80008c0:	1939      	adds	r1, r7, r4
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <main+0x510>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 f88d 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 17
 80008ca:	4a35      	ldr	r2, [pc, #212]	; (80009a0 <main+0x514>)
 80008cc:	1939      	adds	r1, r7, r4
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <main+0x510>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 f887 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 18
 80008d6:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <main+0x514>)
 80008d8:	1939      	adds	r1, r7, r4
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <main+0x510>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 f881 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 19
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <main+0x514>)
 80008e4:	1939      	adds	r1, r7, r4
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <main+0x510>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f87b 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 20
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <main+0x514>)
 80008f0:	1939      	adds	r1, r7, r4
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <main+0x510>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 f875 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 21
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <main+0x514>)
 80008fc:	1939      	adds	r1, r7, r4
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <main+0x510>)
 8000900:	0018      	movs	r0, r3
 8000902:	f002 f86f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 22
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <main+0x514>)
 8000908:	1939      	adds	r1, r7, r4
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <main+0x510>)
 800090c:	0018      	movs	r0, r3
 800090e:	f002 f869 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 23
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <main+0x514>)
 8000914:	1939      	adds	r1, r7, r4
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <main+0x510>)
 8000918:	0018      	movs	r0, r3
 800091a:	f002 f863 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 24
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <main+0x514>)
 8000920:	1939      	adds	r1, r7, r4
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <main+0x510>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 f85d 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 25
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <main+0x514>)
 800092c:	1939      	adds	r1, r7, r4
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <main+0x510>)
 8000930:	0018      	movs	r0, r3
 8000932:	f002 f857 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 26
 8000936:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <main+0x514>)
 8000938:	1939      	adds	r1, r7, r4
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <main+0x510>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f851 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 27
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <main+0x514>)
 8000944:	1939      	adds	r1, r7, r4
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <main+0x510>)
 8000948:	0018      	movs	r0, r3
 800094a:	f002 f84b 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 28
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <main+0x514>)
 8000950:	1939      	adds	r1, r7, r4
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <main+0x510>)
 8000954:	0018      	movs	r0, r3
 8000956:	f002 f845 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 29
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <main+0x514>)
 800095c:	1939      	adds	r1, r7, r4
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <main+0x510>)
 8000960:	0018      	movs	r0, r3
 8000962:	f002 f83f 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 30
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <main+0x514>)
 8000968:	1939      	adds	r1, r7, r4
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <main+0x510>)
 800096c:	0018      	movs	r0, r3
 800096e:	f002 f839 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 31
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <main+0x514>)
 8000974:	1939      	adds	r1, r7, r4
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <main+0x510>)
 8000978:	0018      	movs	r0, r3
 800097a:	f002 f833 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 4920); // 32
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <main+0x514>)
 8000980:	1939      	adds	r1, r7, r4
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <main+0x510>)
 8000984:	0018      	movs	r0, r3
 8000986:	f002 f82d 	bl	80029e4 <HAL_SPI_Receive_DMA>

	  //---- END OF FRAME -----
	  HAL_SPI_Receive_DMA(&hspi1, received_data, 12);
 800098a:	1939      	adds	r1, r7, r4
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <main+0x510>)
 800098e:	220c      	movs	r2, #12
 8000990:	0018      	movs	r0, r3
 8000992:	f002 f827 	bl	80029e4 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Transmit(&hspi1, test_pattern, 6, 1000);
 8000996:	e720      	b.n	80007da <main+0x34e>
 8000998:	0000170e 	.word	0x0000170e
 800099c:	20000028 	.word	0x20000028
 80009a0:	00001338 	.word	0x00001338
 80009a4:	000003c6 	.word	0x000003c6

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b095      	sub	sp, #84	; 0x54
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	2418      	movs	r4, #24
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	2338      	movs	r3, #56	; 0x38
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f002 fc71 	bl	80032a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 fc6a 	bl	80032a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <SystemClock_Config+0xac>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <SystemClock_Config+0xb0>)
 80009d2:	401a      	ands	r2, r3
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <SystemClock_Config+0xac>)
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	0109      	lsls	r1, r1, #4
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2210      	movs	r2, #16
 80009f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2202      	movs	r2, #2
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 f822 	bl	8001a58 <HAL_RCC_OscConfig>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a18:	f000 f8d4 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	220f      	movs	r2, #15
 8000a20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2203      	movs	r2, #3
 8000a26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fbd2 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a48:	f000 f8bc 	bl	8000bc4 <Error_Handler>
  }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b015      	add	sp, #84	; 0x54
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40007000 	.word	0x40007000
 8000a58:	ffffe7ff 	.word	0xffffe7ff

08000a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a62:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <MX_SPI1_Init+0x6c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a68:	2282      	movs	r2, #130	; 0x82
 8000a6a:	0052      	lsls	r2, r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	0212      	lsls	r2, r2, #8
 8000a74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_SPI1_Init+0x68>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fd83 	bl	80025bc <HAL_SPI_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000aba:	f000 f883 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200a      	movs	r0, #10
 8000af0:	f000 fae0 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f000 faf2 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2314      	movs	r3, #20
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f002 fbc2 	bl	80032a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	430a      	orrs	r2, r1
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2200      	movs	r2, #0
 8000b3a:	210c      	movs	r1, #12
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 ff53 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED_EN_Pin|LED_Pin;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	220c      	movs	r2, #12
 8000b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	23a0      	movs	r3, #160	; 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fcf0 	bl	8001548 <HAL_GPIO_Init>

}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <Toggle_GPIO_pin_Init>:

/* USER CODE BEGIN 4 */
static void Toggle_GPIO_pin_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2314      	movs	r3, #20
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f002 fb8c 	bl	80032a0 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 ff29 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2220      	movs	r2, #32
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	1d3a      	adds	r2, r7, #4
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fcc6 	bl	8001548 <HAL_GPIO_Init>
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bca:	e7fe      	b.n	8000bca <Error_Handler+0x6>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_MspInit+0x24>)
 8000bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x24>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_MspInit+0x24>)
 8000bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_MspInit+0x24>)
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	0549      	lsls	r1, r1, #21
 8000be6:	430a      	orrs	r2, r1
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f002 fb4a 	bl	80032a0 <memset>
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <HAL_SPI_MspInit+0x124>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d000      	beq.n	8000c18 <HAL_SPI_MspInit+0x24>
 8000c16:	e07b      	b.n	8000d10 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <HAL_SPI_MspInit+0x128>)
 8000c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <HAL_SPI_MspInit+0x128>)
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0149      	lsls	r1, r1, #5
 8000c22:	430a      	orrs	r2, r1
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <HAL_SPI_MspInit+0x128>)
 8000c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2a:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <HAL_SPI_MspInit+0x128>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <HAL_SPI_MspInit+0x128>)
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c3e:	210c      	movs	r1, #12
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	22a0      	movs	r2, #160	; 0xa0
 8000c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2203      	movs	r2, #3
 8000c56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	187a      	adds	r2, r7, r1
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fc6e 	bl	8001548 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c6e:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <HAL_SPI_MspInit+0x130>)
 8000c70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fa37 	bl	8001118 <HAL_DMA_Init>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000cae:	f7ff ff89 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000cb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0x12c>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <HAL_SPI_MspInit+0x138>)
 8000cc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000ccc:	2210      	movs	r2, #16
 8000cce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fa0e 	bl	8001118 <HAL_DMA_Init>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000d00:	f7ff ff60 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000d08:	649a      	str	r2, [r3, #72]	; 0x48
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_SPI_MspInit+0x134>)
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b008      	add	sp, #32
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40013000 	.word	0x40013000
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	20000080 	.word	0x20000080
 8000d24:	4002001c 	.word	0x4002001c
 8000d28:	200000c8 	.word	0x200000c8
 8000d2c:	40020030 	.word	0x40020030

08000d30 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_SPI_MspDeInit+0x48>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d115      	bne.n	8000d6e <HAL_SPI_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspDeInit+0x4c>)
 8000d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_SPI_MspDeInit+0x4c>)
 8000d48:	490d      	ldr	r1, [pc, #52]	; (8000d80 <HAL_SPI_MspDeInit+0x50>)
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	635a      	str	r2, [r3, #52]	; 0x34

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	21a0      	movs	r1, #160	; 0xa0
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fd6d 	bl	8001834 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fa52 	bl	8001208 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fa4d 	bl	8001208 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	ffffefff 	.word	0xffffefff

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f89a 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fae8 	bl	8001390 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 fae4 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000080 	.word	0x20000080
 8000dd4:	200000c8 	.word	0x200000c8

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e0e:	f7ff ffe3 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f002 fa21 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb39 	bl	800048c <main>

08000e1a <LoopForever>:

LoopForever:
    b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
   ldr   r0, =_estack
 8000e1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e28:	080032f4 	.word	0x080032f4
  ldr r2, =_sbss
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e30:	20000114 	.word	0x20000114

08000e34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_COMP_IRQHandler>
	...

08000e38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x3c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Init+0x3c>)
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f811 	bl	8000e78 <HAL_InitTick>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e001      	b.n	8000e66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e62:	f7ff feb3 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0019      	movs	r1, r3
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0098      	lsls	r0, r3, #2
 8000e8e:	f7ff f93b 	bl	8000108 <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	0020      	movs	r0, r4
 8000e98:	f7ff f936 	bl	8000108 <__udivsi3>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f92d 	bl	80010fe <HAL_SYSTICK_Config>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00f      	b.n	8000ecc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80b      	bhi.n	8000eca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 f8fa 	bl	80010b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_InitTick+0x64>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d2      	adds	r2, r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000110 	.word	0x20000110

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000110 	.word	0x20000110

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fff0 	bl	8000f04 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_Delay+0x40>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	001a      	movs	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	f7ff ffe0 	bl	8000f04 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b004      	add	sp, #16
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6e:	d809      	bhi.n	8000f84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	231f      	movs	r3, #31
 8000f78:	401a      	ands	r2, r3
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_EnableIRQ+0x30>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	000a      	movs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
  }
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	0002      	movs	r2, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa4:	d828      	bhi.n	8000ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa6:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <__NVIC_SetPriority+0xd4>)
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	589b      	ldr	r3, [r3, r2]
 8000fb6:	1dfa      	adds	r2, r7, #7
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	0011      	movs	r1, r2
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	21ff      	movs	r1, #255	; 0xff
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	43d2      	mvns	r2, r2
 8000fca:	401a      	ands	r2, r3
 8000fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2303      	movs	r3, #3
 8000fde:	4003      	ands	r3, r0
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <__NVIC_SetPriority+0xd4>)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	33c0      	adds	r3, #192	; 0xc0
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff6:	e031      	b.n	800105c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <__NVIC_SetPriority+0xd8>)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	0019      	movs	r1, r3
 8001000:	230f      	movs	r3, #15
 8001002:	400b      	ands	r3, r1
 8001004:	3b08      	subs	r3, #8
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3306      	adds	r3, #6
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1dfa      	adds	r2, r7, #7
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	0011      	movs	r1, r2
 8001018:	2203      	movs	r2, #3
 800101a:	400a      	ands	r2, r1
 800101c:	00d2      	lsls	r2, r2, #3
 800101e:	21ff      	movs	r1, #255	; 0xff
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	43d2      	mvns	r2, r2
 8001026:	401a      	ands	r2, r3
 8001028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	401a      	ands	r2, r3
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	2303      	movs	r3, #3
 800103a:	4003      	ands	r3, r0
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	001c      	movs	r4, r3
 8001048:	230f      	movs	r3, #15
 800104a:	4023      	ands	r3, r4
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	430a      	orrs	r2, r1
 8001052:	3306      	adds	r3, #6
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	18c3      	adds	r3, r0, r3
 8001058:	3304      	adds	r3, #4
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b003      	add	sp, #12
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <SysTick_Config+0x40>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e010      	b.n	80010a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SysTick_Config+0x44>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	3a01      	subs	r2, #1
 8001088:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	2103      	movs	r1, #3
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff7d 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SysTick_Config+0x44>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x44>)
 800109e:	2207      	movs	r2, #7
 80010a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	00ffffff 	.word	0x00ffffff
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	210f      	movs	r1, #15
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b004      	add	sp, #16
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	0002      	movs	r2, r0
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ff33 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ffaf 	bl	800106c <SysTick_Config>
 800110e:	0003      	movs	r3, r0
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e061      	b.n	80011ee <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_DMA_Init+0xe0>)
 8001130:	4694      	mov	ip, r2
 8001132:	4463      	add	r3, ip
 8001134:	2114      	movs	r1, #20
 8001136:	0018      	movs	r0, r3
 8001138:	f7fe ffe6 	bl	8000108 <__udivsi3>
 800113c:	0003      	movs	r3, r0
 800113e:	009a      	lsls	r2, r3, #2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <HAL_DMA_Init+0xe4>)
 8001148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2225      	movs	r2, #37	; 0x25
 800114e:	2102      	movs	r1, #2
 8001150:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <HAL_DMA_Init+0xe8>)
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	01db      	lsls	r3, r3, #7
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d018      	beq.n	80011d6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_DMA_Init+0xec>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	211c      	movs	r1, #28
 80011ae:	400b      	ands	r3, r1
 80011b0:	210f      	movs	r1, #15
 80011b2:	4099      	lsls	r1, r3
 80011b4:	000b      	movs	r3, r1
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_DMA_Init+0xec>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_DMA_Init+0xec>)
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	201c      	movs	r0, #28
 80011cc:	4003      	ands	r3, r0
 80011ce:	409a      	lsls	r2, r3
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_DMA_Init+0xec>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2225      	movs	r2, #37	; 0x25
 80011e0:	2101      	movs	r1, #1
 80011e2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2224      	movs	r2, #36	; 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	0018      	movs	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	bffdfff8 	.word	0xbffdfff8
 80011fc:	40020000 	.word	0x40020000
 8001200:	ffff800f 	.word	0xffff800f
 8001204:	400200a8 	.word	0x400200a8

08001208 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e04a      	b.n	80012b0 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_DMA_DeInit+0xb0>)
 8001230:	4694      	mov	ip, r2
 8001232:	4463      	add	r3, ip
 8001234:	2114      	movs	r1, #20
 8001236:	0018      	movs	r0, r3
 8001238:	f7fe ff66 	bl	8000108 <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	009a      	lsls	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_DMA_DeInit+0xb4>)
 8001248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	221c      	movs	r2, #28
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2101      	movs	r1, #1
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_DMA_DeInit+0xb8>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	211c      	movs	r1, #28
 8001270:	400b      	ands	r3, r1
 8001272:	210f      	movs	r1, #15
 8001274:	4099      	lsls	r1, r3
 8001276:	000b      	movs	r3, r1
 8001278:	43d9      	mvns	r1, r3
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_DMA_DeInit+0xb8>)
 800127c:	400a      	ands	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2225      	movs	r2, #37	; 0x25
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2224      	movs	r2, #36	; 0x24
 80012aa:	2100      	movs	r1, #0
 80012ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	bffdfff8 	.word	0xbffdfff8
 80012bc:	40020000 	.word	0x40020000
 80012c0:	400200a8 	.word	0x400200a8

080012c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2317      	movs	r3, #23
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2224      	movs	r2, #36	; 0x24
 80012de:	5c9b      	ldrb	r3, [r3, r2]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_DMA_Start_IT+0x24>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e04f      	b.n	8001388 <HAL_DMA_Start_IT+0xc4>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	2101      	movs	r1, #1
 80012ee:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2225      	movs	r2, #37	; 0x25
 80012f4:	5c9b      	ldrb	r3, [r3, r2]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d13a      	bne.n	8001372 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2225      	movs	r2, #37	; 0x25
 8001300:	2102      	movs	r1, #2
 8001302:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	438a      	bics	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f8e3 	bl	80014ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	210e      	movs	r1, #14
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e00f      	b.n	8001360 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	210a      	movs	r1, #10
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2224      	movs	r2, #36	; 0x24
 8001376:	2100      	movs	r1, #0
 8001378:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800137a:	2317      	movs	r3, #23
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2202      	movs	r2, #2
 8001380:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001382:	2317      	movs	r3, #23
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b006      	add	sp, #24
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	221c      	movs	r2, #28
 80013ae:	4013      	ands	r3, r2
 80013b0:	2204      	movs	r2, #4
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	d026      	beq.n	800140a <HAL_DMA_IRQHandler+0x7a>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d022      	beq.n	800140a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2220      	movs	r2, #32
 80013cc:	4013      	ands	r3, r2
 80013ce:	d107      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	221c      	movs	r2, #28
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	2104      	movs	r1, #4
 80013ee:	4091      	lsls	r1, r2
 80013f0:	000a      	movs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d100      	bne.n	80013fe <HAL_DMA_IRQHandler+0x6e>
 80013fc:	e071      	b.n	80014e2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	0010      	movs	r0, r2
 8001406:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001408:	e06b      	b.n	80014e2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	221c      	movs	r2, #28
 8001410:	4013      	ands	r3, r2
 8001412:	2202      	movs	r2, #2
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	d02d      	beq.n	800147a <HAL_DMA_IRQHandler+0xea>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d029      	beq.n	800147a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	4013      	ands	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	210a      	movs	r1, #10
 800143e:	438a      	bics	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2225      	movs	r2, #37	; 0x25
 8001446:	2101      	movs	r1, #1
 8001448:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	221c      	movs	r2, #28
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2102      	movs	r1, #2
 8001458:	4091      	lsls	r1, r2
 800145a:	000a      	movs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2224      	movs	r2, #36	; 0x24
 8001462:	2100      	movs	r1, #0
 8001464:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d039      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	0010      	movs	r0, r2
 8001476:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001478:	e033      	b.n	80014e2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	221c      	movs	r2, #28
 8001480:	4013      	ands	r3, r2
 8001482:	2208      	movs	r2, #8
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	d02a      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x154>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2208      	movs	r2, #8
 8001492:	4013      	ands	r3, r2
 8001494:	d026      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	210e      	movs	r1, #14
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	221c      	movs	r2, #28
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2101      	movs	r1, #1
 80014b4:	4091      	lsls	r1, r2
 80014b6:	000a      	movs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2225      	movs	r2, #37	; 0x25
 80014c4:	2101      	movs	r1, #1
 80014c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	0010      	movs	r0, r2
 80014e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46c0      	nop			; (mov r8, r8)
}
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}

080014ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	221c      	movs	r2, #28
 8001500:	401a      	ands	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2101      	movs	r1, #1
 8001508:	4091      	lsls	r1, r2
 800150a:	000a      	movs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d108      	bne.n	8001530 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800152e:	e007      	b.n	8001540 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800155e:	e14f      	b.n	8001800 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4091      	lsls	r1, r2
 800156a:	000a      	movs	r2, r1
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_GPIO_Init+0x30>
 8001576:	e140      	b.n	80017fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	2201      	movs	r2, #1
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	4013      	ands	r3, r2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	58d3      	ldr	r3, [r2, r3]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2107      	movs	r1, #7
 8001666:	400b      	ands	r3, r1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	401a      	ands	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_GPIO_Init+0x17c>
 80016c2:	e09a      	b.n	80017fa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b54      	ldr	r3, [pc, #336]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80016c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_GPIO_Init+0x2d4>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	589b      	ldr	r3, [r3, r2]
 80016dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	409a      	lsls	r2, r3
 80016ea:	0013      	movs	r3, r2
 80016ec:	43da      	mvns	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	23a0      	movs	r3, #160	; 0xa0
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x1ea>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a47      	ldr	r2, [pc, #284]	; (8001820 <HAL_GPIO_Init+0x2d8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x1e6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x1e2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a45      	ldr	r2, [pc, #276]	; (8001828 <HAL_GPIO_Init+0x2e0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x1de>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a44      	ldr	r2, [pc, #272]	; (800182c <HAL_GPIO_Init+0x2e4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x1da>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x1ec>
 8001722:	2306      	movs	r3, #6
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x1ec>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x1ec>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x1ec>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x1ec>
 8001732:	2300      	movs	r3, #0
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	2103      	movs	r1, #3
 8001738:	400a      	ands	r2, r1
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_GPIO_Init+0x2d4>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43da      	mvns	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	4013      	ands	r3, r2
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	035b      	lsls	r3, r3, #13
 80017be:	4013      	ands	r3, r2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43da      	mvns	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	039b      	lsls	r3, r3, #14
 80017e8:	4013      	ands	r3, r2
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	40da      	lsrs	r2, r3
 8001808:	1e13      	subs	r3, r2, #0
 800180a:	d000      	beq.n	800180e <HAL_GPIO_Init+0x2c6>
 800180c:	e6a8      	b.n	8001560 <HAL_GPIO_Init+0x18>
  }
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b006      	add	sp, #24
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000
 8001820:	50000400 	.word	0x50000400
 8001824:	50000800 	.word	0x50000800
 8001828:	50000c00 	.word	0x50000c00
 800182c:	50001c00 	.word	0x50001c00
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800184a:	e0b6      	b.n	80019ba <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800184c:	2201      	movs	r2, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	409a      	lsls	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <HAL_GPIO_DeInit+0x2c>
 800185e:	e0a9      	b.n	80019b4 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001860:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <HAL_GPIO_DeInit+0x19c>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	589b      	ldr	r3, [r3, r2]
 800186c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2203      	movs	r2, #3
 8001872:	4013      	ands	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	23a0      	movs	r3, #160	; 0xa0
 8001884:	05db      	lsls	r3, r3, #23
 8001886:	429a      	cmp	r2, r3
 8001888:	d019      	beq.n	80018be <HAL_GPIO_DeInit+0x8a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a51      	ldr	r2, [pc, #324]	; (80019d4 <HAL_GPIO_DeInit+0x1a0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_DeInit+0x86>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a50      	ldr	r2, [pc, #320]	; (80019d8 <HAL_GPIO_DeInit+0x1a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_DeInit+0x82>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4f      	ldr	r2, [pc, #316]	; (80019dc <HAL_GPIO_DeInit+0x1a8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_DeInit+0x7e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4e      	ldr	r2, [pc, #312]	; (80019e0 <HAL_GPIO_DeInit+0x1ac>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_DeInit+0x7a>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e008      	b.n	80018c0 <HAL_GPIO_DeInit+0x8c>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_DeInit+0x8c>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_DeInit+0x8c>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_DeInit+0x8c>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_DeInit+0x8c>
 80018be:	2300      	movs	r3, #0
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	2103      	movs	r1, #3
 80018c4:	400a      	ands	r2, r1
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d132      	bne.n	8001936 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80018d0:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018da:	400a      	ands	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43d9      	mvns	r1, r3
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80018ec:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43d9      	mvns	r1, r3
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_GPIO_DeInit+0x1b0>)
 8001904:	400a      	ands	r2, r1
 8001906:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2203      	movs	r2, #3
 800190c:	4013      	ands	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_GPIO_DeInit+0x19c>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	589a      	ldr	r2, [r3, r2]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43d9      	mvns	r1, r3
 8001928:	4829      	ldr	r0, [pc, #164]	; (80019d0 <HAL_GPIO_DeInit+0x19c>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	400a      	ands	r2, r1
 8001930:	3302      	adds	r3, #2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2103      	movs	r1, #3
 8001940:	4099      	lsls	r1, r3
 8001942:	000b      	movs	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	58d3      	ldr	r3, [r2, r3]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	2107      	movs	r1, #7
 800195a:	400a      	ands	r2, r1
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	210f      	movs	r1, #15
 8001960:	4091      	lsls	r1, r2
 8001962:	000a      	movs	r2, r1
 8001964:	43d1      	mvns	r1, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	08d2      	lsrs	r2, r2, #3
 800196a:	4019      	ands	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	0052      	lsls	r2, r2, #1
 800197c:	2103      	movs	r1, #3
 800197e:	4091      	lsls	r1, r2
 8001980:	000a      	movs	r2, r1
 8001982:	43d2      	mvns	r2, r2
 8001984:	401a      	ands	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2101      	movs	r1, #1
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4091      	lsls	r1, r2
 8001994:	000a      	movs	r2, r1
 8001996:	43d2      	mvns	r2, r2
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	0052      	lsls	r2, r2, #1
 80019a6:	2103      	movs	r1, #3
 80019a8:	4091      	lsls	r1, r2
 80019aa:	000a      	movs	r2, r1
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
    }
    position++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	40da      	lsrs	r2, r3
 80019c0:	1e13      	subs	r3, r2, #0
 80019c2:	d000      	beq.n	80019c6 <HAL_GPIO_DeInit+0x192>
 80019c4:	e742      	b.n	800184c <HAL_GPIO_DeInit+0x18>
  }
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b006      	add	sp, #24
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40010000 	.word	0x40010000
 80019d4:	50000400 	.word	0x50000400
 80019d8:	50000800 	.word	0x50000800
 80019dc:	50000c00 	.word	0x50000c00
 80019e0:	50001c00 	.word	0x50001c00
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	0008      	movs	r0, r1
 80019f2:	0011      	movs	r1, r2
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1c7b      	adds	r3, r7, #1
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	1c7b      	adds	r3, r7, #1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a36:	1cbb      	adds	r3, r7, #2
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	1cb9      	adds	r1, r7, #2
 8001a46:	8809      	ldrh	r1, [r1, #0]
 8001a48:	400b      	ands	r3, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f000 fbb4 	bl	80021d4 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6c:	4bc3      	ldr	r3, [pc, #780]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	220c      	movs	r2, #12
 8001a72:	4013      	ands	r3, r2
 8001a74:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a76:	4bc1      	ldr	r3, [pc, #772]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <HAL_RCC_OscConfig+0x36>
 8001a8c:	e07e      	b.n	8001b8c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d007      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d112      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x68>
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	025b      	lsls	r3, r3, #9
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	4bb5      	ldr	r3, [pc, #724]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5a>
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_OscConfig+0x132>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d167      	bne.n	8001b8a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f000 fb8a 	bl	80021d4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x84>
 8001acc:	4bab      	ldr	r3, [pc, #684]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4baa      	ldr	r3, [pc, #680]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0249      	lsls	r1, r1, #9
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e027      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	23a0      	movs	r3, #160	; 0xa0
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10e      	bne.n	8001b06 <HAL_RCC_OscConfig+0xae>
 8001ae8:	4ba4      	ldr	r3, [pc, #656]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4ba3      	ldr	r3, [pc, #652]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	02c9      	lsls	r1, r1, #11
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4ba1      	ldr	r3, [pc, #644]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4ba0      	ldr	r3, [pc, #640]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0249      	lsls	r1, r1, #9
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e012      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001b06:	4b9d      	ldr	r3, [pc, #628]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b0c:	499c      	ldr	r1, [pc, #624]	; (8001d80 <HAL_RCC_OscConfig+0x328>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4b9a      	ldr	r3, [pc, #616]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	025b      	lsls	r3, r3, #9
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4b96      	ldr	r3, [pc, #600]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b95      	ldr	r3, [pc, #596]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b26:	4997      	ldr	r1, [pc, #604]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9e6 	bl	8000f04 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9e1 	bl	8000f04 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d902      	bls.n	8001b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f000 fb41 	bl	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b52:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0ef      	beq.n	8001b3e <HAL_RCC_OscConfig+0xe6>
 8001b5e:	e015      	b.n	8001b8c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9d0 	bl	8000f04 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9cb 	bl	8000f04 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e32b      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x112>
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCC_OscConfig+0x140>
 8001b96:	e08c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d13f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bb0:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x16c>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e307      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a6f      	ldr	r2, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	021a      	lsls	r2, r3, #8
 8001bd4:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bda:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2209      	movs	r2, #9
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bec:	f000 fc44 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8001bf0:	0001      	movs	r1, r0
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <HAL_RCC_OscConfig+0x334>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	000a      	movs	r2, r1
 8001c02:	40da      	lsrs	r2, r3
 8001c04:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001c06:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_OscConfig+0x33c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2513      	movs	r5, #19
 8001c0e:	197c      	adds	r4, r7, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff f931 	bl	8000e78 <HAL_InitTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c1a:	197b      	adds	r3, r7, r5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d047      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8001c22:	2313      	movs	r3, #19
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	e2d4      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d027      	beq.n	8001c80 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2209      	movs	r2, #9
 8001c36:	4393      	bics	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff f95f 	bl	8000f04 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f95a 	bl	8000f04 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e2ba      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	d0f1      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	021a      	lsls	r2, r3, #8
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	e018      	b.n	8001cb2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c80:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f93a 	bl	8000f04 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff f935 	bl	8000f04 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e295      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d1f1      	bne.n	8001c96 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d100      	bne.n	8001cbe <HAL_RCC_OscConfig+0x266>
 8001cbc:	e0a3      	b.n	8001e06 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d141      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x284>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e27b      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	0a19      	lsrs	r1, r3, #8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	061a      	lsls	r2, r3, #24
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	0b5b      	lsrs	r3, r3, #13
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0212      	lsls	r2, r2, #8
 8001d10:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	210f      	movs	r1, #15
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	491b      	ldr	r1, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x334>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001d24:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x33c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2513      	movs	r5, #19
 8001d2c:	197c      	adds	r4, r7, r5
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff f8a2 	bl	8000e78 <HAL_InitTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d38:	197b      	adds	r3, r7, r5
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d062      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8001d40:	2313      	movs	r3, #19
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	e245      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d040      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x324>)
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	0049      	lsls	r1, r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f8d1 	bl	8000f04 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d66:	e019      	b.n	8001d9c <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d68:	f7ff f8cc 	bl	8000f04 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d912      	bls.n	8001d9c <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e22c      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	fffeffff 	.word	0xfffeffff
 8001d84:	fffbffff 	.word	0xfffbffff
 8001d88:	ffffe0ff 	.word	0xffffe0ff
 8001d8c:	080032c8 	.word	0x080032c8
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004
 8001d98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d9c:	4bc6      	ldr	r3, [pc, #792]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0df      	beq.n	8001d68 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4bc3      	ldr	r3, [pc, #780]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4ac3      	ldr	r2, [pc, #780]	; (80020bc <HAL_RCC_OscConfig+0x664>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	4bc0      	ldr	r3, [pc, #768]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbc:	4bbe      	ldr	r3, [pc, #760]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	0a19      	lsrs	r1, r3, #8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	4bbb      	ldr	r3, [pc, #748]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e019      	b.n	8001e06 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd2:	4bb9      	ldr	r3, [pc, #740]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4bb8      	ldr	r3, [pc, #736]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001dd8:	49b9      	ldr	r1, [pc, #740]	; (80020c0 <HAL_RCC_OscConfig+0x668>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff f891 	bl	8000f04 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de8:	f7ff f88c 	bl	8000f04 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1ec      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dfa:	4baf      	ldr	r3, [pc, #700]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e18:	4ba7      	ldr	r3, [pc, #668]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f86e 	bl	8000f04 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f869 	bl	8000f04 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1c9      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e40:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f1      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3d6>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b9a      	ldr	r3, [pc, #616]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff f854 	bl	8000f04 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff f84f 	bl	8000f04 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1af      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f1      	bne.n	8001e62 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x432>
 8001e88:	e0af      	b.n	8001fea <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2327      	movs	r3, #39	; 0x27
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0549      	lsls	r1, r1, #21
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eac:	2327      	movs	r3, #39	; 0x27
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x66c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d11a      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x66c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x66c>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0049      	lsls	r1, r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f819 	bl	8000f04 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7ff f814 	bl	8000f04 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e174      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x66c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4ba>
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f10:	e031      	b.n	8001f76 <HAL_RCC_OscConfig+0x51e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f20:	4967      	ldr	r1, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x668>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f2c:	4966      	ldr	r1, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x670>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
 8001f32:	e020      	b.n	8001f76 <HAL_RCC_OscConfig+0x51e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	23a0      	movs	r3, #160	; 0xa0
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10e      	bne.n	8001f5e <HAL_RCC_OscConfig+0x506>
 8001f40:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	00c9      	lsls	r1, r1, #3
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f52:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x51e>
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f62:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f64:	4956      	ldr	r1, [pc, #344]	; (80020c0 <HAL_RCC_OscConfig+0x668>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	651a      	str	r2, [r3, #80]	; 0x50
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f70:	4955      	ldr	r1, [pc, #340]	; (80020c8 <HAL_RCC_OscConfig+0x670>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ffc1 	bl	8000f04 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f86:	e009      	b.n	8001f9c <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe ffbc 	bl	8000f04 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_RCC_OscConfig+0x674>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e11b      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0ef      	beq.n	8001f88 <HAL_RCC_OscConfig+0x530>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ffab 	bl	8000f04 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ffa6 	bl	8000f04 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x674>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e105      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1ef      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd4:	2327      	movs	r3, #39	; 0x27
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001fe4:	493a      	ldr	r1, [pc, #232]	; (80020d0 <HAL_RCC_OscConfig+0x678>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d049      	beq.n	8002088 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d026      	beq.n	800204a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 800200a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 800200e:	2101      	movs	r1, #1
 8002010:	430a      	orrs	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_OscConfig+0x67c>)
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x67c>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0189      	lsls	r1, r1, #6
 800201e:	430a      	orrs	r2, r1
 8002020:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe ff6f 	bl	8000f04 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7fe ff6a 	bl	8000f04 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0ca      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d0f1      	beq.n	800202c <HAL_RCC_OscConfig+0x5d4>
 8002048:	e01e      	b.n	8002088 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8002050:	2101      	movs	r1, #1
 8002052:	438a      	bics	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x67c>)
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x67c>)
 800205c:	491e      	ldr	r1, [pc, #120]	; (80020d8 <HAL_RCC_OscConfig+0x680>)
 800205e:	400a      	ands	r2, r1
 8002060:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe ff4f 	bl	8000f04 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206c:	f7fe ff4a 	bl	8000f04 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0aa      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d1f1      	bne.n	800206c <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x63a>
 8002090:	e09f      	b.n	80021d2 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d100      	bne.n	800209a <HAL_RCC_OscConfig+0x642>
 8002098:	e078      	b.n	800218c <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d159      	bne.n	8002156 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCC_OscConfig+0x660>)
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x684>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff29 	bl	8000f04 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020b6:	e01c      	b.n	80020f2 <HAL_RCC_OscConfig+0x69a>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	ffff1fff 	.word	0xffff1fff
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	40007000 	.word	0x40007000
 80020c8:	fffffbff 	.word	0xfffffbff
 80020cc:	00001388 	.word	0x00001388
 80020d0:	efffffff 	.word	0xefffffff
 80020d4:	40010000 	.word	0x40010000
 80020d8:	ffffdfff 	.word	0xffffdfff
 80020dc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe ff10 	bl	8000f04 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e070      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	049b      	lsls	r3, r3, #18
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a37      	ldr	r2, [pc, #220]	; (80021e0 <HAL_RCC_OscConfig+0x788>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	431a      	orrs	r2, r3
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 800211a:	430a      	orrs	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0449      	lsls	r1, r1, #17
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe feea 	bl	8000f04 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fee5 	bl	8000f04 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e045      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	049b      	lsls	r3, r3, #18
 8002150:	4013      	ands	r3, r2
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x6de>
 8002154:	e03d      	b.n	80021d2 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 800215c:	4921      	ldr	r1, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x78c>)
 800215e:	400a      	ands	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fecf 	bl	8000f04 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe feca 	bl	8000f04 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e02a      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	049b      	lsls	r3, r3, #18
 8002186:	4013      	ands	r3, r2
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x714>
 800218a:	e022      	b.n	80021d2 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x784>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	025b      	lsls	r3, r3, #9
 80021a4:	401a      	ands	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10f      	bne.n	80021ce <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	23f0      	movs	r3, #240	; 0xf0
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	401a      	ands	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b00a      	add	sp, #40	; 0x28
 80021da:	bdb0      	pop	{r4, r5, r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	ff02ffff 	.word	0xff02ffff
 80021e4:	feffffff 	.word	0xfeffffff

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e129      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b96      	ldr	r3, [pc, #600]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d91e      	bls.n	8002248 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b93      	ldr	r3, [pc, #588]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	4b90      	ldr	r3, [pc, #576]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800221c:	f7fe fe72 	bl	8000f04 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002224:	e009      	b.n	800223a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002226:	f7fe fe6d 	bl	8000f04 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4a8a      	ldr	r2, [pc, #552]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e10a      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b87      	ldr	r3, [pc, #540]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002252:	4b83      	ldr	r3, [pc, #524]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	22f0      	movs	r2, #240	; 0xf0
 8002258:	4393      	bics	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_RCC_ClockConfig+0x8a>
 8002270:	e089      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227a:	4b79      	ldr	r3, [pc, #484]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	4013      	ands	r3, r2
 8002284:	d120      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0e2      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	4013      	ands	r3, r2
 800229c:	d114      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0d6      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022aa:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2204      	movs	r2, #4
 80022b0:	4013      	ands	r3, r2
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0cb      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b8:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0c3      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c8:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2203      	movs	r2, #3
 80022ce:	4393      	bics	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4b62      	ldr	r3, [pc, #392]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fe12 	bl	8000f04 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d111      	bne.n	8002310 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ee:	f7fe fe09 	bl	8000f04 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0a6      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	220c      	movs	r2, #12
 8002308:	4013      	ands	r3, r2
 800230a:	2b08      	cmp	r3, #8
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_ClockConfig+0x106>
 800230e:	e03a      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d111      	bne.n	800233c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	e009      	b.n	800232e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7fe fdf3 	bl	8000f04 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e090      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	220c      	movs	r2, #12
 8002334:	4013      	ands	r3, r2
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d1ef      	bne.n	800231a <HAL_RCC_ClockConfig+0x132>
 800233a:	e024      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d11b      	bne.n	800237c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fddd 	bl	8000f04 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a42      	ldr	r2, [pc, #264]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e07a      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	220c      	movs	r2, #12
 8002360:	4013      	ands	r3, r2
 8002362:	2b04      	cmp	r3, #4
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_ClockConfig+0x15e>
 8002366:	e00e      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe fdcc 	bl	8000f04 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e069      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21e      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fdad 	bl	8000f04 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7fe fda8 	bl	8000f04 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	4a28      	ldr	r2, [pc, #160]	; (800245c <HAL_RCC_ClockConfig+0x274>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e045      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_ClockConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x27c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2208      	movs	r2, #8
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00a      	beq.n	8002410 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x280>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	00da      	lsls	r2, r3, #3
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002410:	f000 f832 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002414:	0001      	movs	r1, r0
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	220f      	movs	r2, #15
 800241e:	4013      	ands	r3, r2
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x284>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	000a      	movs	r2, r1
 8002426:	40da      	lsrs	r2, r3
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_ClockConfig+0x288>)
 800242a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_ClockConfig+0x28c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	250b      	movs	r5, #11
 8002432:	197c      	adds	r4, r7, r5
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fd1f 	bl	8000e78 <HAL_InitTick>
 800243a:	0003      	movs	r3, r0
 800243c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800243e:	197b      	adds	r3, r7, r5
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002446:	230b      	movs	r3, #11
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bdb0      	pop	{r4, r5, r7, pc}
 8002458:	40022000 	.word	0x40022000
 800245c:	00001388 	.word	0x00001388
 8002460:	40021000 	.word	0x40021000
 8002464:	fffff8ff 	.word	0xfffff8ff
 8002468:	ffffc7ff 	.word	0xffffc7ff
 800246c:	080032c8 	.word	0x080032c8
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b08f      	sub	sp, #60	; 0x3c
 800247c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	230c      	movs	r3, #12
 8002488:	4013      	ands	r3, r2
 800248a:	2b08      	cmp	r3, #8
 800248c:	d00f      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x36>
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x3c>
 8002492:	2b04      	cmp	r3, #4
 8002494:	d000      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x20>
 8002496:	e073      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x130>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2210      	movs	r2, #16
 800249e:	4013      	ands	r3, r2
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_GetSysClockFreq+0x134>)
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024a6:	e079      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ac:	e076      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024b2:	e073      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	0c9a      	lsrs	r2, r3, #18
 80024b8:	230f      	movs	r3, #15
 80024ba:	401a      	ands	r2, r3
 80024bc:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	0d9a      	lsrs	r2, r3, #22
 80024c6:	2303      	movs	r3, #3
 80024c8:	4013      	ands	r3, r2
 80024ca:	3301      	adds	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x130>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	4013      	ands	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024e4:	2300      	movs	r3, #0
 80024e6:	69b8      	ldr	r0, [r7, #24]
 80024e8:	69f9      	ldr	r1, [r7, #28]
 80024ea:	f7fd feb9 	bl	8000260 <__aeabi_lmul>
 80024ee:	0003      	movs	r3, r0
 80024f0:	000c      	movs	r4, r1
 80024f2:	0018      	movs	r0, r3
 80024f4:	0021      	movs	r1, r4
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f7fd fe8d 	bl	8000220 <__aeabi_uldivmod>
 8002506:	0003      	movs	r3, r0
 8002508:	000c      	movs	r4, r1
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
 800250c:	e035      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2210      	movs	r2, #16
 8002514:	4013      	ands	r3, r2
 8002516:	d019      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_RCC_GetSysClockFreq+0x134>)
 8002522:	2300      	movs	r3, #0
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	f7fd fe9a 	bl	8000260 <__aeabi_lmul>
 800252c:	0003      	movs	r3, r0
 800252e:	000c      	movs	r4, r1
 8002530:	0018      	movs	r0, r3
 8002532:	0021      	movs	r1, r4
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f7fd fe6e 	bl	8000220 <__aeabi_uldivmod>
 8002544:	0003      	movs	r3, r0
 8002546:	000c      	movs	r4, r1
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
 800254a:	e016      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	0018      	movs	r0, r3
 8002550:	2300      	movs	r3, #0
 8002552:	0019      	movs	r1, r3
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002556:	2300      	movs	r3, #0
 8002558:	f7fd fe82 	bl	8000260 <__aeabi_lmul>
 800255c:	0003      	movs	r3, r0
 800255e:	000c      	movs	r4, r1
 8002560:	0018      	movs	r0, r3
 8002562:	0021      	movs	r1, r4
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	001d      	movs	r5, r3
 8002568:	2300      	movs	r3, #0
 800256a:	001e      	movs	r6, r3
 800256c:	002a      	movs	r2, r5
 800256e:	0033      	movs	r3, r6
 8002570:	f7fd fe56 	bl	8000220 <__aeabi_uldivmod>
 8002574:	0003      	movs	r3, r0
 8002576:	000c      	movs	r4, r1
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257e:	e00d      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0b5b      	lsrs	r3, r3, #13
 8002586:	2207      	movs	r2, #7
 8002588:	4013      	ands	r3, r2
 800258a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	3301      	adds	r3, #1
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800259a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b00f      	add	sp, #60	; 0x3c
 80025a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	003d0900 	.word	0x003d0900
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200
 80025b8:	080032d8 	.word	0x080032d8

080025bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e083      	b.n	80026d6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	2382      	movs	r3, #130	; 0x82
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	429a      	cmp	r2, r3
 80025e0:	d009      	beq.n	80025f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	61da      	str	r2, [r3, #28]
 80025e8:	e005      	b.n	80025f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2251      	movs	r2, #81	; 0x51
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2250      	movs	r2, #80	; 0x50
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f7fe faee 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2251      	movs	r2, #81	; 0x51
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2140      	movs	r1, #64	; 0x40
 800262c:	438a      	bics	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	2382      	movs	r3, #130	; 0x82
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	401a      	ands	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	2384      	movs	r3, #132	; 0x84
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	400b      	ands	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	400b      	ands	r3, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2102      	movs	r1, #2
 8002658:	400b      	ands	r3, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2101      	movs	r1, #1
 8002662:	400b      	ands	r3, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6999      	ldr	r1, [r3, #24]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	400b      	ands	r3, r1
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	2138      	movs	r1, #56	; 0x38
 8002678:	400b      	ands	r3, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	400b      	ands	r3, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	0011      	movs	r1, r2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	0c1b      	lsrs	r3, r3, #16
 80026a0:	2204      	movs	r2, #4
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	2210      	movs	r2, #16
 80026ac:	401a      	ands	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <HAL_SPI_Init+0x124>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2251      	movs	r2, #81	; 0x51
 80026d0:	2101      	movs	r1, #1
 80026d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	fffff7ff 	.word	0xfffff7ff

080026e4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e01b      	b.n	800272e <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2251      	movs	r2, #81	; 0x51
 80026fa:	2102      	movs	r1, #2
 80026fc:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2140      	movs	r1, #64	; 0x40
 800270a:	438a      	bics	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fe fb0d 	bl	8000d30 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2251      	movs	r2, #81	; 0x51
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2250      	movs	r2, #80	; 0x50
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b088      	sub	sp, #32
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	1dbb      	adds	r3, r7, #6
 8002744:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002746:	231f      	movs	r3, #31
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2250      	movs	r2, #80	; 0x50
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_SPI_Transmit+0x26>
 8002758:	2302      	movs	r3, #2
 800275a:	e13e      	b.n	80029da <HAL_SPI_Transmit+0x2a4>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2250      	movs	r2, #80	; 0x50
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002764:	f7fe fbce 	bl	8000f04 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800276c:	2316      	movs	r3, #22
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	1dba      	adds	r2, r7, #6
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2251      	movs	r2, #81	; 0x51
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d004      	beq.n	800278c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002782:	231f      	movs	r3, #31
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
    goto error;
 800278a:	e11b      	b.n	80029c4 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_SPI_Transmit+0x64>
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800279a:	231f      	movs	r3, #31
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80027a2:	e10f      	b.n	80029c4 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2251      	movs	r2, #81	; 0x51
 80027a8:	2103      	movs	r1, #3
 80027aa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1dba      	adds	r2, r7, #6
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d110      	bne.n	8002814 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	438a      	bics	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	01c9      	lsls	r1, r1, #7
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	4013      	ands	r3, r2
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d007      	beq.n	8002832 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	429a      	cmp	r2, r3
 800283c:	d14e      	bne.n	80028dc <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <HAL_SPI_Transmit+0x11a>
 8002846:	2316      	movs	r3, #22
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d13f      	bne.n	80028d0 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	1c9a      	adds	r2, r3, #2
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002874:	e02c      	b.n	80028d0 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2202      	movs	r2, #2
 800287e:	4013      	ands	r3, r2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d112      	bne.n	80028aa <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80028a8:	e012      	b.n	80028d0 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028aa:	f7fe fb2b 	bl	8000f04 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d802      	bhi.n	80028c0 <HAL_SPI_Transmit+0x18a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	d102      	bne.n	80028c6 <HAL_SPI_Transmit+0x190>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d104      	bne.n	80028d0 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
          goto error;
 80028ce:	e079      	b.n	80029c4 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1cd      	bne.n	8002876 <HAL_SPI_Transmit+0x140>
 80028da:	e04f      	b.n	800297c <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_SPI_Transmit+0x1b8>
 80028e4:	2316      	movs	r3, #22
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d141      	bne.n	8002972 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002914:	e02d      	b.n	8002972 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d113      	bne.n	800294c <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	86da      	strh	r2, [r3, #54]	; 0x36
 800294a:	e012      	b.n	8002972 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800294c:	f7fe fada 	bl	8000f04 <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d802      	bhi.n	8002962 <HAL_SPI_Transmit+0x22c>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	d102      	bne.n	8002968 <HAL_SPI_Transmit+0x232>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8002968:	231f      	movs	r3, #31
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2203      	movs	r2, #3
 800296e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002970:	e028      	b.n	80029c4 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1cc      	bne.n	8002916 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fc22 	bl	80031cc <SPI_EndRxTxTransaction>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d002      	beq.n	8002992 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80029b8:	231f      	movs	r3, #31
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e000      	b.n	80029c4 <HAL_SPI_Transmit+0x28e>
  }

error:
 80029c2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2251      	movs	r2, #81	; 0x51
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2250      	movs	r2, #80	; 0x50
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029d4:	231f      	movs	r3, #31
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b008      	add	sp, #32
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029f2:	2317      	movs	r3, #23
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d112      	bne.n	8002a28 <HAL_SPI_Receive_DMA+0x44>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	2382      	movs	r3, #130	; 0x82
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10c      	bne.n	8002a28 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2251      	movs	r2, #81	; 0x51
 8002a12:	2104      	movs	r1, #4
 8002a14:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8ba 	bl	8002b98 <HAL_SPI_TransmitReceive_DMA>
 8002a24:	0003      	movs	r3, r0
 8002a26:	e0aa      	b.n	8002b7e <HAL_SPI_Receive_DMA+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2250      	movs	r2, #80	; 0x50
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_SPI_Receive_DMA+0x52>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0a3      	b.n	8002b7e <HAL_SPI_Receive_DMA+0x19a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2250      	movs	r2, #80	; 0x50
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2251      	movs	r2, #81	; 0x51
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d004      	beq.n	8002a54 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a52:	e08d      	b.n	8002b70 <HAL_SPI_Receive_DMA+0x18c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_SPI_Receive_DMA+0x7e>
 8002a5a:	1dbb      	adds	r3, r7, #6
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8002a62:	2317      	movs	r3, #23
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a6a:	e081      	b.n	8002b70 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2251      	movs	r2, #81	; 0x51
 8002a70:	2104      	movs	r1, #4
 8002a72:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1dba      	adds	r2, r7, #6
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1dba      	adds	r2, r7, #6
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_SPI_Receive_DMA+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	492e      	ldr	r1, [pc, #184]	; (8002b88 <HAL_SPI_Receive_DMA+0x1a4>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <HAL_SPI_Receive_DMA+0x1a8>)
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <HAL_SPI_Receive_DMA+0x1ac>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_SPI_Receive_DMA+0x1b0>)
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	2200      	movs	r2, #0
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	0019      	movs	r1, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b0c:	f7fe fbda 	bl	80012c4 <HAL_DMA_Start_IT>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_SPI_Receive_DMA+0x14e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	2210      	movs	r2, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b20:	2317      	movs	r3, #23
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2251      	movs	r2, #81	; 0x51
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	5499      	strb	r1, [r3, r2]
    goto error;
 8002b30:	e01e      	b.n	8002b70 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d007      	beq.n	8002b50 <HAL_SPI_Receive_DMA+0x16c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2250      	movs	r2, #80	; 0x50
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b78:	2317      	movs	r3, #23
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b006      	add	sp, #24
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	ffffbfff 	.word	0xffffbfff
 8002b8c:	08002f5f 	.word	0x08002f5f
 8002b90:	08002e1d 	.word	0x08002e1d
 8002b94:	08002f9b 	.word	0x08002f9b

08002b98 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	1cbb      	adds	r3, r7, #2
 8002ba8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002baa:	2317      	movs	r3, #23
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2250      	movs	r2, #80	; 0x50
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_SPI_TransmitReceive_DMA+0x28>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0f6      	b.n	8002dae <HAL_SPI_TransmitReceive_DMA+0x216>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2250      	movs	r2, #80	; 0x50
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bc8:	2016      	movs	r0, #22
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	2151      	movs	r1, #81	; 0x51
 8002bd0:	5c52      	ldrb	r2, [r2, r1]
 8002bd2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d012      	beq.n	8002c08 <HAL_SPI_TransmitReceive_DMA+0x70>
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	2382      	movs	r3, #130	; 0x82
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d108      	bne.n	8002bfe <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_SPI_TransmitReceive_DMA+0x66>
 8002bf4:	2316      	movs	r3, #22
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d004      	beq.n	8002c08 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c06:	e0cb      	b.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_SPI_TransmitReceive_DMA+0x84>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_SPI_TransmitReceive_DMA+0x84>
 8002c14:	1cbb      	adds	r3, r7, #2
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c24:	e0bc      	b.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2251      	movs	r2, #81	; 0x51
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d003      	beq.n	8002c3a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2251      	movs	r2, #81	; 0x51
 8002c36:	2105      	movs	r1, #5
 8002c38:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1cba      	adds	r2, r7, #2
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1cba      	adds	r2, r7, #2
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1cba      	adds	r2, r7, #2
 8002c60:	8812      	ldrh	r2, [r2, #0]
 8002c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1cba      	adds	r2, r7, #2
 8002c68:	8812      	ldrh	r2, [r2, #0]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2251      	movs	r2, #81	; 0x51
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d108      	bne.n	8002c96 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_SPI_TransmitReceive_DMA+0x224>)
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c94:	e007      	b.n	8002ca6 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	4a49      	ldr	r2, [pc, #292]	; (8002dc0 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a47      	ldr	r2, [pc, #284]	; (8002dc8 <HAL_SPI_TransmitReceive_DMA+0x230>)
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ccc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002cce:	f7fe faf9 	bl	80012c4 <HAL_DMA_Start_IT>
 8002cd2:	1e03      	subs	r3, r0, #0
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	2210      	movs	r2, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ce2:	2317      	movs	r3, #23
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2251      	movs	r2, #81	; 0x51
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
    goto error;
 8002cf2:	e055      	b.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d10:	2200      	movs	r2, #0
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d18:	2200      	movs	r2, #0
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d3c:	f7fe fac2 	bl	80012c4 <HAL_DMA_Start_IT>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d00e      	beq.n	8002d62 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2210      	movs	r2, #16
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002d50:	2317      	movs	r3, #23
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2251      	movs	r2, #81	; 0x51
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]
    goto error;
 8002d60:	e01e      	b.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2120      	movs	r1, #32
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2250      	movs	r2, #80	; 0x50
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002da8:	2317      	movs	r3, #23
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	08002f5f 	.word	0x08002f5f
 8002dbc:	08002e1d 	.word	0x08002e1d
 8002dc0:	08002f7d 	.word	0x08002f7d
 8002dc4:	08002ecb 	.word	0x08002ecb
 8002dc8:	08002f9b 	.word	0x08002f9b

08002dcc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fe f86b 	bl	8000f04 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d03d      	beq.n	8002ebc <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10e      	bne.n	8002e76 <SPI_DMAReceiveCplt+0x5a>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	2382      	movs	r3, #130	; 0x82
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d108      	bne.n	8002e76 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2103      	movs	r1, #3
 8002e70:	438a      	bics	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	e007      	b.n	8002e86 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	438a      	bics	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2164      	movs	r1, #100	; 0x64
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f933 	bl	80030f8 <SPI_EndRxTransaction>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d002      	beq.n	8002e9c <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2251      	movs	r2, #81	; 0x51
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff ffa9 	bl	8002e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002eba:	e003      	b.n	8002ec4 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff ff84 	bl	8002dcc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed8:	f7fe f814 	bl	8000f04 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d030      	beq.n	8002f50 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2120      	movs	r1, #32
 8002efa:	438a      	bics	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2164      	movs	r1, #100	; 0x64
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 f961 	bl	80031cc <SPI_EndRxTxTransaction>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d005      	beq.n	8002f1a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	2220      	movs	r2, #32
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2103      	movs	r1, #3
 8002f26:	438a      	bics	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2251      	movs	r2, #81	; 0x51
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff ff5f 	bl	8002e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f4e:	e003      	b.n	8002f58 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ff42 	bl	8002ddc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff ff3c 	bl	8002dec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff ff35 	bl	8002dfc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2251      	movs	r2, #81	; 0x51
 8002fc8:	2101      	movs	r1, #1
 8002fca:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7ff ff1c 	bl	8002e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fec:	f7fd ff8a 	bl	8000f04 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	18d3      	adds	r3, r2, r3
 8002ffa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ffc:	f7fd ff82 	bl	8000f04 <HAL_GetTick>
 8003000:	0003      	movs	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	0d1b      	lsrs	r3, r3, #20
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	4353      	muls	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003012:	e058      	b.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	d055      	beq.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800301a:	f7fd ff73 	bl	8000f04 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	429a      	cmp	r2, r3
 8003028:	d902      	bls.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x54>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d142      	bne.n	80030b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	21e0      	movs	r1, #224	; 0xe0
 800303c:	438a      	bics	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	2382      	movs	r3, #130	; 0x82
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	429a      	cmp	r2, r3
 800304a:	d113      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x98>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	429a      	cmp	r2, r3
 8003056:	d005      	beq.n	8003064 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	429a      	cmp	r2, r3
 800307e:	d110      	bne.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	491a      	ldr	r1, [pc, #104]	; (80030f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	0189      	lsls	r1, r1, #6
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2251      	movs	r2, #81	; 0x51
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2250      	movs	r2, #80	; 0x50
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e017      	b.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	425a      	negs	r2, r3
 80030d6:	4153      	adcs	r3, r2
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	001a      	movs	r2, r3
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d197      	bne.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b008      	add	sp, #32
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000000 	.word	0x20000000
 80030f4:	ffffdfff 	.word	0xffffdfff

080030f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	2382      	movs	r3, #130	; 0x82
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	429a      	cmp	r2, r3
 800310e:	d113      	bne.n	8003138 <SPI_EndRxTransaction+0x40>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	429a      	cmp	r2, r3
 800311a:	d005      	beq.n	8003128 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	438a      	bics	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2382      	movs	r3, #130	; 0x82
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	429a      	cmp	r2, r3
 8003142:	d12b      	bne.n	800319c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	429a      	cmp	r2, r3
 800314e:	d012      	beq.n	8003176 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	0013      	movs	r3, r2
 800315a:	2200      	movs	r2, #0
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	f7ff ff3d 	bl	8002fdc <SPI_WaitFlagStateUntilTimeout>
 8003162:	1e03      	subs	r3, r0, #0
 8003164:	d02d      	beq.n	80031c2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	2220      	movs	r2, #32
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e026      	b.n	80031c4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	0013      	movs	r3, r2
 8003180:	2200      	movs	r2, #0
 8003182:	2101      	movs	r1, #1
 8003184:	f7ff ff2a 	bl	8002fdc <SPI_WaitFlagStateUntilTimeout>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d01a      	beq.n	80031c2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	2220      	movs	r2, #32
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e013      	b.n	80031c4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0013      	movs	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	2101      	movs	r1, #1
 80031aa:	f7ff ff17 	bl	8002fdc <SPI_WaitFlagStateUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d007      	beq.n	80031c2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	2220      	movs	r2, #32
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e000      	b.n	80031c4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}

080031cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <SPI_EndRxTxTransaction+0x84>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	491d      	ldr	r1, [pc, #116]	; (8003254 <SPI_EndRxTxTransaction+0x88>)
 80031de:	0018      	movs	r0, r3
 80031e0:	f7fc ff92 	bl	8000108 <__udivsi3>
 80031e4:	0003      	movs	r3, r0
 80031e6:	001a      	movs	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	2382      	movs	r3, #130	; 0x82
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	429a      	cmp	r2, r3
 8003200:	d112      	bne.n	8003228 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0013      	movs	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	f7ff fee4 	bl	8002fdc <SPI_WaitFlagStateUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d016      	beq.n	8003246 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2220      	movs	r2, #32
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	3b01      	subs	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	4013      	ands	r3, r2
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d0f2      	beq.n	8003228 <SPI_EndRxTxTransaction+0x5c>
 8003242:	e000      	b.n	8003246 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003244:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000000 	.word	0x20000000
 8003254:	016e3600 	.word	0x016e3600

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	2600      	movs	r6, #0
 800325c:	4d0c      	ldr	r5, [pc, #48]	; (8003290 <__libc_init_array+0x38>)
 800325e:	4c0d      	ldr	r4, [pc, #52]	; (8003294 <__libc_init_array+0x3c>)
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	42a6      	cmp	r6, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	2600      	movs	r6, #0
 800326a:	f000 f821 	bl	80032b0 <_init>
 800326e:	4d0a      	ldr	r5, [pc, #40]	; (8003298 <__libc_init_array+0x40>)
 8003270:	4c0a      	ldr	r4, [pc, #40]	; (800329c <__libc_init_array+0x44>)
 8003272:	1b64      	subs	r4, r4, r5
 8003274:	10a4      	asrs	r4, r4, #2
 8003276:	42a6      	cmp	r6, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	00b3      	lsls	r3, r6, #2
 800327e:	58eb      	ldr	r3, [r5, r3]
 8003280:	4798      	blx	r3
 8003282:	3601      	adds	r6, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	00b3      	lsls	r3, r6, #2
 8003288:	58eb      	ldr	r3, [r5, r3]
 800328a:	4798      	blx	r3
 800328c:	3601      	adds	r6, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	080032ec 	.word	0x080032ec
 8003294:	080032ec 	.word	0x080032ec
 8003298:	080032ec 	.word	0x080032ec
 800329c:	080032f0 	.word	0x080032f0

080032a0 <memset>:
 80032a0:	0003      	movs	r3, r0
 80032a2:	1812      	adds	r2, r2, r0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d100      	bne.n	80032aa <memset+0xa>
 80032a8:	4770      	bx	lr
 80032aa:	7019      	strb	r1, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	e7f9      	b.n	80032a4 <memset+0x4>

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
